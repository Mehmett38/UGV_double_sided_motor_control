
004_RC_Filter_MotorDrive_F44.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08008590  08008590  00018590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008688  08008688  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008690  08008690  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008690  08008690  00018690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008694  08008694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c40  20000078  08008710  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cb8  08008710  00024cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf7b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c25  00000000  00000000  0003d023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00040c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  00042308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004633  00000000  00000000  00043860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5bc  00000000  00000000  00047e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7621  00000000  00000000  0006244f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149a70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e4  00000000  00000000  00149ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008578 	.word	0x08008578

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08008578 	.word	0x08008578

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b974 	b.w	8000d4c <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468e      	mov	lr, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14d      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	d969      	bls.n	8000b64 <__udivmoddi4+0xe8>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b152      	cbz	r2, 8000aac <__udivmoddi4+0x30>
 8000a96:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9a:	f1c2 0120 	rsb	r1, r2, #32
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	0c21      	lsrs	r1, r4, #16
 8000ab2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ab6:	fa1f f78c 	uxth.w	r7, ip
 8000aba:	fb08 e316 	mls	r3, r8, r6, lr
 8000abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac2:	fb06 f107 	mul.w	r1, r6, r7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad2:	f080 811f 	bcs.w	8000d14 <__udivmoddi4+0x298>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 811c 	bls.w	8000d14 <__udivmoddi4+0x298>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af0:	fb00 f707 	mul.w	r7, r0, r7
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x92>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b00:	f080 810a 	bcs.w	8000d18 <__udivmoddi4+0x29c>
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	f240 8107 	bls.w	8000d18 <__udivmoddi4+0x29c>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	1be4      	subs	r4, r4, r7
 8000b14:	2600      	movs	r6, #0
 8000b16:	b11d      	cbz	r5, 8000b20 <__udivmoddi4+0xa4>
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0xc2>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80ef 	beq.w	8000d0e <__udivmoddi4+0x292>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x160>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xd4>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80f9 	bhi.w	8000d42 <__udivmoddi4+0x2c6>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0303 	sbc.w	r3, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	469e      	mov	lr, r3
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0e0      	beq.n	8000b20 <__udivmoddi4+0xa4>
 8000b5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b62:	e7dd      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000b64:	b902      	cbnz	r2, 8000b68 <__udivmoddi4+0xec>
 8000b66:	deff      	udf	#255	; 0xff
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	f040 8092 	bne.w	8000c96 <__udivmoddi4+0x21a>
 8000b72:	eba1 010c 	sub.w	r1, r1, ip
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2601      	movs	r6, #1
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b86:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb0e f003 	mul.w	r0, lr, r3
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x12c>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x12a>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2c0>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x156>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x154>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2ca>
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bda:	e79c      	b.n	8000b16 <__udivmoddi4+0x9a>
 8000bdc:	f1c6 0720 	rsb	r7, r6, #32
 8000be0:	40b3      	lsls	r3, r6
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa20 f407 	lsr.w	r4, r0, r7
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	40f9      	lsrs	r1, r7
 8000bf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fb09 1118 	mls	r1, r9, r8, r1
 8000c0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c10:	fb08 f00e 	mul.w	r0, r8, lr
 8000c14:	4288      	cmp	r0, r1
 8000c16:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b8>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2bc>
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2bc>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4461      	add	r1, ip
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	458e      	cmp	lr, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1e2>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2b4>
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2b4>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c62:	fba0 9402 	umull	r9, r4, r0, r2
 8000c66:	eba1 010e 	sub.w	r1, r1, lr
 8000c6a:	42a1      	cmp	r1, r4
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x2a4>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x2a0>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x212>
 8000c76:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c82:	fa22 f306 	lsr.w	r3, r2, r6
 8000c86:	40f1      	lsrs	r1, r6
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	40d8      	lsrs	r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	4301      	orrs	r1, r0
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x260>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd4:	429e      	cmp	r6, r3
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cec:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x28a>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000d02:	3e02      	subs	r6, #2
 8000d04:	4461      	add	r1, ip
 8000d06:	1ac9      	subs	r1, r1, r3
 8000d08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0x104>
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e705      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e3      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6f8      	b.n	8000b0e <__udivmoddi4+0x92>
 8000d1c:	454b      	cmp	r3, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f8>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f8>
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x28a>
 8000d30:	4620      	mov	r0, r4
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1e2>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b8>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x12c>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e709      	b.n	8000b5a <__udivmoddi4+0xde>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x156>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <RCFilter_Init>:
#include "RCFilter.h"

void RCFilter_Init(RCFilter *filt, float cutoffFreqHz, float sampleTimeS) {
 8000d50:	b480      	push	{r7}
 8000d52:	b087      	sub	sp, #28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d5c:	edc7 0a01 	vstr	s1, [r7, #4]

	/* Compute equivalent 'RC' constant from cut-off frequency */
	float RC = 1.0f / (6.28318530718f * cutoffFreqHz);
 8000d60:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d64:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000dc8 <RCFilter_Init+0x78>
 8000d68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d74:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Pre-compute filter coefficients for first-order low-pass filter */
	filt->coeff[0] = sampleTimeS / (sampleTimeS + RC);
 8000d78:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d84:	edd7 6a01 	vldr	s13, [r7, #4]
 8000d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	edc3 7a00 	vstr	s15, [r3]
	filt->coeff[1] = RC / (sampleTimeS + RC);
 8000d92:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d9e:	edd7 6a05 	vldr	s13, [r7, #20]
 8000da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Clear output buffer */
	filt->out[0] = 0.0f;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	371c      	adds	r7, #28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40c90fdb 	.word	0x40c90fdb

08000dcc <RCFilter_Update>:

float RCFilter_Update(RCFilter *filt, float inp) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	ed87 0a00 	vstr	s0, [r7]

	/* Shift output samples */
	filt->out[1] = filt->out[0];
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	60da      	str	r2, [r3, #12]

	/* Compute new output sample */
	filt->out[0] = filt->coeff[0] * inp + filt->coeff[1] * filt->out[1];
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	ed93 7a00 	vldr	s14, [r3]
 8000de6:	edd7 7a00 	vldr	s15, [r7]
 8000dea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Return filtered sample */
	return (filt->out[0]);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	ee07 3a90 	vmov	s15, r3
}
 8000e10:	eeb0 0a67 	vmov.f32	s0, s15
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e24:	f001 f9ac 	bl	8002180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e28:	f000 f856 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2c:	f000 fa34 	bl	8001298 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e30:	f000 fa12 	bl	8001258 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e34:	f000 f9e6 	bl	8001204 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e38:	f000 f8bc 	bl	8000fb4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000e3c:	f000 f91a 	bl	8001074 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e40:	f000 f97c 	bl	800113c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adcValue, 2);
 8000e44:	2202      	movs	r2, #2
 8000e46:	4918      	ldr	r1, [pc, #96]	; (8000ea8 <main+0x88>)
 8000e48:	4818      	ldr	r0, [pc, #96]	; (8000eac <main+0x8c>)
 8000e4a:	f001 fb2f 	bl	80024ac <HAL_ADC_Start_DMA>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <main+0x90>)
 8000e52:	f003 fc51 	bl	80046f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e56:	2104      	movs	r1, #4
 8000e58:	4815      	ldr	r0, [pc, #84]	; (8000eb0 <main+0x90>)
 8000e5a:	f003 fc4d 	bl	80046f8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4814      	ldr	r0, [pc, #80]	; (8000eb4 <main+0x94>)
 8000e62:	f003 fc49 	bl	80046f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e66:	2104      	movs	r1, #4
 8000e68:	4812      	ldr	r0, [pc, #72]	; (8000eb4 <main+0x94>)
 8000e6a:	f003 fc45 	bl	80046f8 <HAL_TIM_PWM_Start>

  RCFilter_Init(&filt, 0.04f, 0.04f);
 8000e6e:	eddf 0a12 	vldr	s1, [pc, #72]	; 8000eb8 <main+0x98>
 8000e72:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000eb8 <main+0x98>
 8000e76:	4811      	ldr	r0, [pc, #68]	; (8000ebc <main+0x9c>)
 8000e78:	f7ff ff6a 	bl	8000d50 <RCFilter_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e7c:	f004 fd02 	bl	8005884 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <main+0xa0>)
 8000e82:	2100      	movs	r1, #0
 8000e84:	480f      	ldr	r0, [pc, #60]	; (8000ec4 <main+0xa4>)
 8000e86:	f004 fd47 	bl	8005918 <osThreadNew>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <main+0xa8>)
 8000e8e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(updateTask, NULL, &myTask02_attributes);
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <main+0xac>)
 8000e92:	2100      	movs	r1, #0
 8000e94:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <main+0xb0>)
 8000e96:	f004 fd3f 	bl	8005918 <osThreadNew>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <main+0xb4>)
 8000e9e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ea0:	f004 fd14 	bl	80058cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <main+0x84>
 8000ea6:	bf00      	nop
 8000ea8:	20000228 	.word	0x20000228
 8000eac:	20000094 	.word	0x20000094
 8000eb0:	2000013c 	.word	0x2000013c
 8000eb4:	20000184 	.word	0x20000184
 8000eb8:	3d23d70a 	.word	0x3d23d70a
 8000ebc:	20000218 	.word	0x20000218
 8000ec0:	080085c0 	.word	0x080085c0
 8000ec4:	08001375 	.word	0x08001375
 8000ec8:	20000210 	.word	0x20000210
 8000ecc:	080085e4 	.word	0x080085e4
 8000ed0:	08001385 	.word	0x08001385
 8000ed4:	20000214 	.word	0x20000214

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b094      	sub	sp, #80	; 0x50
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	2234      	movs	r2, #52	; 0x34
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f007 fa7c 	bl	80083e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <SystemClock_Config+0xd4>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	4a29      	ldr	r2, [pc, #164]	; (8000fac <SystemClock_Config+0xd4>)
 8000f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <SystemClock_Config+0xd4>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <SystemClock_Config+0xd8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f24:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <SystemClock_Config+0xd8>)
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <SystemClock_Config+0xd8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f40:	2310      	movs	r3, #16
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f44:	2302      	movs	r3, #2
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f50:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f56:	2304      	movs	r3, #4
 8000f58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 f80e 	bl	8003f88 <HAL_RCC_OscConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f72:	f000 fa27 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f76:	230f      	movs	r3, #15
 8000f78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	2102      	movs	r1, #2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fc7c 	bl	8003890 <HAL_RCC_ClockConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f9e:	f000 fa11 	bl	80013c4 <Error_Handler>
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3750      	adds	r7, #80	; 0x50
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40007000 	.word	0x40007000

08000fb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fc6:	4b28      	ldr	r3, [pc, #160]	; (8001068 <MX_ADC1_Init+0xb4>)
 8000fc8:	4a28      	ldr	r2, [pc, #160]	; (800106c <MX_ADC1_Init+0xb8>)
 8000fca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <MX_ADC1_Init+0xb4>)
 8000fce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <MX_ADC1_Init+0xb4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <MX_ADC1_Init+0xb4>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <MX_ADC1_Init+0xb4>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_ADC1_Init+0xb4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_ADC1_Init+0xb4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_ADC1_Init+0xb4>)
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <MX_ADC1_Init+0xbc>)
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_ADC1_Init+0xb4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_ADC1_Init+0xb4>)
 8001002:	2202      	movs	r2, #2
 8001004:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_ADC1_Init+0xb4>)
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_ADC1_Init+0xb4>)
 8001010:	2201      	movs	r2, #1
 8001012:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001014:	4814      	ldr	r0, [pc, #80]	; (8001068 <MX_ADC1_Init+0xb4>)
 8001016:	f001 f8f5 	bl	8002204 <HAL_ADC_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001020:	f000 f9d0 	bl	80013c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001024:	230a      	movs	r3, #10
 8001026:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800102c:	2303      	movs	r3, #3
 800102e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_ADC1_Init+0xb4>)
 8001036:	f001 fb71 	bl	800271c <HAL_ADC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001040:	f000 f9c0 	bl	80013c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001044:	230b      	movs	r3, #11
 8001046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001048:	2302      	movs	r3, #2
 800104a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_ADC1_Init+0xb4>)
 8001052:	f001 fb63 	bl	800271c <HAL_ADC_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800105c:	f000 f9b2 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000094 	.word	0x20000094
 800106c:	40012000 	.word	0x40012000
 8001070:	0f000001 	.word	0x0f000001

08001074 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <MX_TIM2_Init+0xc4>)
 8001098:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010a0:	2229      	movs	r2, #41	; 0x29
 80010a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1896;
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010ac:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 80010b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010be:	481e      	ldr	r0, [pc, #120]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010c0:	f003 faca 	bl	8004658 <HAL_TIM_PWM_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80010ca:	f000 f97b 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	4619      	mov	r1, r3
 80010dc:	4816      	ldr	r0, [pc, #88]	; (8001138 <MX_TIM2_Init+0xc4>)
 80010de:	f004 f83b 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80010e8:	f000 f96c 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ec:	2360      	movs	r3, #96	; 0x60
 80010ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2200      	movs	r2, #0
 8001100:	4619      	mov	r1, r3
 8001102:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_TIM2_Init+0xc4>)
 8001104:	f003 fcc8 	bl	8004a98 <HAL_TIM_PWM_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800110e:	f000 f959 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2204      	movs	r2, #4
 8001116:	4619      	mov	r1, r3
 8001118:	4807      	ldr	r0, [pc, #28]	; (8001138 <MX_TIM2_Init+0xc4>)
 800111a:	f003 fcbd 	bl	8004a98 <HAL_TIM_PWM_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001124:	f000 f94e 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001128:	4803      	ldr	r0, [pc, #12]	; (8001138 <MX_TIM2_Init+0xc4>)
 800112a:	f000 fe97 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	; 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000013c 	.word	0x2000013c

0800113c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]
 800115a:	615a      	str	r2, [r3, #20]
 800115c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <MX_TIM3_Init+0xc0>)
 8001160:	4a27      	ldr	r2, [pc, #156]	; (8001200 <MX_TIM3_Init+0xc4>)
 8001162:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <MX_TIM3_Init+0xc0>)
 8001166:	2229      	movs	r2, #41	; 0x29
 8001168:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <MX_TIM3_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1900;
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <MX_TIM3_Init+0xc0>)
 8001172:	f240 726c 	movw	r2, #1900	; 0x76c
 8001176:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <MX_TIM3_Init+0xc0>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_TIM3_Init+0xc0>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001184:	481d      	ldr	r0, [pc, #116]	; (80011fc <MX_TIM3_Init+0xc0>)
 8001186:	f003 fa67 	bl	8004658 <HAL_TIM_PWM_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001190:	f000 f918 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	4619      	mov	r1, r3
 80011a2:	4816      	ldr	r0, [pc, #88]	; (80011fc <MX_TIM3_Init+0xc0>)
 80011a4:	f003 ffd8 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011ae:	f000 f909 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b2:	2360      	movs	r3, #96	; 0x60
 80011b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <MX_TIM3_Init+0xc0>)
 80011ca:	f003 fc65 	bl	8004a98 <HAL_TIM_PWM_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80011d4:	f000 f8f6 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2204      	movs	r2, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <MX_TIM3_Init+0xc0>)
 80011e0:	f003 fc5a 	bl	8004a98 <HAL_TIM_PWM_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011ea:	f000 f8eb 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <MX_TIM3_Init+0xc0>)
 80011f0:	f000 fe34 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000184 	.word	0x20000184
 8001200:	40000400 	.word	0x40000400

08001204 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <MX_USART2_UART_Init+0x50>)
 800120c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001214:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800123c:	f004 f81c 	bl	8005278 <HAL_UART_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001246:	f000 f8bd 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200001cc 	.word	0x200001cc
 8001254:	40004400 	.word	0x40004400

08001258 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_DMA_Init+0x3c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <MX_DMA_Init+0x3c>)
 8001268:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_DMA_Init+0x3c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2105      	movs	r1, #5
 800127e:	2038      	movs	r0, #56	; 0x38
 8001280:	f001 fdbe 	bl	8002e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001284:	2038      	movs	r0, #56	; 0x38
 8001286:	f001 fdd7 	bl	8002e38 <HAL_NVIC_EnableIRQ>

}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a2c      	ldr	r2, [pc, #176]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a25      	ldr	r2, [pc, #148]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_GPIO_Init+0xd0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <MX_GPIO_Init+0xd0>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_GPIO_Init+0xd0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2120      	movs	r1, #32
 8001322:	4812      	ldr	r0, [pc, #72]	; (800136c <MX_GPIO_Init+0xd4>)
 8001324:	f002 fa9a 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800132e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	480c      	ldr	r0, [pc, #48]	; (8001370 <MX_GPIO_Init+0xd8>)
 8001340:	f002 f8f8 	bl	8003534 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001344:	2320      	movs	r3, #32
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_GPIO_Init+0xd4>)
 800135c:	f002 f8ea 	bl	8003534 <HAL_GPIO_Init>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020800 	.word	0x40020800

08001374 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f004 fb5d 	bl	8005a3c <osDelay>
 8001382:	e7fb      	b.n	800137c <StartDefaultTask+0x8>

08001384 <updateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateTask */
void updateTask(void *argument)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateTask */
  /* Infinite loop */
  for(;;)
  {
	  motorDrive(adcValue);
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <updateTask+0x18>)
 800138e:	f000 f81e 	bl	80013ce <motorDrive>
	  osDelay(20);
 8001392:	2014      	movs	r0, #20
 8001394:	f004 fb52 	bl	8005a3c <osDelay>
	  motorDrive(adcValue);
 8001398:	e7f8      	b.n	800138c <updateTask+0x8>
 800139a:	bf00      	nop
 800139c:	20000228 	.word	0x20000228

080013a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013b2:	f000 ff07 	bl	80021c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40001000 	.word	0x40001000

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>

080013ce <motorDrive>:
extern RCFilter filt;
RCFilter filtLeft;
RCFilter filtRight;

void motorDrive(uint32_t *adcValue)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
	motorUpDown(adcValue);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f808 	bl	80013ec <motorUpDown>
	motorRightLeft(adcValue);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f8db 	bl	8001598 <motorRightLeft>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <motorUpDown>:

/* This function configure the direction of the car*/
void motorUpDown(uint32_t *adcValue)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	/* if the joystick adc value greater than 2200 it is goes forward direction*/
	if(adcValue[0] > 2200)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f640 0298 	movw	r2, #2200	; 0x898
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d946      	bls.n	800148e <motorUpDown+0xa2>
	{
		/* if we desire the rotation of car in farward direction we disable this */
		if(carTurn != FORWARDTURN)
 8001400:	4b5e      	ldr	r3, [pc, #376]	; (800157c <motorUpDown+0x190>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b02      	cmp	r3, #2
 8001406:	f000 80b4 	beq.w	8001572 <motorUpDown+0x186>
		{
			TIM3->CCR1 = 0;
 800140a:	4b5d      	ldr	r3, [pc, #372]	; (8001580 <motorUpDown+0x194>)
 800140c:	2200      	movs	r2, #0
 800140e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 8001410:	4b5b      	ldr	r3, [pc, #364]	; (8001580 <motorUpDown+0x194>)
 8001412:	2200      	movs	r2, #0
 8001414:	639a      	str	r2, [r3, #56]	; 0x38

			TIM2->CCR1 = RCFilter_Update(&filt, (adcValue[0] - 2200));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001426:	eeb0 0a67 	vmov.f32	s0, s15
 800142a:	4856      	ldr	r0, [pc, #344]	; (8001584 <motorUpDown+0x198>)
 800142c:	f7ff fcce 	bl	8000dcc <RCFilter_Update>
 8001430:	eef0 7a40 	vmov.f32	s15, s0
 8001434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143c:	ee17 2a90 	vmov	r2, s15
 8001440:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = RCFilter_Update(&filt, (adcValue[0] - 2200));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001452:	eeb0 0a67 	vmov.f32	s0, s15
 8001456:	484b      	ldr	r0, [pc, #300]	; (8001584 <motorUpDown+0x198>)
 8001458:	f7ff fcb8 	bl	8000dcc <RCFilter_Update>
 800145c:	eef0 7a40 	vmov.f32	s15, s0
 8001460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001468:	ee17 2a90 	vmov	r2, s15
 800146c:	639a      	str	r2, [r3, #56]	; 0x38

			carDirection = FORWARD;
 800146e:	4b46      	ldr	r3, [pc, #280]	; (8001588 <motorUpDown+0x19c>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]

			filtLeft = filt;
 8001474:	4a45      	ldr	r2, [pc, #276]	; (800158c <motorUpDown+0x1a0>)
 8001476:	4b43      	ldr	r3, [pc, #268]	; (8001584 <motorUpDown+0x198>)
 8001478:	4614      	mov	r4, r2
 800147a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800147c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			filtRight = filt;
 8001480:	4a43      	ldr	r2, [pc, #268]	; (8001590 <motorUpDown+0x1a4>)
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <motorUpDown+0x198>)
 8001484:	4614      	mov	r4, r2
 8001486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			filtLeft = filt;
			filtRight = filt;
		}
	}
}
 800148c:	e071      	b.n	8001572 <motorUpDown+0x186>
	else if (adcValue[0] > 1900 && adcValue[0] < 2200)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f240 726c 	movw	r2, #1900	; 0x76c
 8001496:	4293      	cmp	r3, r2
 8001498:	d923      	bls.n	80014e2 <motorUpDown+0xf6>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f640 0297 	movw	r2, #2199	; 0x897
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d81d      	bhi.n	80014e2 <motorUpDown+0xf6>
		if(carTurn != STOPTURN)
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <motorUpDown+0x190>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d061      	beq.n	8001572 <motorUpDown+0x186>
			TIM3->CCR1 = 0;
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <motorUpDown+0x194>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <motorUpDown+0x194>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR1 = 0;
 80014ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014be:	2200      	movs	r2, #0
 80014c0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 80014c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c6:	2200      	movs	r2, #0
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38
			filt.out[0] = 0;
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <motorUpDown+0x198>)
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
			filt.out[1] = 0;
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <motorUpDown+0x198>)
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
			carDirection = STOP;
 80014da:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <motorUpDown+0x19c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
		if(carTurn != STOPTURN)
 80014e0:	e047      	b.n	8001572 <motorUpDown+0x186>
		if(carTurn != BACKWARDTURN)
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <motorUpDown+0x190>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d043      	beq.n	8001572 <motorUpDown+0x186>
			TIM2->CCR1 = 0;
 80014ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ee:	2200      	movs	r2, #0
 80014f0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 80014f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014f6:	2200      	movs	r2, #0
 80014f8:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR1 = RCFilter_Update(&filt, (1900 - adcValue[0]));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f5c3 63ed 	rsb	r3, r3, #1896	; 0x768
 8001502:	3304      	adds	r3, #4
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800150c:	eeb0 0a67 	vmov.f32	s0, s15
 8001510:	481c      	ldr	r0, [pc, #112]	; (8001584 <motorUpDown+0x198>)
 8001512:	f7ff fc5b 	bl	8000dcc <RCFilter_Update>
 8001516:	eef0 7a40 	vmov.f32	s15, s0
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <motorUpDown+0x194>)
 800151c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = RCFilter_Update(&filt, (1900 - adcValue[0]));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f5c3 63ed 	rsb	r3, r3, #1896	; 0x768
 800152e:	3304      	adds	r3, #4
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001538:	eeb0 0a67 	vmov.f32	s0, s15
 800153c:	4811      	ldr	r0, [pc, #68]	; (8001584 <motorUpDown+0x198>)
 800153e:	f7ff fc45 	bl	8000dcc <RCFilter_Update>
 8001542:	eef0 7a40 	vmov.f32	s15, s0
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <motorUpDown+0x194>)
 8001548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800154c:	ee17 2a90 	vmov	r2, s15
 8001550:	639a      	str	r2, [r3, #56]	; 0x38
			carDirection = BACKWARD;
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <motorUpDown+0x19c>)
 8001554:	2202      	movs	r2, #2
 8001556:	701a      	strb	r2, [r3, #0]
			filtLeft = filt;
 8001558:	4a0c      	ldr	r2, [pc, #48]	; (800158c <motorUpDown+0x1a0>)
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <motorUpDown+0x198>)
 800155c:	4614      	mov	r4, r2
 800155e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001560:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			filtRight = filt;
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <motorUpDown+0x1a4>)
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <motorUpDown+0x198>)
 8001568:	4614      	mov	r4, r2
 800156a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800156c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001570:	e7ff      	b.n	8001572 <motorUpDown+0x186>
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	bf00      	nop
 800157c:	20000000 	.word	0x20000000
 8001580:	40000400 	.word	0x40000400
 8001584:	20000218 	.word	0x20000218
 8001588:	20000230 	.word	0x20000230
 800158c:	20000234 	.word	0x20000234
 8001590:	20000244 	.word	0x20000244
 8001594:	00000000 	.word	0x00000000

08001598 <motorRightLeft>:

/*This function configure the turning setting of the car*/
void motorRightLeft(uint32_t *adcValue)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b098      	sub	sp, #96	; 0x60
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	/*if car direction is forward*/
	if(carDirection == FORWARD)
 80015a0:	4b96      	ldr	r3, [pc, #600]	; (80017fc <motorRightLeft+0x264>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	f040 8139 	bne.w	800181c <motorRightLeft+0x284>
	{
		/*forward right setting*/
		if(adcValue[1] > 2200)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3304      	adds	r3, #4
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f640 0298 	movw	r2, #2200	; 0x898
 80015b4:	4293      	cmp	r3, r2
 80015b6:	f240 808c 	bls.w	80016d2 <motorRightLeft+0x13a>
		{
			carTurn = FORWARDTURN;
 80015ba:	4b91      	ldr	r3, [pc, #580]	; (8001800 <motorRightLeft+0x268>)
 80015bc:	2202      	movs	r2, #2
 80015be:	701a      	strb	r2, [r3, #0]
			float ratio = (adcValue[1] - 2200.0f) / 1896.0 / 2.0f; //2.0f == %50 ratio
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3304      	adds	r3, #4
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ce:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001804 <motorRightLeft+0x26c>
 80015d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015d6:	ee17 0a90 	vmov	r0, s15
 80015da:	f7fe ff7d 	bl	80004d8 <__aeabi_f2d>
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	4b89      	ldr	r3, [pc, #548]	; (8001808 <motorRightLeft+0x270>)
 80015e4:	f7ff f8fa 	bl	80007dc <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f8:	f7ff f8f0 	bl	80007dc <__aeabi_ddiv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff f9d2 	bl	80009ac <__aeabi_d2f>
 8001608:	4603      	mov	r3, r0
 800160a:	617b      	str	r3, [r7, #20]

			uint32_t adcDirection = adcValue[0] - 2200;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 8001614:	613b      	str	r3, [r7, #16]
			uint32_t leftMotor = adcDirection + adcDirection * ratio;
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	ee07 3a90 	vmov	s15, r3
 800161c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800162a:	edd7 7a05 	vldr	s15, [r7, #20]
 800162e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800163a:	ee17 3a90 	vmov	r3, s15
 800163e:	60fb      	str	r3, [r7, #12]
			uint32_t rightMotor = adcDirection - adcDirection * ratio;
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	ee07 3a90 	vmov	s15, r3
 8001650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001654:	edd7 7a05 	vldr	s15, [r7, #20]
 8001658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001664:	ee17 3a90 	vmov	r3, s15
 8001668:	60bb      	str	r3, [r7, #8]

			leftMotor = (leftMotor > 1896) ? 1896 : leftMotor;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f5b3 6fed 	cmp.w	r3, #1896	; 0x768
 8001670:	bf28      	it	cs
 8001672:	f44f 63ed 	movcs.w	r3, #1896	; 0x768
 8001676:	60fb      	str	r3, [r7, #12]
			rightMotor = (rightMotor < 0) ? 0: rightMotor;

			TIM2->CCR2 = RCFilter_Update(&filtLeft, leftMotor);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	4861      	ldr	r0, [pc, #388]	; (800180c <motorRightLeft+0x274>)
 8001688:	f7ff fba0 	bl	8000dcc <RCFilter_Update>
 800168c:	eef0 7a40 	vmov.f32	s15, s0
 8001690:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001698:	ee17 2a90 	vmov	r2, s15
 800169c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR1 = RCFilter_Update(&filtRight, rightMotor);
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	ee07 3a90 	vmov	s15, r3
 80016a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016a8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ac:	4858      	ldr	r0, [pc, #352]	; (8001810 <motorRightLeft+0x278>)
 80016ae:	f7ff fb8d 	bl	8000dcc <RCFilter_Update>
 80016b2:	eef0 7a40 	vmov.f32	s15, s0
 80016b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016be:	ee17 2a90 	vmov	r2, s15
 80016c2:	635a      	str	r2, [r3, #52]	; 0x34

			TIM3->CCR1 = 0;
 80016c4:	4b53      	ldr	r3, [pc, #332]	; (8001814 <motorRightLeft+0x27c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 80016ca:	4b52      	ldr	r3, [pc, #328]	; (8001814 <motorRightLeft+0x27c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	639a      	str	r2, [r3, #56]	; 0x38

			TIM2->CCR1 = 0;
			TIM2->CCR2 = 0;
		}
	}
}
 80016d0:	e2d3      	b.n	8001c7a <motorRightLeft+0x6e2>
		else if(adcValue[1] >1900 && adcValue[1] < 2200)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3304      	adds	r3, #4
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f240 726c 	movw	r2, #1900	; 0x76c
 80016dc:	4293      	cmp	r3, r2
 80016de:	d90a      	bls.n	80016f6 <motorRightLeft+0x15e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3304      	adds	r3, #4
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f640 0297 	movw	r2, #2199	; 0x897
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d803      	bhi.n	80016f6 <motorRightLeft+0x15e>
			carTurn = STOP;
 80016ee:	4b44      	ldr	r3, [pc, #272]	; (8001800 <motorRightLeft+0x268>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e2c1      	b.n	8001c7a <motorRightLeft+0x6e2>
		else if(adcValue[1] < 1900)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3304      	adds	r3, #4
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f240 726b 	movw	r2, #1899	; 0x76b
 8001700:	4293      	cmp	r3, r2
 8001702:	f200 82ba 	bhi.w	8001c7a <motorRightLeft+0x6e2>
			carTurn = FORWARDTURN;
 8001706:	4b3e      	ldr	r3, [pc, #248]	; (8001800 <motorRightLeft+0x268>)
 8001708:	2202      	movs	r2, #2
 800170a:	701a      	strb	r2, [r3, #0]
			float ratio = (1900.0f - adcValue[1]) / 1900.0f / 2.0f; //2.0f == %50 ratio
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3304      	adds	r3, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800171a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001818 <motorRightLeft+0x280>
 800171e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001722:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001818 <motorRightLeft+0x280>
 8001726:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800172a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800172e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001732:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			uint32_t adcDirection = adcValue[0] - 2200;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 800173e:	623b      	str	r3, [r7, #32]
			uint32_t leftMotor = adcDirection - adcDirection * ratio;
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001754:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001764:	ee17 3a90 	vmov	r3, s15
 8001768:	61fb      	str	r3, [r7, #28]
			uint32_t rightMotor = adcDirection + adcDirection * ratio;
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800177e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800178e:	ee17 3a90 	vmov	r3, s15
 8001792:	61bb      	str	r3, [r7, #24]
			rightMotor = (rightMotor > 1896) ? 1896 : rightMotor;
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	f5b3 6fed 	cmp.w	r3, #1896	; 0x768
 800179a:	bf28      	it	cs
 800179c:	f44f 63ed 	movcs.w	r3, #1896	; 0x768
 80017a0:	61bb      	str	r3, [r7, #24]
			TIM2->CCR2 = RCFilter_Update(&filtLeft, leftMotor);
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ac:	eeb0 0a67 	vmov.f32	s0, s15
 80017b0:	4816      	ldr	r0, [pc, #88]	; (800180c <motorRightLeft+0x274>)
 80017b2:	f7ff fb0b 	bl	8000dcc <RCFilter_Update>
 80017b6:	eef0 7a40 	vmov.f32	s15, s0
 80017ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c2:	ee17 2a90 	vmov	r2, s15
 80017c6:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR1 = RCFilter_Update(&filtRight, rightMotor);
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	480e      	ldr	r0, [pc, #56]	; (8001810 <motorRightLeft+0x278>)
 80017d8:	f7ff faf8 	bl	8000dcc <RCFilter_Update>
 80017dc:	eef0 7a40 	vmov.f32	s15, s0
 80017e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017e8:	ee17 2a90 	vmov	r2, s15
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR1 = 0;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <motorRightLeft+0x27c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <motorRightLeft+0x27c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017fa:	e23e      	b.n	8001c7a <motorRightLeft+0x6e2>
 80017fc:	20000230 	.word	0x20000230
 8001800:	20000000 	.word	0x20000000
 8001804:	45098000 	.word	0x45098000
 8001808:	409da000 	.word	0x409da000
 800180c:	20000234 	.word	0x20000234
 8001810:	20000244 	.word	0x20000244
 8001814:	40000400 	.word	0x40000400
 8001818:	44ed8000 	.word	0x44ed8000
	else if(carDirection == STOP)
 800181c:	4bc2      	ldr	r3, [pc, #776]	; (8001b28 <motorRightLeft+0x590>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	f040 80df 	bne.w	80019e4 <motorRightLeft+0x44c>
		if(adcValue[1] > 2200)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3304      	adds	r3, #4
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f640 0298 	movw	r2, #2200	; 0x898
 8001830:	4293      	cmp	r3, r2
 8001832:	d961      	bls.n	80018f8 <motorRightLeft+0x360>
			carTurn = STOPTURN;
 8001834:	4bbd      	ldr	r3, [pc, #756]	; (8001b2c <motorRightLeft+0x594>)
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
			float ratio = (adcValue[1] - 2200.0) / 1896.0; // %100 ratio
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3304      	adds	r3, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe27 	bl	8000494 <__aeabi_ui2d>
 8001846:	a3b4      	add	r3, pc, #720	; (adr r3, 8001b18 <motorRightLeft+0x580>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fce4 	bl	8000218 <__aeabi_dsub>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4bb4      	ldr	r3, [pc, #720]	; (8001b30 <motorRightLeft+0x598>)
 800185e:	f7fe ffbd 	bl	80007dc <__aeabi_ddiv>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff f89f 	bl	80009ac <__aeabi_d2f>
 800186e:	4603      	mov	r3, r0
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
			uint32_t leftMotorAdc = 1896 * ratio; //turn right
 8001872:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001876:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8001b34 <motorRightLeft+0x59c>
 800187a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800187e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001882:	ee17 3a90 	vmov	r3, s15
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint32_t rightMotorAdc = 1900 * ratio; //turn left
 8001888:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800188c:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001b38 <motorRightLeft+0x5a0>
 8001890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001898:	ee17 3a90 	vmov	r3, s15
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
			TIM2->CCR2 = RCFilter_Update(&filt, leftMotorAdc);
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018a8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ac:	48a3      	ldr	r0, [pc, #652]	; (8001b3c <motorRightLeft+0x5a4>)
 80018ae:	f7ff fa8d 	bl	8000dcc <RCFilter_Update>
 80018b2:	eef0 7a40 	vmov.f32	s15, s0
 80018b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018be:	ee17 2a90 	vmov	r2, s15
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR2 = 0;
 80018c4:	4b9e      	ldr	r3, [pc, #632]	; (8001b40 <motorRightLeft+0x5a8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR1 = RCFilter_Update(&filt, rightMotorAdc);
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	4898      	ldr	r0, [pc, #608]	; (8001b3c <motorRightLeft+0x5a4>)
 80018da:	f7ff fa77 	bl	8000dcc <RCFilter_Update>
 80018de:	eef0 7a40 	vmov.f32	s15, s0
 80018e2:	4b97      	ldr	r3, [pc, #604]	; (8001b40 <motorRightLeft+0x5a8>)
 80018e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e8:	ee17 2a90 	vmov	r2, s15
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR1 = 0;
 80018ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f2:	2200      	movs	r2, #0
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018f6:	e1c0      	b.n	8001c7a <motorRightLeft+0x6e2>
		else if(adcValue[1] > 1900 && adcValue[1] < 2200)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3304      	adds	r3, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f240 726c 	movw	r2, #1900	; 0x76c
 8001902:	4293      	cmp	r3, r2
 8001904:	d90a      	bls.n	800191c <motorRightLeft+0x384>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3304      	adds	r3, #4
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f640 0297 	movw	r2, #2199	; 0x897
 8001910:	4293      	cmp	r3, r2
 8001912:	d803      	bhi.n	800191c <motorRightLeft+0x384>
			carTurn = STOP;
 8001914:	4b85      	ldr	r3, [pc, #532]	; (8001b2c <motorRightLeft+0x594>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
 800191a:	e1ae      	b.n	8001c7a <motorRightLeft+0x6e2>
		else if(adcValue[1] < 1900)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f240 726b 	movw	r2, #1899	; 0x76b
 8001926:	4293      	cmp	r3, r2
 8001928:	f200 81a7 	bhi.w	8001c7a <motorRightLeft+0x6e2>
			carTurn = STOPTURN;
 800192c:	4b7f      	ldr	r3, [pc, #508]	; (8001b2c <motorRightLeft+0x594>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
			float ratio = (1900 - adcValue[1]) / 1900.0; // %100 ratio
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3304      	adds	r3, #4
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f5c3 63ed 	rsb	r3, r3, #1896	; 0x768
 800193c:	3304      	adds	r3, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fda8 	bl	8000494 <__aeabi_ui2d>
 8001944:	a376      	add	r3, pc, #472	; (adr r3, 8001b20 <motorRightLeft+0x588>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe ff47 	bl	80007dc <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f7ff f829 	bl	80009ac <__aeabi_d2f>
 800195a:	4603      	mov	r3, r0
 800195c:	63fb      	str	r3, [r7, #60]	; 0x3c
			uint32_t leftMotorAdc = 1900 * ratio; //turn right
 800195e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001962:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001b38 <motorRightLeft+0x5a0>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800196e:	ee17 3a90 	vmov	r3, s15
 8001972:	63bb      	str	r3, [r7, #56]	; 0x38
			uint32_t rightMotorAdc = 1900 * ratio; //turn right
 8001974:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001978:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001b38 <motorRightLeft+0x5a0>
 800197c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001984:	ee17 3a90 	vmov	r3, s15
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
			TIM3->CCR2 = RCFilter_Update(&filt, rightMotorAdc);
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001994:	eeb0 0a67 	vmov.f32	s0, s15
 8001998:	4868      	ldr	r0, [pc, #416]	; (8001b3c <motorRightLeft+0x5a4>)
 800199a:	f7ff fa17 	bl	8000dcc <RCFilter_Update>
 800199e:	eef0 7a40 	vmov.f32	s15, s0
 80019a2:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <motorRightLeft+0x5a8>)
 80019a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a8:	ee17 2a90 	vmov	r2, s15
 80019ac:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR2 = 0;
 80019ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b2:	2200      	movs	r2, #0
 80019b4:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR1 = RCFilter_Update(&filt, leftMotorAdc);
 80019b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b8:	ee07 3a90 	vmov	s15, r3
 80019bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c0:	eeb0 0a67 	vmov.f32	s0, s15
 80019c4:	485d      	ldr	r0, [pc, #372]	; (8001b3c <motorRightLeft+0x5a4>)
 80019c6:	f7ff fa01 	bl	8000dcc <RCFilter_Update>
 80019ca:	eef0 7a40 	vmov.f32	s15, s0
 80019ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d6:	ee17 2a90 	vmov	r2, s15
 80019da:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR1 = 0;
 80019dc:	4b58      	ldr	r3, [pc, #352]	; (8001b40 <motorRightLeft+0x5a8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80019e2:	e14a      	b.n	8001c7a <motorRightLeft+0x6e2>
	else if (carDirection == BACKWARD)
 80019e4:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <motorRightLeft+0x590>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	f040 8146 	bne.w	8001c7a <motorRightLeft+0x6e2>
		if(adcValue[1] > 2200)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3304      	adds	r3, #4
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f640 0298 	movw	r2, #2200	; 0x898
 80019f8:	4293      	cmp	r3, r2
 80019fa:	f240 80a9 	bls.w	8001b50 <motorRightLeft+0x5b8>
			carTurn = BACKWARDTURN;
 80019fe:	4b4b      	ldr	r3, [pc, #300]	; (8001b2c <motorRightLeft+0x594>)
 8001a00:	2203      	movs	r2, #3
 8001a02:	701a      	strb	r2, [r3, #0]
			float ratio = (adcValue[1] - 2200.0f) / 1896.0 / 2.0f; //2.0f == %50 ratio
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3304      	adds	r3, #4
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a12:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001b44 <motorRightLeft+0x5ac>
 8001a16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a1a:	ee17 0a90 	vmov	r0, s15
 8001a1e:	f7fe fd5b 	bl	80004d8 <__aeabi_f2d>
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	4b42      	ldr	r3, [pc, #264]	; (8001b30 <motorRightLeft+0x598>)
 8001a28:	f7fe fed8 	bl	80007dc <__aeabi_ddiv>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a3c:	f7fe fece 	bl	80007dc <__aeabi_ddiv>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7fe ffb0 	bl	80009ac <__aeabi_d2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
			uint32_t adcDirection = 1900 - adcValue[0];
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f5c3 63ed 	rsb	r3, r3, #1896	; 0x768
 8001a58:	3304      	adds	r3, #4
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
			uint32_t leftMotor = adcDirection + adcDirection * ratio;
 8001a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a5e:	ee07 3a90 	vmov	s15, r3
 8001a62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a70:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001a74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a80:	ee17 3a90 	vmov	r3, s15
 8001a84:	647b      	str	r3, [r7, #68]	; 0x44
			uint32_t rightMotor = adcDirection - adcDirection * ratio;
 8001a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a9a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aaa:	ee17 3a90 	vmov	r3, s15
 8001aae:	643b      	str	r3, [r7, #64]	; 0x40
			leftMotor = (leftMotor > 1900) ? 1900 : leftMotor;
 8001ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab2:	f240 726c 	movw	r2, #1900	; 0x76c
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	bf28      	it	cs
 8001aba:	4613      	movcs	r3, r2
 8001abc:	647b      	str	r3, [r7, #68]	; 0x44
			TIM3->CCR2 = RCFilter_Update(&filtLeft, leftMotor);
 8001abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8001acc:	481e      	ldr	r0, [pc, #120]	; (8001b48 <motorRightLeft+0x5b0>)
 8001ace:	f7ff f97d 	bl	8000dcc <RCFilter_Update>
 8001ad2:	eef0 7a40 	vmov.f32	s15, s0
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <motorRightLeft+0x5a8>)
 8001ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001adc:	ee17 2a90 	vmov	r2, s15
 8001ae0:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR1 = RCFilter_Update(&filtRight, rightMotor);
 8001ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aec:	eeb0 0a67 	vmov.f32	s0, s15
 8001af0:	4816      	ldr	r0, [pc, #88]	; (8001b4c <motorRightLeft+0x5b4>)
 8001af2:	f7ff f96b 	bl	8000dcc <RCFilter_Update>
 8001af6:	eef0 7a40 	vmov.f32	s15, s0
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <motorRightLeft+0x5a8>)
 8001afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b00:	ee17 2a90 	vmov	r2, s15
 8001b04:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR1 = 0;
 8001b06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8001b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b12:	2200      	movs	r2, #0
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b16:	e0b0      	b.n	8001c7a <motorRightLeft+0x6e2>
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	40a13000 	.word	0x40a13000
 8001b20:	00000000 	.word	0x00000000
 8001b24:	409db000 	.word	0x409db000
 8001b28:	20000230 	.word	0x20000230
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	409da000 	.word	0x409da000
 8001b34:	44ed0000 	.word	0x44ed0000
 8001b38:	44ed8000 	.word	0x44ed8000
 8001b3c:	20000218 	.word	0x20000218
 8001b40:	40000400 	.word	0x40000400
 8001b44:	45098000 	.word	0x45098000
 8001b48:	20000234 	.word	0x20000234
 8001b4c:	20000244 	.word	0x20000244
		else if(adcValue[1] > 1900 && adcValue[1] < 2200)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3304      	adds	r3, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f240 726c 	movw	r2, #1900	; 0x76c
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d90a      	bls.n	8001b74 <motorRightLeft+0x5dc>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3304      	adds	r3, #4
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f640 0297 	movw	r2, #2199	; 0x897
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d803      	bhi.n	8001b74 <motorRightLeft+0x5dc>
			carTurn = STOP;
 8001b6c:	4b45      	ldr	r3, [pc, #276]	; (8001c84 <motorRightLeft+0x6ec>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e082      	b.n	8001c7a <motorRightLeft+0x6e2>
		else if(adcValue[1] < 1900)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3304      	adds	r3, #4
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f240 726b 	movw	r2, #1899	; 0x76b
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d87b      	bhi.n	8001c7a <motorRightLeft+0x6e2>
			carTurn = BACKWARDTURN;
 8001b82:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <motorRightLeft+0x6ec>)
 8001b84:	2203      	movs	r2, #3
 8001b86:	701a      	strb	r2, [r3, #0]
			float ratio = (1900.0f - adcValue[1]) / 1900.0f / 2.0f ; //2.0f == %50 ratio
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b96:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001c88 <motorRightLeft+0x6f0>
 8001b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b9e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001c88 <motorRightLeft+0x6f0>
 8001ba2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ba6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bae:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			uint32_t adcDirection = 1900 - adcValue[0];
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f5c3 63ed 	rsb	r3, r3, #1896	; 0x768
 8001bba:	3304      	adds	r3, #4
 8001bbc:	65bb      	str	r3, [r7, #88]	; 0x58
			uint32_t leftMotor = adcDirection - adcDirection * ratio;
 8001bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bd2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be2:	ee17 3a90 	vmov	r3, s15
 8001be6:	657b      	str	r3, [r7, #84]	; 0x54
			uint32_t rightMotor = adcDirection + adcDirection * ratio;
 8001be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bfc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c0c:	ee17 3a90 	vmov	r3, s15
 8001c10:	653b      	str	r3, [r7, #80]	; 0x50
			rightMotor = (rightMotor > 1900) ? 1900 : rightMotor;
 8001c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c14:	f240 726c 	movw	r2, #1900	; 0x76c
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	bf28      	it	cs
 8001c1c:	4613      	movcs	r3, r2
 8001c1e:	653b      	str	r3, [r7, #80]	; 0x50
			TIM3->CCR2 = RCFilter_Update(&filtLeft, leftMotor);
 8001c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c22:	ee07 3a90 	vmov	s15, r3
 8001c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	4817      	ldr	r0, [pc, #92]	; (8001c8c <motorRightLeft+0x6f4>)
 8001c30:	f7ff f8cc 	bl	8000dcc <RCFilter_Update>
 8001c34:	eef0 7a40 	vmov.f32	s15, s0
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <motorRightLeft+0x6f8>)
 8001c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c3e:	ee17 2a90 	vmov	r2, s15
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR1 = RCFilter_Update(&filtRight, rightMotor);
 8001c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c46:	ee07 3a90 	vmov	s15, r3
 8001c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c52:	4810      	ldr	r0, [pc, #64]	; (8001c94 <motorRightLeft+0x6fc>)
 8001c54:	f7ff f8ba 	bl	8000dcc <RCFilter_Update>
 8001c58:	eef0 7a40 	vmov.f32	s15, s0
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <motorRightLeft+0x6f8>)
 8001c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c62:	ee17 2a90 	vmov	r2, s15
 8001c66:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR1 = 0;
 8001c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 8001c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c74:	2200      	movs	r2, #0
 8001c76:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c78:	e7ff      	b.n	8001c7a <motorRightLeft+0x6e2>
 8001c7a:	bf00      	nop
 8001c7c:	3760      	adds	r7, #96	; 0x60
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000000 	.word	0x20000000
 8001c88:	44ed8000 	.word	0x44ed8000
 8001c8c:	20000234 	.word	0x20000234
 8001c90:	40000400 	.word	0x40000400
 8001c94:	20000244 	.word	0x20000244

08001c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_MspInit+0x54>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a11      	ldr	r2, [pc, #68]	; (8001cec <HAL_MspInit+0x54>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_MspInit+0x54>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_MspInit+0x54>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_MspInit+0x54>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_MspInit+0x54>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	210f      	movs	r1, #15
 8001cda:	f06f 0001 	mvn.w	r0, #1
 8001cde:	f001 f88f 	bl	8002e00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800

08001cf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a33      	ldr	r2, [pc, #204]	; (8001ddc <HAL_ADC_MspInit+0xec>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d15f      	bne.n	8001dd2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_ADC_MspInit+0xf0>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	4a31      	ldr	r2, [pc, #196]	; (8001de0 <HAL_ADC_MspInit+0xf0>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d20:	6453      	str	r3, [r2, #68]	; 0x44
 8001d22:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <HAL_ADC_MspInit+0xf0>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_ADC_MspInit+0xf0>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a2a      	ldr	r2, [pc, #168]	; (8001de0 <HAL_ADC_MspInit+0xf0>)
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <HAL_ADC_MspInit+0xf0>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4821      	ldr	r0, [pc, #132]	; (8001de4 <HAL_ADC_MspInit+0xf4>)
 8001d5e:	f001 fbe9 	bl	8003534 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d62:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <HAL_ADC_MspInit+0xf8>)
 8001d64:	4a21      	ldr	r2, [pc, #132]	; (8001dec <HAL_ADC_MspInit+0xfc>)
 8001d66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <HAL_ADC_MspInit+0xf8>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_ADC_MspInit+0xf8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_ADC_MspInit+0xf8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_ADC_MspInit+0xf8>)
 8001d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_ADC_MspInit+0xf8>)
 8001d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_ADC_MspInit+0xf8>)
 8001d8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_ADC_MspInit+0xf8>)
 8001d94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <HAL_ADC_MspInit+0xf8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_ADC_MspInit+0xf8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001da6:	4810      	ldr	r0, [pc, #64]	; (8001de8 <HAL_ADC_MspInit+0xf8>)
 8001da8:	f001 f854 	bl	8002e54 <HAL_DMA_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001db2:	f7ff fb07 	bl	80013c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <HAL_ADC_MspInit+0xf8>)
 8001dba:	639a      	str	r2, [r3, #56]	; 0x38
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <HAL_ADC_MspInit+0xf8>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2105      	movs	r1, #5
 8001dc6:	2012      	movs	r0, #18
 8001dc8:	f001 f81a 	bl	8002e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001dcc:	2012      	movs	r0, #18
 8001dce:	f001 f833 	bl	8002e38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dd2:	bf00      	nop
 8001dd4:	3728      	adds	r7, #40	; 0x28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40012000 	.word	0x40012000
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020800 	.word	0x40020800
 8001de8:	200000dc 	.word	0x200000dc
 8001dec:	40026410 	.word	0x40026410

08001df0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_TIM_PWM_MspInit+0x64>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <HAL_TIM_PWM_MspInit+0x64>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6413      	str	r3, [r2, #64]	; 0x40
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_TIM_PWM_MspInit+0x64>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e1e:	e012      	b.n	8001e46 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0c      	ldr	r2, [pc, #48]	; (8001e58 <HAL_TIM_PWM_MspInit+0x68>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d10d      	bne.n	8001e46 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_TIM_PWM_MspInit+0x64>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <HAL_TIM_PWM_MspInit+0x64>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_TIM_PWM_MspInit+0x64>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40000400 	.word	0x40000400

08001e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7c:	d11e      	bne.n	8001ebc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_TIM_MspPostInit+0xb0>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <HAL_TIM_MspPostInit+0xb0>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_TIM_MspPostInit+0xb0>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4816      	ldr	r0, [pc, #88]	; (8001f10 <HAL_TIM_MspPostInit+0xb4>)
 8001eb6:	f001 fb3d 	bl	8003534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001eba:	e022      	b.n	8001f02 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <HAL_TIM_MspPostInit+0xb8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d11d      	bne.n	8001f02 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <HAL_TIM_MspPostInit+0xb0>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_TIM_MspPostInit+0xb0>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_TIM_MspPostInit+0xb0>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ee2:	23c0      	movs	r3, #192	; 0xc0
 8001ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	4804      	ldr	r0, [pc, #16]	; (8001f10 <HAL_TIM_MspPostInit+0xb4>)
 8001efe:	f001 fb19 	bl	8003534 <HAL_GPIO_Init>
}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	; 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000
 8001f14:	40000400 	.word	0x40000400

08001f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_UART_MspInit+0x84>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d12b      	bne.n	8001f92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_UART_MspInit+0x88>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <HAL_UART_MspInit+0x88>)
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_UART_MspInit+0x88>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_UART_MspInit+0x88>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <HAL_UART_MspInit+0x88>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_UART_MspInit+0x88>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f72:	230c      	movs	r3, #12
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f82:	2307      	movs	r3, #7
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <HAL_UART_MspInit+0x8c>)
 8001f8e:	f001 fad1 	bl	8003534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f92:	bf00      	nop
 8001f94:	3728      	adds	r7, #40	; 0x28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40004400 	.word	0x40004400
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020000 	.word	0x40020000

08001fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08e      	sub	sp, #56	; 0x38
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	4b33      	ldr	r3, [pc, #204]	; (800208c <HAL_InitTick+0xe4>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	4a32      	ldr	r2, [pc, #200]	; (800208c <HAL_InitTick+0xe4>)
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_InitTick+0xe4>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fd4:	f107 0210 	add.w	r2, r7, #16
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 fd70 	bl	8003ac4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d103      	bne.n	8001ff6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fee:	f001 fd41 	bl	8003a74 <HAL_RCC_GetPCLK1Freq>
 8001ff2:	6378      	str	r0, [r7, #52]	; 0x34
 8001ff4:	e004      	b.n	8002000 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ff6:	f001 fd3d 	bl	8003a74 <HAL_RCC_GetPCLK1Freq>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002002:	4a23      	ldr	r2, [pc, #140]	; (8002090 <HAL_InitTick+0xe8>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	0c9b      	lsrs	r3, r3, #18
 800200a:	3b01      	subs	r3, #1
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800200e:	4b21      	ldr	r3, [pc, #132]	; (8002094 <HAL_InitTick+0xec>)
 8002010:	4a21      	ldr	r2, [pc, #132]	; (8002098 <HAL_InitTick+0xf0>)
 8002012:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <HAL_InitTick+0xec>)
 8002016:	f240 32e7 	movw	r2, #999	; 0x3e7
 800201a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800201c:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <HAL_InitTick+0xec>)
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_InitTick+0xec>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002028:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <HAL_InitTick+0xec>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_InitTick+0xec>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002034:	4817      	ldr	r0, [pc, #92]	; (8002094 <HAL_InitTick+0xec>)
 8002036:	f002 fa45 	bl	80044c4 <HAL_TIM_Base_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002040:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002044:	2b00      	cmp	r3, #0
 8002046:	d11b      	bne.n	8002080 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002048:	4812      	ldr	r0, [pc, #72]	; (8002094 <HAL_InitTick+0xec>)
 800204a:	f002 fa95 	bl	8004578 <HAL_TIM_Base_Start_IT>
 800204e:	4603      	mov	r3, r0
 8002050:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002054:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002058:	2b00      	cmp	r3, #0
 800205a:	d111      	bne.n	8002080 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800205c:	2036      	movs	r0, #54	; 0x36
 800205e:	f000 feeb 	bl	8002e38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b0f      	cmp	r3, #15
 8002066:	d808      	bhi.n	800207a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002068:	2200      	movs	r2, #0
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	2036      	movs	r0, #54	; 0x36
 800206e:	f000 fec7 	bl	8002e00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <HAL_InitTick+0xf4>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	e002      	b.n	8002080 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002080:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002084:	4618      	mov	r0, r3
 8002086:	3738      	adds	r7, #56	; 0x38
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800
 8002090:	431bde83 	.word	0x431bde83
 8002094:	20000254 	.word	0x20000254
 8002098:	40001000 	.word	0x40001000
 800209c:	20000008 	.word	0x20000008

080020a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <NMI_Handler+0x4>

080020a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <HardFault_Handler+0x4>

080020ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <MemManage_Handler+0x4>

080020b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b6:	e7fe      	b.n	80020b6 <BusFault_Handler+0x4>

080020b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <UsageFault_Handler+0x4>

080020be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <ADC_IRQHandler+0x10>)
 80020d2:	f000 f8da 	bl	800228a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000094 	.word	0x20000094

080020e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <TIM6_DAC_IRQHandler+0x10>)
 80020e6:	f002 fbcf 	bl	8004888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000254 	.word	0x20000254

080020f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <DMA2_Stream0_IRQHandler+0x10>)
 80020fa:	f000 ffb1 	bl	8003060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200000dc 	.word	0x200000dc

08002108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800212c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002164 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002132:	490e      	ldr	r1, [pc, #56]	; (800216c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002134:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002138:	e002      	b.n	8002140 <LoopCopyDataInit>

0800213a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800213c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213e:	3304      	adds	r3, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002144:	d3f9      	bcc.n	800213a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002146:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002148:	4c0b      	ldr	r4, [pc, #44]	; (8002178 <LoopFillZerobss+0x26>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800214c:	e001      	b.n	8002152 <LoopFillZerobss>

0800214e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002150:	3204      	adds	r2, #4

08002152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002154:	d3fb      	bcc.n	800214e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002156:	f7ff ffd7 	bl	8002108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800215a:	f006 f90f 	bl	800837c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215e:	f7fe fe5f 	bl	8000e20 <main>
  bx  lr    
 8002162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800216c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002170:	08008698 	.word	0x08008698
  ldr r2, =_sbss
 8002174:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002178:	20004cb8 	.word	0x20004cb8

0800217c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800217c:	e7fe      	b.n	800217c <CAN1_RX0_IRQHandler>
	...

08002180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_Init+0x40>)
 800218a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_Init+0x40>)
 8002196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800219a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_Init+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_Init+0x40>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a8:	2003      	movs	r0, #3
 80021aa:	f000 fe1e 	bl	8002dea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ae:	200f      	movs	r0, #15
 80021b0:	f7ff fefa 	bl	8001fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b4:	f7ff fd70 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023c00 	.word	0x40023c00

080021c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_IncTick+0x20>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_IncTick+0x24>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_IncTick+0x24>)
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	2000000c 	.word	0x2000000c
 80021e8:	2000029c 	.word	0x2000029c

080021ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_GetTick+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	2000029c 	.word	0x2000029c

08002204 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e033      	b.n	8002282 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fd64 	bl	8001cf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d118      	bne.n	8002274 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800224a:	f023 0302 	bic.w	r3, r3, #2
 800224e:	f043 0202 	orr.w	r2, r3, #2
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fb92 	bl	8002980 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f023 0303 	bic.w	r3, r3, #3
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
 8002272:	e001      	b.n	8002278 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d049      	beq.n	8002354 <HAL_ADC_IRQHandler+0xca>
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d046      	beq.n	8002354 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d12b      	bne.n	8002344 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d127      	bne.n	8002344 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800230c:	2b00      	cmp	r3, #0
 800230e:	d119      	bne.n	8002344 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0220 	bic.w	r2, r2, #32
 800231e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f043 0201 	orr.w	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f9c1 	bl	80026cc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f06f 0212 	mvn.w	r2, #18
 8002352:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002362:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d057      	beq.n	800241a <HAL_ADC_IRQHandler+0x190>
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d054      	beq.n	800241a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d139      	bne.n	800240a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d12b      	bne.n	800240a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d124      	bne.n	800240a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d11d      	bne.n	800240a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d119      	bne.n	800240a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f043 0201 	orr.w	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fc36 	bl	8002c7c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 020c 	mvn.w	r2, #12
 8002418:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d017      	beq.n	8002460 <HAL_ADC_IRQHandler+0x1d6>
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d014      	beq.n	8002460 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d10d      	bne.n	8002460 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f94f 	bl	80026f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f06f 0201 	mvn.w	r2, #1
 800245e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800246e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d015      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x218>
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f043 0202 	orr.w	r2, r3, #2
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0220 	mvn.w	r2, #32
 8002490:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f938 	bl	8002708 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0220 	mvn.w	r2, #32
 80024a0:	601a      	str	r2, [r3, #0]
  }
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_Start_DMA+0x1e>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e0e9      	b.n	800269e <HAL_ADC_Start_DMA+0x1f2>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d018      	beq.n	8002512 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024f0:	4b6d      	ldr	r3, [pc, #436]	; (80026a8 <HAL_ADC_Start_DMA+0x1fc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a6d      	ldr	r2, [pc, #436]	; (80026ac <HAL_ADC_Start_DMA+0x200>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0c9a      	lsrs	r2, r3, #18
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002504:	e002      	b.n	800250c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	3b01      	subs	r3, #1
 800250a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f9      	bne.n	8002506 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002520:	d107      	bne.n	8002532 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002530:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	f040 80a1 	bne.w	8002684 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800256c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800257c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002580:	d106      	bne.n	8002590 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f023 0206 	bic.w	r2, r3, #6
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
 800258e:	e002      	b.n	8002596 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800259e:	4b44      	ldr	r3, [pc, #272]	; (80026b0 <HAL_ADC_Start_DMA+0x204>)
 80025a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	4a43      	ldr	r2, [pc, #268]	; (80026b4 <HAL_ADC_Start_DMA+0x208>)
 80025a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	4a42      	ldr	r2, [pc, #264]	; (80026b8 <HAL_ADC_Start_DMA+0x20c>)
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	4a41      	ldr	r2, [pc, #260]	; (80026bc <HAL_ADC_Start_DMA+0x210>)
 80025b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80025d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	334c      	adds	r3, #76	; 0x4c
 80025ee:	4619      	mov	r1, r3
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f000 fcdc 	bl	8002fb0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	2b00      	cmp	r3, #0
 8002602:	d12a      	bne.n	800265a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a2d      	ldr	r2, [pc, #180]	; (80026c0 <HAL_ADC_Start_DMA+0x214>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d015      	beq.n	800263a <HAL_ADC_Start_DMA+0x18e>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a2c      	ldr	r2, [pc, #176]	; (80026c4 <HAL_ADC_Start_DMA+0x218>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d105      	bne.n	8002624 <HAL_ADC_Start_DMA+0x178>
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <HAL_ADC_Start_DMA+0x204>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a27      	ldr	r2, [pc, #156]	; (80026c8 <HAL_ADC_Start_DMA+0x21c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d136      	bne.n	800269c <HAL_ADC_Start_DMA+0x1f0>
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_ADC_Start_DMA+0x204>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	d130      	bne.n	800269c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d129      	bne.n	800269c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	e020      	b.n	800269c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <HAL_ADC_Start_DMA+0x214>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d11b      	bne.n	800269c <HAL_ADC_Start_DMA+0x1f0>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d114      	bne.n	800269c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	e00b      	b.n	800269c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f043 0210 	orr.w	r2, r3, #16
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000004 	.word	0x20000004
 80026ac:	431bde83 	.word	0x431bde83
 80026b0:	40012300 	.word	0x40012300
 80026b4:	08002b79 	.word	0x08002b79
 80026b8:	08002c33 	.word	0x08002c33
 80026bc:	08002c4f 	.word	0x08002c4f
 80026c0:	40012000 	.word	0x40012000
 80026c4:	40012100 	.word	0x40012100
 80026c8:	40012200 	.word	0x40012200

080026cc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1c>
 8002734:	2302      	movs	r3, #2
 8002736:	e113      	b.n	8002960 <HAL_ADC_ConfigChannel+0x244>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b09      	cmp	r3, #9
 8002746:	d925      	bls.n	8002794 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68d9      	ldr	r1, [r3, #12]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	3b1e      	subs	r3, #30
 800275e:	2207      	movs	r2, #7
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43da      	mvns	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	400a      	ands	r2, r1
 800276c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68d9      	ldr	r1, [r3, #12]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	4618      	mov	r0, r3
 8002780:	4603      	mov	r3, r0
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4403      	add	r3, r0
 8002786:	3b1e      	subs	r3, #30
 8002788:	409a      	lsls	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	e022      	b.n	80027da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6919      	ldr	r1, [r3, #16]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	2207      	movs	r2, #7
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	400a      	ands	r2, r1
 80027b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6919      	ldr	r1, [r3, #16]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4618      	mov	r0, r3
 80027ca:	4603      	mov	r3, r0
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4403      	add	r3, r0
 80027d0:	409a      	lsls	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d824      	bhi.n	800282c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	3b05      	subs	r3, #5
 80027f4:	221f      	movs	r2, #31
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43da      	mvns	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	400a      	ands	r2, r1
 8002802:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	3b05      	subs	r3, #5
 800281e:	fa00 f203 	lsl.w	r2, r0, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	635a      	str	r2, [r3, #52]	; 0x34
 800282a:	e04c      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b0c      	cmp	r3, #12
 8002832:	d824      	bhi.n	800287e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	3b23      	subs	r3, #35	; 0x23
 8002846:	221f      	movs	r2, #31
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43da      	mvns	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	400a      	ands	r2, r1
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	4618      	mov	r0, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	3b23      	subs	r3, #35	; 0x23
 8002870:	fa00 f203 	lsl.w	r2, r0, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
 800287c:	e023      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	3b41      	subs	r3, #65	; 0x41
 8002890:	221f      	movs	r2, #31
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	400a      	ands	r2, r1
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4618      	mov	r0, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	3b41      	subs	r3, #65	; 0x41
 80028ba:	fa00 f203 	lsl.w	r2, r0, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_ADC_ConfigChannel+0x250>)
 80028c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a28      	ldr	r2, [pc, #160]	; (8002970 <HAL_ADC_ConfigChannel+0x254>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d10f      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x1d8>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b12      	cmp	r3, #18
 80028da:	d10b      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <HAL_ADC_ConfigChannel+0x254>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d12b      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x23a>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <HAL_ADC_ConfigChannel+0x258>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d003      	beq.n	8002910 <HAL_ADC_ConfigChannel+0x1f4>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b11      	cmp	r3, #17
 800290e:	d122      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a11      	ldr	r2, [pc, #68]	; (8002974 <HAL_ADC_ConfigChannel+0x258>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d111      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_ADC_ConfigChannel+0x25c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a11      	ldr	r2, [pc, #68]	; (800297c <HAL_ADC_ConfigChannel+0x260>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	0c9a      	lsrs	r2, r3, #18
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002948:	e002      	b.n	8002950 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3b01      	subs	r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f9      	bne.n	800294a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40012300 	.word	0x40012300
 8002970:	40012000 	.word	0x40012000
 8002974:	10000012 	.word	0x10000012
 8002978:	20000004 	.word	0x20000004
 800297c:	431bde83 	.word	0x431bde83

08002980 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002988:	4b79      	ldr	r3, [pc, #484]	; (8002b70 <ADC_Init+0x1f0>)
 800298a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	021a      	lsls	r2, r3, #8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6899      	ldr	r1, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <ADC_Init+0x1f4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6899      	ldr	r1, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6899      	ldr	r1, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	e00f      	b.n	8002a7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0202 	bic.w	r2, r2, #2
 8002a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6899      	ldr	r1, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7e1b      	ldrb	r3, [r3, #24]
 8002a98:	005a      	lsls	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01b      	beq.n	8002ae4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002aca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	035a      	lsls	r2, r3, #13
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	e007      	b.n	8002af4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	051a      	lsls	r2, r3, #20
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6899      	ldr	r1, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b36:	025a      	lsls	r2, r3, #9
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6899      	ldr	r1, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	029a      	lsls	r2, r3, #10
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40012300 	.word	0x40012300
 8002b74:	0f000001 	.word	0x0f000001

08002b78 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d13c      	bne.n	8002c0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d12b      	bne.n	8002c04 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d127      	bne.n	8002c04 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d119      	bne.n	8002c04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0220 	bic.w	r2, r2, #32
 8002bde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7ff fd61 	bl	80026cc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c0a:	e00e      	b.n	8002c2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff fd75 	bl	8002708 <HAL_ADC_ErrorCallback>
}
 8002c1e:	e004      	b.n	8002c2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
}
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff fd4d 	bl	80026e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f043 0204 	orr.w	r2, r3, #4
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f7ff fd4a 	bl	8002708 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc2:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	60d3      	str	r3, [r2, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	f003 0307 	and.w	r3, r3, #7
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0b      	blt.n	8002d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4907      	ldr	r1, [pc, #28]	; (8002d2c <__NVIC_EnableIRQ+0x38>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000e100 	.word	0xe000e100

08002d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db0a      	blt.n	8002d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	490c      	ldr	r1, [pc, #48]	; (8002d7c <__NVIC_SetPriority+0x4c>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	440b      	add	r3, r1
 8002d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d58:	e00a      	b.n	8002d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4908      	ldr	r1, [pc, #32]	; (8002d80 <__NVIC_SetPriority+0x50>)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	3b04      	subs	r3, #4
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	761a      	strb	r2, [r3, #24]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f1c3 0307 	rsb	r3, r3, #7
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	bf28      	it	cs
 8002da2:	2304      	movcs	r3, #4
 8002da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d902      	bls.n	8002db4 <NVIC_EncodePriority+0x30>
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3b03      	subs	r3, #3
 8002db2:	e000      	b.n	8002db6 <NVIC_EncodePriority+0x32>
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43d9      	mvns	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	4313      	orrs	r3, r2
         );
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff ff4c 	bl	8002c90 <__NVIC_SetPriorityGrouping>
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e12:	f7ff ff61 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002e16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	6978      	ldr	r0, [r7, #20]
 8002e1e:	f7ff ffb1 	bl	8002d84 <NVIC_EncodePriority>
 8002e22:	4602      	mov	r2, r0
 8002e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ff80 	bl	8002d30 <__NVIC_SetPriority>
}
 8002e30:	bf00      	nop
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ff54 	bl	8002cf4 <__NVIC_EnableIRQ>
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e60:	f7ff f9c4 	bl	80021ec <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e099      	b.n	8002fa4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e90:	e00f      	b.n	8002eb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e92:	f7ff f9ab 	bl	80021ec <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	d908      	bls.n	8002eb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e078      	b.n	8002fa4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e8      	bne.n	8002e92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4b38      	ldr	r3, [pc, #224]	; (8002fac <HAL_DMA_Init+0x158>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d107      	bne.n	8002f1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	4313      	orrs	r3, r2
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 0307 	bic.w	r3, r3, #7
 8002f32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d117      	bne.n	8002f76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00e      	beq.n	8002f76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fa6f 	bl	800343c <DMA_CheckFifoParam>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2240      	movs	r2, #64	; 0x40
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f72:	2301      	movs	r3, #1
 8002f74:	e016      	b.n	8002fa4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fa26 	bl	80033d0 <DMA_CalcBaseAndBitshift>
 8002f84:	4603      	mov	r3, r0
 8002f86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	223f      	movs	r2, #63	; 0x3f
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	f010803f 	.word	0xf010803f

08002fb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_DMA_Start_IT+0x26>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e040      	b.n	8003058 <HAL_DMA_Start_IT+0xa8>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d12f      	bne.n	800304a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f9b8 	bl	8003374 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	223f      	movs	r2, #63	; 0x3f
 800300a:	409a      	lsls	r2, r3
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0216 	orr.w	r2, r2, #22
 800301e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0208 	orr.w	r2, r2, #8
 8003036:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	e005      	b.n	8003056 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003056:	7dfb      	ldrb	r3, [r7, #23]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800306c:	4b8e      	ldr	r3, [pc, #568]	; (80032a8 <HAL_DMA_IRQHandler+0x248>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a8e      	ldr	r2, [pc, #568]	; (80032ac <HAL_DMA_IRQHandler+0x24c>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0a9b      	lsrs	r3, r3, #10
 8003078:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	2208      	movs	r2, #8
 800308c:	409a      	lsls	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01a      	beq.n	80030cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0204 	bic.w	r2, r2, #4
 80030b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	2208      	movs	r2, #8
 80030ba:	409a      	lsls	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	2201      	movs	r2, #1
 80030d2:	409a      	lsls	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d012      	beq.n	8003102 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	2201      	movs	r2, #1
 80030f0:	409a      	lsls	r2, r3
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	f043 0202 	orr.w	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	2204      	movs	r2, #4
 8003108:	409a      	lsls	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d012      	beq.n	8003138 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003124:	2204      	movs	r2, #4
 8003126:	409a      	lsls	r2, r3
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	f043 0204 	orr.w	r2, r3, #4
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	2210      	movs	r2, #16
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d043      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d03c      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	2210      	movs	r2, #16
 800315c:	409a      	lsls	r2, r3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d018      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d108      	bne.n	8003190 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d024      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4798      	blx	r3
 800318e:	e01f      	b.n	80031d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01b      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
 80031a0:	e016      	b.n	80031d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d107      	bne.n	80031c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0208 	bic.w	r2, r2, #8
 80031be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d4:	2220      	movs	r2, #32
 80031d6:	409a      	lsls	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 808f 	beq.w	8003300 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8087 	beq.w	8003300 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	2220      	movs	r2, #32
 80031f8:	409a      	lsls	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b05      	cmp	r3, #5
 8003208:	d136      	bne.n	8003278 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0216 	bic.w	r2, r2, #22
 8003218:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003228:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <HAL_DMA_IRQHandler+0x1da>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003236:	2b00      	cmp	r3, #0
 8003238:	d007      	beq.n	800324a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0208 	bic.w	r2, r2, #8
 8003248:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	223f      	movs	r2, #63	; 0x3f
 8003250:	409a      	lsls	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326a:	2b00      	cmp	r3, #0
 800326c:	d07e      	beq.n	800336c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	4798      	blx	r3
        }
        return;
 8003276:	e079      	b.n	800336c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01d      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10d      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	2b00      	cmp	r3, #0
 800329a:	d031      	beq.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4798      	blx	r3
 80032a4:	e02c      	b.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
 80032a6:	bf00      	nop
 80032a8:	20000004 	.word	0x20000004
 80032ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d023      	beq.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
 80032c0:	e01e      	b.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10f      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0210 	bic.w	r2, r2, #16
 80032de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	2b00      	cmp	r3, #0
 8003306:	d032      	beq.n	800336e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d022      	beq.n	800335a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2205      	movs	r2, #5
 8003318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	3301      	adds	r3, #1
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	429a      	cmp	r2, r3
 8003336:	d307      	bcc.n	8003348 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f2      	bne.n	800332c <HAL_DMA_IRQHandler+0x2cc>
 8003346:	e000      	b.n	800334a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003348:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
 800336a:	e000      	b.n	800336e <HAL_DMA_IRQHandler+0x30e>
        return;
 800336c:	bf00      	nop
    }
  }
}
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003390:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d108      	bne.n	80033b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033b2:	e007      	b.n	80033c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	3b10      	subs	r3, #16
 80033e0:	4a14      	ldr	r2, [pc, #80]	; (8003434 <DMA_CalcBaseAndBitshift+0x64>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033ea:	4a13      	ldr	r2, [pc, #76]	; (8003438 <DMA_CalcBaseAndBitshift+0x68>)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d909      	bls.n	8003412 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	1d1a      	adds	r2, r3, #4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	659a      	str	r2, [r3, #88]	; 0x58
 8003410:	e007      	b.n	8003422 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800341a:	f023 0303 	bic.w	r3, r3, #3
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	aaaaaaab 	.word	0xaaaaaaab
 8003438:	08008620 	.word	0x08008620

0800343c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d11f      	bne.n	8003496 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d856      	bhi.n	800350a <DMA_CheckFifoParam+0xce>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <DMA_CheckFifoParam+0x28>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	08003475 	.word	0x08003475
 8003468:	08003487 	.word	0x08003487
 800346c:	08003475 	.word	0x08003475
 8003470:	0800350b 	.word	0x0800350b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d046      	beq.n	800350e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003484:	e043      	b.n	800350e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800348e:	d140      	bne.n	8003512 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003494:	e03d      	b.n	8003512 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349e:	d121      	bne.n	80034e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d837      	bhi.n	8003516 <DMA_CheckFifoParam+0xda>
 80034a6:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <DMA_CheckFifoParam+0x70>)
 80034a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ac:	080034bd 	.word	0x080034bd
 80034b0:	080034c3 	.word	0x080034c3
 80034b4:	080034bd 	.word	0x080034bd
 80034b8:	080034d5 	.word	0x080034d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
      break;
 80034c0:	e030      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d025      	beq.n	800351a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d2:	e022      	b.n	800351a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034dc:	d11f      	bne.n	800351e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034e2:	e01c      	b.n	800351e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d903      	bls.n	80034f2 <DMA_CheckFifoParam+0xb6>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d003      	beq.n	80034f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034f0:	e018      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
      break;
 80034f6:	e015      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00e      	beq.n	8003522 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
      break;
 8003508:	e00b      	b.n	8003522 <DMA_CheckFifoParam+0xe6>
      break;
 800350a:	bf00      	nop
 800350c:	e00a      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      break;
 800350e:	bf00      	nop
 8003510:	e008      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      break;
 8003512:	bf00      	nop
 8003514:	e006      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      break;
 8003516:	bf00      	nop
 8003518:	e004      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      break;
 800351a:	bf00      	nop
 800351c:	e002      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      break;   
 800351e:	bf00      	nop
 8003520:	e000      	b.n	8003524 <DMA_CheckFifoParam+0xe8>
      break;
 8003522:	bf00      	nop
    }
  } 
  
  return status; 
 8003524:	7bfb      	ldrb	r3, [r7, #15]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop

08003534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	e165      	b.n	800381c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003550:	2201      	movs	r2, #1
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	429a      	cmp	r2, r3
 800356a:	f040 8154 	bne.w	8003816 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d005      	beq.n	8003586 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003582:	2b02      	cmp	r3, #2
 8003584:	d130      	bne.n	80035e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	2203      	movs	r2, #3
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035bc:	2201      	movs	r2, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 0201 	and.w	r2, r3, #1
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d017      	beq.n	8003624 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	2203      	movs	r2, #3
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d123      	bne.n	8003678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	08da      	lsrs	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3208      	adds	r2, #8
 8003638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	220f      	movs	r2, #15
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	08da      	lsrs	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3208      	adds	r2, #8
 8003672:	69b9      	ldr	r1, [r7, #24]
 8003674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0203 	and.w	r2, r3, #3
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80ae 	beq.w	8003816 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	4b5d      	ldr	r3, [pc, #372]	; (8003834 <HAL_GPIO_Init+0x300>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	4a5c      	ldr	r2, [pc, #368]	; (8003834 <HAL_GPIO_Init+0x300>)
 80036c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ca:	4b5a      	ldr	r3, [pc, #360]	; (8003834 <HAL_GPIO_Init+0x300>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036d6:	4a58      	ldr	r2, [pc, #352]	; (8003838 <HAL_GPIO_Init+0x304>)
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	089b      	lsrs	r3, r3, #2
 80036dc:	3302      	adds	r3, #2
 80036de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	220f      	movs	r2, #15
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a4f      	ldr	r2, [pc, #316]	; (800383c <HAL_GPIO_Init+0x308>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d025      	beq.n	800374e <HAL_GPIO_Init+0x21a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a4e      	ldr	r2, [pc, #312]	; (8003840 <HAL_GPIO_Init+0x30c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01f      	beq.n	800374a <HAL_GPIO_Init+0x216>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a4d      	ldr	r2, [pc, #308]	; (8003844 <HAL_GPIO_Init+0x310>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d019      	beq.n	8003746 <HAL_GPIO_Init+0x212>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4c      	ldr	r2, [pc, #304]	; (8003848 <HAL_GPIO_Init+0x314>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_Init+0x20e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4b      	ldr	r2, [pc, #300]	; (800384c <HAL_GPIO_Init+0x318>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00d      	beq.n	800373e <HAL_GPIO_Init+0x20a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a4a      	ldr	r2, [pc, #296]	; (8003850 <HAL_GPIO_Init+0x31c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_Init+0x206>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a49      	ldr	r2, [pc, #292]	; (8003854 <HAL_GPIO_Init+0x320>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_GPIO_Init+0x202>
 8003732:	2306      	movs	r3, #6
 8003734:	e00c      	b.n	8003750 <HAL_GPIO_Init+0x21c>
 8003736:	2307      	movs	r3, #7
 8003738:	e00a      	b.n	8003750 <HAL_GPIO_Init+0x21c>
 800373a:	2305      	movs	r3, #5
 800373c:	e008      	b.n	8003750 <HAL_GPIO_Init+0x21c>
 800373e:	2304      	movs	r3, #4
 8003740:	e006      	b.n	8003750 <HAL_GPIO_Init+0x21c>
 8003742:	2303      	movs	r3, #3
 8003744:	e004      	b.n	8003750 <HAL_GPIO_Init+0x21c>
 8003746:	2302      	movs	r3, #2
 8003748:	e002      	b.n	8003750 <HAL_GPIO_Init+0x21c>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_GPIO_Init+0x21c>
 800374e:	2300      	movs	r3, #0
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	f002 0203 	and.w	r2, r2, #3
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	4093      	lsls	r3, r2
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003760:	4935      	ldr	r1, [pc, #212]	; (8003838 <HAL_GPIO_Init+0x304>)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	3302      	adds	r3, #2
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800376e:	4b3a      	ldr	r3, [pc, #232]	; (8003858 <HAL_GPIO_Init+0x324>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003792:	4a31      	ldr	r2, [pc, #196]	; (8003858 <HAL_GPIO_Init+0x324>)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003798:	4b2f      	ldr	r3, [pc, #188]	; (8003858 <HAL_GPIO_Init+0x324>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037bc:	4a26      	ldr	r2, [pc, #152]	; (8003858 <HAL_GPIO_Init+0x324>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037c2:	4b25      	ldr	r3, [pc, #148]	; (8003858 <HAL_GPIO_Init+0x324>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037e6:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <HAL_GPIO_Init+0x324>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ec:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <HAL_GPIO_Init+0x324>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003810:	4a11      	ldr	r2, [pc, #68]	; (8003858 <HAL_GPIO_Init+0x324>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3301      	adds	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b0f      	cmp	r3, #15
 8003820:	f67f ae96 	bls.w	8003550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3724      	adds	r7, #36	; 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	40013800 	.word	0x40013800
 800383c:	40020000 	.word	0x40020000
 8003840:	40020400 	.word	0x40020400
 8003844:	40020800 	.word	0x40020800
 8003848:	40020c00 	.word	0x40020c00
 800384c:	40021000 	.word	0x40021000
 8003850:	40021400 	.word	0x40021400
 8003854:	40021800 	.word	0x40021800
 8003858:	40013c00 	.word	0x40013c00

0800385c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
 8003868:	4613      	mov	r3, r2
 800386a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800386c:	787b      	ldrb	r3, [r7, #1]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003878:	e003      	b.n	8003882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	041a      	lsls	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	619a      	str	r2, [r3, #24]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0cc      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a4:	4b68      	ldr	r3, [pc, #416]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d90c      	bls.n	80038cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b65      	ldr	r3, [pc, #404]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b63      	ldr	r3, [pc, #396]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0b8      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d020      	beq.n	800391a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e4:	4b59      	ldr	r3, [pc, #356]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	4a58      	ldr	r2, [pc, #352]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038fc:	4b53      	ldr	r3, [pc, #332]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a52      	ldr	r2, [pc, #328]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003908:	4b50      	ldr	r3, [pc, #320]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	494d      	ldr	r1, [pc, #308]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d044      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d107      	bne.n	800393e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	4b47      	ldr	r3, [pc, #284]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d119      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e07f      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d003      	beq.n	800394e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800394a:	2b03      	cmp	r3, #3
 800394c:	d107      	bne.n	800395e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394e:	4b3f      	ldr	r3, [pc, #252]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e06f      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395e:	4b3b      	ldr	r3, [pc, #236]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e067      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800396e:	4b37      	ldr	r3, [pc, #220]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f023 0203 	bic.w	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4934      	ldr	r1, [pc, #208]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	4313      	orrs	r3, r2
 800397e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003980:	f7fe fc34 	bl	80021ec <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003986:	e00a      	b.n	800399e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003988:	f7fe fc30 	bl	80021ec <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e04f      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 020c 	and.w	r2, r3, #12
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d1eb      	bne.n	8003988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b0:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d20c      	bcs.n	80039d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e032      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e4:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4916      	ldr	r1, [pc, #88]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	490e      	ldr	r1, [pc, #56]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a16:	f000 f887 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	490a      	ldr	r1, [pc, #40]	; (8003a50 <HAL_RCC_ClockConfig+0x1c0>)
 8003a28:	5ccb      	ldrb	r3, [r1, r3]
 8003a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2e:	4a09      	ldr	r2, [pc, #36]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a32:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fab6 	bl	8001fa8 <HAL_InitTick>

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023c00 	.word	0x40023c00
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	08008608 	.word	0x08008608
 8003a54:	20000004 	.word	0x20000004
 8003a58:	20000008 	.word	0x20000008

08003a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000004 	.word	0x20000004

08003a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a78:	f7ff fff0 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0a9b      	lsrs	r3, r3, #10
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4903      	ldr	r1, [pc, #12]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	08008618 	.word	0x08008618

08003a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aa0:	f7ff ffdc 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0b5b      	lsrs	r3, r3, #13
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	4903      	ldr	r1, [pc, #12]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	08008618 	.word	0x08008618

08003ac4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	220f      	movs	r2, #15
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ad4:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_RCC_GetClockConfig+0x5c>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0203 	and.w	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <HAL_RCC_GetClockConfig+0x5c>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <HAL_RCC_GetClockConfig+0x5c>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_RCC_GetClockConfig+0x5c>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	08db      	lsrs	r3, r3, #3
 8003afe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <HAL_RCC_GetClockConfig+0x60>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 020f 	and.w	r2, r3, #15
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	601a      	str	r2, [r3, #0]
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40023c00 	.word	0x40023c00

08003b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b2c:	b0ae      	sub	sp, #184	; 0xb8
 8003b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b4e:	4bcb      	ldr	r3, [pc, #812]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b0c      	cmp	r3, #12
 8003b58:	f200 8206 	bhi.w	8003f68 <HAL_RCC_GetSysClockFreq+0x440>
 8003b5c:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003b99 	.word	0x08003b99
 8003b68:	08003f69 	.word	0x08003f69
 8003b6c:	08003f69 	.word	0x08003f69
 8003b70:	08003f69 	.word	0x08003f69
 8003b74:	08003ba1 	.word	0x08003ba1
 8003b78:	08003f69 	.word	0x08003f69
 8003b7c:	08003f69 	.word	0x08003f69
 8003b80:	08003f69 	.word	0x08003f69
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003f69 	.word	0x08003f69
 8003b8c:	08003f69 	.word	0x08003f69
 8003b90:	08003f69 	.word	0x08003f69
 8003b94:	08003d99 	.word	0x08003d99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b98:	4bb9      	ldr	r3, [pc, #740]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003b9e:	e1e7      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ba0:	4bb8      	ldr	r3, [pc, #736]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ba6:	e1e3      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba8:	4bb4      	ldr	r3, [pc, #720]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bb4:	4bb1      	ldr	r3, [pc, #708]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d071      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc0:	4bae      	ldr	r3, [pc, #696]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	099b      	lsrs	r3, r3, #6
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bcc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003be2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003be6:	4622      	mov	r2, r4
 8003be8:	462b      	mov	r3, r5
 8003bea:	f04f 0000 	mov.w	r0, #0
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	0159      	lsls	r1, r3, #5
 8003bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf8:	0150      	lsls	r0, r2, #5
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4621      	mov	r1, r4
 8003c00:	1a51      	subs	r1, r2, r1
 8003c02:	6439      	str	r1, [r7, #64]	; 0x40
 8003c04:	4629      	mov	r1, r5
 8003c06:	eb63 0301 	sbc.w	r3, r3, r1
 8003c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003c18:	4649      	mov	r1, r9
 8003c1a:	018b      	lsls	r3, r1, #6
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c22:	4641      	mov	r1, r8
 8003c24:	018a      	lsls	r2, r1, #6
 8003c26:	4641      	mov	r1, r8
 8003c28:	1a51      	subs	r1, r2, r1
 8003c2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003c40:	4649      	mov	r1, r9
 8003c42:	00cb      	lsls	r3, r1, #3
 8003c44:	4641      	mov	r1, r8
 8003c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4a:	4641      	mov	r1, r8
 8003c4c:	00ca      	lsls	r2, r1, #3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	4622      	mov	r2, r4
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	633b      	str	r3, [r7, #48]	; 0x30
 8003c5a:	462b      	mov	r3, r5
 8003c5c:	460a      	mov	r2, r1
 8003c5e:	eb42 0303 	adc.w	r3, r2, r3
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c70:	4629      	mov	r1, r5
 8003c72:	024b      	lsls	r3, r1, #9
 8003c74:	4621      	mov	r1, r4
 8003c76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	024a      	lsls	r2, r1, #9
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c94:	f7fc feda 	bl	8000a4c <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ca2:	e067      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca4:	4b75      	ldr	r3, [pc, #468]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	099b      	lsrs	r3, r3, #6
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cb0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cc2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	462b      	mov	r3, r5
 8003cca:	f04f 0000 	mov.w	r0, #0
 8003cce:	f04f 0100 	mov.w	r1, #0
 8003cd2:	0159      	lsls	r1, r3, #5
 8003cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd8:	0150      	lsls	r0, r2, #5
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4621      	mov	r1, r4
 8003ce0:	1a51      	subs	r1, r2, r1
 8003ce2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	018b      	lsls	r3, r1, #6
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d02:	4641      	mov	r1, r8
 8003d04:	018a      	lsls	r2, r1, #6
 8003d06:	4641      	mov	r1, r8
 8003d08:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d26:	4692      	mov	sl, r2
 8003d28:	469b      	mov	fp, r3
 8003d2a:	4623      	mov	r3, r4
 8003d2c:	eb1a 0303 	adds.w	r3, sl, r3
 8003d30:	623b      	str	r3, [r7, #32]
 8003d32:	462b      	mov	r3, r5
 8003d34:	eb4b 0303 	adc.w	r3, fp, r3
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d46:	4629      	mov	r1, r5
 8003d48:	028b      	lsls	r3, r1, #10
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d50:	4621      	mov	r1, r4
 8003d52:	028a      	lsls	r2, r1, #10
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003d60:	677a      	str	r2, [r7, #116]	; 0x74
 8003d62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d66:	f7fc fe71 	bl	8000a4c <__aeabi_uldivmod>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4613      	mov	r3, r2
 8003d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d74:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d96:	e0eb      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d98:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003da4:	4b35      	ldr	r3, [pc, #212]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d06b      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db0:	4b32      	ldr	r3, [pc, #200]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	099b      	lsrs	r3, r3, #6
 8003db6:	2200      	movs	r2, #0
 8003db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	667b      	str	r3, [r7, #100]	; 0x64
 8003dc8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003dcc:	4622      	mov	r2, r4
 8003dce:	462b      	mov	r3, r5
 8003dd0:	f04f 0000 	mov.w	r0, #0
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	0159      	lsls	r1, r3, #5
 8003dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dde:	0150      	lsls	r0, r2, #5
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4621      	mov	r1, r4
 8003de6:	1a51      	subs	r1, r2, r1
 8003de8:	61b9      	str	r1, [r7, #24]
 8003dea:	4629      	mov	r1, r5
 8003dec:	eb63 0301 	sbc.w	r3, r3, r1
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003dfe:	4659      	mov	r1, fp
 8003e00:	018b      	lsls	r3, r1, #6
 8003e02:	4651      	mov	r1, sl
 8003e04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e08:	4651      	mov	r1, sl
 8003e0a:	018a      	lsls	r2, r1, #6
 8003e0c:	4651      	mov	r1, sl
 8003e0e:	ebb2 0801 	subs.w	r8, r2, r1
 8003e12:	4659      	mov	r1, fp
 8003e14:	eb63 0901 	sbc.w	r9, r3, r1
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e2c:	4690      	mov	r8, r2
 8003e2e:	4699      	mov	r9, r3
 8003e30:	4623      	mov	r3, r4
 8003e32:	eb18 0303 	adds.w	r3, r8, r3
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	462b      	mov	r3, r5
 8003e3a:	eb49 0303 	adc.w	r3, r9, r3
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	024b      	lsls	r3, r1, #9
 8003e50:	4621      	mov	r1, r4
 8003e52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e56:	4621      	mov	r1, r4
 8003e58:	024a      	lsls	r2, r1, #9
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e62:	2200      	movs	r2, #0
 8003e64:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e66:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e6c:	f7fc fdee 	bl	8000a4c <__aeabi_uldivmod>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4613      	mov	r3, r2
 8003e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e7a:	e065      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x420>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	00f42400 	.word	0x00f42400
 8003e84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e88:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	2200      	movs	r2, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	4611      	mov	r1, r2
 8003e94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e98:	653b      	str	r3, [r7, #80]	; 0x50
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003ea2:	4642      	mov	r2, r8
 8003ea4:	464b      	mov	r3, r9
 8003ea6:	f04f 0000 	mov.w	r0, #0
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	0159      	lsls	r1, r3, #5
 8003eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eb4:	0150      	lsls	r0, r2, #5
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4641      	mov	r1, r8
 8003ebc:	1a51      	subs	r1, r2, r1
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	018b      	lsls	r3, r1, #6
 8003ed8:	4651      	mov	r1, sl
 8003eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ede:	4651      	mov	r1, sl
 8003ee0:	018a      	lsls	r2, r1, #6
 8003ee2:	4651      	mov	r1, sl
 8003ee4:	1a54      	subs	r4, r2, r1
 8003ee6:	4659      	mov	r1, fp
 8003ee8:	eb63 0501 	sbc.w	r5, r3, r1
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	00eb      	lsls	r3, r5, #3
 8003ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003efa:	00e2      	lsls	r2, r4, #3
 8003efc:	4614      	mov	r4, r2
 8003efe:	461d      	mov	r5, r3
 8003f00:	4643      	mov	r3, r8
 8003f02:	18e3      	adds	r3, r4, r3
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	464b      	mov	r3, r9
 8003f08:	eb45 0303 	adc.w	r3, r5, r3
 8003f0c:	607b      	str	r3, [r7, #4]
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	028b      	lsls	r3, r1, #10
 8003f1e:	4621      	mov	r1, r4
 8003f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f24:	4621      	mov	r1, r4
 8003f26:	028a      	lsls	r2, r1, #10
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f30:	2200      	movs	r2, #0
 8003f32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f34:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003f36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f3a:	f7fc fd87 	bl	8000a4c <__aeabi_uldivmod>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4613      	mov	r3, r2
 8003f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	0f1b      	lsrs	r3, r3, #28
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f66:	e003      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	37b8      	adds	r7, #184	; 0xb8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	00f42400 	.word	0x00f42400

08003f88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e28d      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8083 	beq.w	80040ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fa8:	4b94      	ldr	r3, [pc, #592]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d019      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fb4:	4b91      	ldr	r3, [pc, #580]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d106      	bne.n	8003fce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fc0:	4b8e      	ldr	r3, [pc, #568]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fce:	4b8b      	ldr	r3, [pc, #556]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	d112      	bne.n	8004000 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fda:	4b88      	ldr	r3, [pc, #544]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fe6:	d10b      	bne.n	8004000 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe8:	4b84      	ldr	r3, [pc, #528]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d05b      	beq.n	80040ac <HAL_RCC_OscConfig+0x124>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d157      	bne.n	80040ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e25a      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004008:	d106      	bne.n	8004018 <HAL_RCC_OscConfig+0x90>
 800400a:	4b7c      	ldr	r3, [pc, #496]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7b      	ldr	r2, [pc, #492]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e01d      	b.n	8004054 <HAL_RCC_OscConfig+0xcc>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004020:	d10c      	bne.n	800403c <HAL_RCC_OscConfig+0xb4>
 8004022:	4b76      	ldr	r3, [pc, #472]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a75      	ldr	r2, [pc, #468]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8004028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b73      	ldr	r3, [pc, #460]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a72      	ldr	r2, [pc, #456]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e00b      	b.n	8004054 <HAL_RCC_OscConfig+0xcc>
 800403c:	4b6f      	ldr	r3, [pc, #444]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a6e      	ldr	r2, [pc, #440]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8004042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4b6c      	ldr	r3, [pc, #432]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6b      	ldr	r2, [pc, #428]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 800404e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d013      	beq.n	8004084 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fe f8c6 	bl	80021ec <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004064:	f7fe f8c2 	bl	80021ec <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	; 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e21f      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004076:	4b61      	ldr	r3, [pc, #388]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0xdc>
 8004082:	e014      	b.n	80040ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fe f8b2 	bl	80021ec <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800408c:	f7fe f8ae 	bl	80021ec <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	; 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e20b      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409e:	4b57      	ldr	r3, [pc, #348]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x104>
 80040aa:	e000      	b.n	80040ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d06f      	beq.n	800419a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040ba:	4b50      	ldr	r3, [pc, #320]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d017      	beq.n	80040f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040c6:	4b4d      	ldr	r3, [pc, #308]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d105      	bne.n	80040de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040d2:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040de:	4b47      	ldr	r3, [pc, #284]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d11c      	bne.n	8004124 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ea:	4b44      	ldr	r3, [pc, #272]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d116      	bne.n	8004124 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f6:	4b41      	ldr	r3, [pc, #260]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_RCC_OscConfig+0x186>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e1d3      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410e:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4937      	ldr	r1, [pc, #220]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004122:	e03a      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800412c:	4b34      	ldr	r3, [pc, #208]	; (8004200 <HAL_RCC_OscConfig+0x278>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fe f85b 	bl	80021ec <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800413a:	f7fe f857 	bl	80021ec <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e1b4      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414c:	4b2b      	ldr	r3, [pc, #172]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004158:	4b28      	ldr	r3, [pc, #160]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4925      	ldr	r1, [pc, #148]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
 800416c:	e015      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416e:	4b24      	ldr	r3, [pc, #144]	; (8004200 <HAL_RCC_OscConfig+0x278>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fe f83a 	bl	80021ec <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800417c:	f7fe f836 	bl	80021ec <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e193      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d036      	beq.n	8004214 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d016      	beq.n	80041dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b15      	ldr	r3, [pc, #84]	; (8004204 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fe f81a 	bl	80021ec <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041bc:	f7fe f816 	bl	80021ec <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e173      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_RCC_OscConfig+0x274>)
 80041d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x234>
 80041da:	e01b      	b.n	8004214 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <HAL_RCC_OscConfig+0x27c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e2:	f7fe f803 	bl	80021ec <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e8:	e00e      	b.n	8004208 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ea:	f7fd ffff 	bl	80021ec <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d907      	bls.n	8004208 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e15c      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
 80041fc:	40023800 	.word	0x40023800
 8004200:	42470000 	.word	0x42470000
 8004204:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	4b8a      	ldr	r3, [pc, #552]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800420a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1ea      	bne.n	80041ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8097 	beq.w	8004350 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b83      	ldr	r3, [pc, #524]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10f      	bne.n	8004252 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	4b7f      	ldr	r3, [pc, #508]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	4a7e      	ldr	r2, [pc, #504]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004240:	6413      	str	r3, [r2, #64]	; 0x40
 8004242:	4b7c      	ldr	r3, [pc, #496]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424e:	2301      	movs	r3, #1
 8004250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004252:	4b79      	ldr	r3, [pc, #484]	; (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d118      	bne.n	8004290 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425e:	4b76      	ldr	r3, [pc, #472]	; (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a75      	ldr	r2, [pc, #468]	; (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426a:	f7fd ffbf 	bl	80021ec <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004272:	f7fd ffbb 	bl	80021ec <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e118      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004284:	4b6c      	ldr	r3, [pc, #432]	; (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x31e>
 8004298:	4b66      	ldr	r3, [pc, #408]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	4a65      	ldr	r2, [pc, #404]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	; 0x70
 80042a4:	e01c      	b.n	80042e0 <HAL_RCC_OscConfig+0x358>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x340>
 80042ae:	4b61      	ldr	r3, [pc, #388]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	4a60      	ldr	r2, [pc, #384]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042b4:	f043 0304 	orr.w	r3, r3, #4
 80042b8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ba:	4b5e      	ldr	r3, [pc, #376]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	4a5d      	ldr	r2, [pc, #372]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	6713      	str	r3, [r2, #112]	; 0x70
 80042c6:	e00b      	b.n	80042e0 <HAL_RCC_OscConfig+0x358>
 80042c8:	4b5a      	ldr	r3, [pc, #360]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	4a59      	ldr	r2, [pc, #356]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	; 0x70
 80042d4:	4b57      	ldr	r3, [pc, #348]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	4a56      	ldr	r2, [pc, #344]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042da:	f023 0304 	bic.w	r3, r3, #4
 80042de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d015      	beq.n	8004314 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fd ff80 	bl	80021ec <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f0:	f7fd ff7c 	bl	80021ec <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e0d7      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004306:	4b4b      	ldr	r3, [pc, #300]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ee      	beq.n	80042f0 <HAL_RCC_OscConfig+0x368>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fd ff6a 	bl	80021ec <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f7fd ff66 	bl	80021ec <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	; 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e0c1      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004332:	4b40      	ldr	r3, [pc, #256]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ee      	bne.n	800431c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004344:	4b3b      	ldr	r3, [pc, #236]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	4a3a      	ldr	r2, [pc, #232]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800434a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800434e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80ad 	beq.w	80044b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800435a:	4b36      	ldr	r3, [pc, #216]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b08      	cmp	r3, #8
 8004364:	d060      	beq.n	8004428 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d145      	bne.n	80043fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436e:	4b33      	ldr	r3, [pc, #204]	; (800443c <HAL_RCC_OscConfig+0x4b4>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fd ff3a 	bl	80021ec <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437c:	f7fd ff36 	bl	80021ec <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e093      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	4b29      	ldr	r3, [pc, #164]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	019b      	lsls	r3, r3, #6
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	3b01      	subs	r3, #1
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	061b      	lsls	r3, r3, #24
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	071b      	lsls	r3, r3, #28
 80043c6:	491b      	ldr	r1, [pc, #108]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043cc:	4b1b      	ldr	r3, [pc, #108]	; (800443c <HAL_RCC_OscConfig+0x4b4>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7fd ff0b 	bl	80021ec <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043da:	f7fd ff07 	bl	80021ec <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e064      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ec:	4b11      	ldr	r3, [pc, #68]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_OscConfig+0x452>
 80043f8:	e05c      	b.n	80044b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <HAL_RCC_OscConfig+0x4b4>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fd fef4 	bl	80021ec <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004408:	f7fd fef0 	bl	80021ec <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e04d      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	4b06      	ldr	r3, [pc, #24]	; (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x480>
 8004426:	e045      	b.n	80044b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e040      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
 8004434:	40023800 	.word	0x40023800
 8004438:	40007000 	.word	0x40007000
 800443c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004440:	4b1f      	ldr	r3, [pc, #124]	; (80044c0 <HAL_RCC_OscConfig+0x538>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d030      	beq.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d129      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d122      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004470:	4013      	ands	r3, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004478:	4293      	cmp	r3, r2
 800447a:	d119      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	3b01      	subs	r3, #1
 800448a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d10f      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800

080044c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e041      	b.n	800455a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f839 	bl	8004562 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f000 fbb2 	bl	8004c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d001      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e04e      	b.n	800462e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a23      	ldr	r2, [pc, #140]	; (800463c <HAL_TIM_Base_Start_IT+0xc4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d022      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ba:	d01d      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1f      	ldr	r2, [pc, #124]	; (8004640 <HAL_TIM_Base_Start_IT+0xc8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d018      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <HAL_TIM_Base_Start_IT+0xcc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d013      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <HAL_TIM_Base_Start_IT+0xd0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00e      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1b      	ldr	r2, [pc, #108]	; (800464c <HAL_TIM_Base_Start_IT+0xd4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d009      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_TIM_Base_Start_IT+0xd8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a18      	ldr	r2, [pc, #96]	; (8004654 <HAL_TIM_Base_Start_IT+0xdc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d111      	bne.n	800461c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b06      	cmp	r3, #6
 8004608:	d010      	beq.n	800462c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0201 	orr.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461a:	e007      	b.n	800462c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40000c00 	.word	0x40000c00
 800464c:	40010400 	.word	0x40010400
 8004650:	40014000 	.word	0x40014000
 8004654:	40001800 	.word	0x40001800

08004658 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e041      	b.n	80046ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fd fbb6 	bl	8001df0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3304      	adds	r3, #4
 8004694:	4619      	mov	r1, r3
 8004696:	4610      	mov	r0, r2
 8004698:	f000 fae8 	bl	8004c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d109      	bne.n	800471c <HAL_TIM_PWM_Start+0x24>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b01      	cmp	r3, #1
 8004712:	bf14      	ite	ne
 8004714:	2301      	movne	r3, #1
 8004716:	2300      	moveq	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	e022      	b.n	8004762 <HAL_TIM_PWM_Start+0x6a>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b04      	cmp	r3, #4
 8004720:	d109      	bne.n	8004736 <HAL_TIM_PWM_Start+0x3e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	bf14      	ite	ne
 800472e:	2301      	movne	r3, #1
 8004730:	2300      	moveq	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	e015      	b.n	8004762 <HAL_TIM_PWM_Start+0x6a>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d109      	bne.n	8004750 <HAL_TIM_PWM_Start+0x58>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	e008      	b.n	8004762 <HAL_TIM_PWM_Start+0x6a>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e07c      	b.n	8004864 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d104      	bne.n	800477a <HAL_TIM_PWM_Start+0x82>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004778:	e013      	b.n	80047a2 <HAL_TIM_PWM_Start+0xaa>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b04      	cmp	r3, #4
 800477e:	d104      	bne.n	800478a <HAL_TIM_PWM_Start+0x92>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004788:	e00b      	b.n	80047a2 <HAL_TIM_PWM_Start+0xaa>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d104      	bne.n	800479a <HAL_TIM_PWM_Start+0xa2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004798:	e003      	b.n	80047a2 <HAL_TIM_PWM_Start+0xaa>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2201      	movs	r2, #1
 80047a8:	6839      	ldr	r1, [r7, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fcae 	bl	800510c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2d      	ldr	r2, [pc, #180]	; (800486c <HAL_TIM_PWM_Start+0x174>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_TIM_PWM_Start+0xcc>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <HAL_TIM_PWM_Start+0x178>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d101      	bne.n	80047c8 <HAL_TIM_PWM_Start+0xd0>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <HAL_TIM_PWM_Start+0xd2>
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a22      	ldr	r2, [pc, #136]	; (800486c <HAL_TIM_PWM_Start+0x174>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d022      	beq.n	800482e <HAL_TIM_PWM_Start+0x136>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f0:	d01d      	beq.n	800482e <HAL_TIM_PWM_Start+0x136>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1f      	ldr	r2, [pc, #124]	; (8004874 <HAL_TIM_PWM_Start+0x17c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d018      	beq.n	800482e <HAL_TIM_PWM_Start+0x136>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1d      	ldr	r2, [pc, #116]	; (8004878 <HAL_TIM_PWM_Start+0x180>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <HAL_TIM_PWM_Start+0x136>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1c      	ldr	r2, [pc, #112]	; (800487c <HAL_TIM_PWM_Start+0x184>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00e      	beq.n	800482e <HAL_TIM_PWM_Start+0x136>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a16      	ldr	r2, [pc, #88]	; (8004870 <HAL_TIM_PWM_Start+0x178>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d009      	beq.n	800482e <HAL_TIM_PWM_Start+0x136>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a18      	ldr	r2, [pc, #96]	; (8004880 <HAL_TIM_PWM_Start+0x188>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d004      	beq.n	800482e <HAL_TIM_PWM_Start+0x136>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a16      	ldr	r2, [pc, #88]	; (8004884 <HAL_TIM_PWM_Start+0x18c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d111      	bne.n	8004852 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b06      	cmp	r3, #6
 800483e:	d010      	beq.n	8004862 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004850:	e007      	b.n	8004862 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40010000 	.word	0x40010000
 8004870:	40010400 	.word	0x40010400
 8004874:	40000400 	.word	0x40000400
 8004878:	40000800 	.word	0x40000800
 800487c:	40000c00 	.word	0x40000c00
 8004880:	40014000 	.word	0x40014000
 8004884:	40001800 	.word	0x40001800

08004888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d122      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d11b      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0202 	mvn.w	r2, #2
 80048b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f9b0 	bl	8004c30 <HAL_TIM_IC_CaptureCallback>
 80048d0:	e005      	b.n	80048de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f9a2 	bl	8004c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f9b3 	bl	8004c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d122      	bne.n	8004938 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d11b      	bne.n	8004938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0204 	mvn.w	r2, #4
 8004908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f986 	bl	8004c30 <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f978 	bl	8004c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f989 	bl	8004c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b08      	cmp	r3, #8
 8004944:	d122      	bne.n	800498c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b08      	cmp	r3, #8
 8004952:	d11b      	bne.n	800498c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0208 	mvn.w	r2, #8
 800495c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2204      	movs	r2, #4
 8004962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f95c 	bl	8004c30 <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f94e 	bl	8004c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f95f 	bl	8004c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b10      	cmp	r3, #16
 8004998:	d122      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d11b      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0210 	mvn.w	r2, #16
 80049b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2208      	movs	r2, #8
 80049b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f932 	bl	8004c30 <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f924 	bl	8004c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f935 	bl	8004c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d10e      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d107      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0201 	mvn.w	r2, #1
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fc fcca 	bl	80013a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b80      	cmp	r3, #128	; 0x80
 8004a18:	d10e      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d107      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fc16 	bl	8005264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d10e      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d107      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f8fa 	bl	8004c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	d10e      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d107      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0220 	mvn.w	r2, #32
 8004a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fbe0 	bl	8005250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e0ae      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	f200 809f 	bhi.w	8004c04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004b01 	.word	0x08004b01
 8004ad0:	08004c05 	.word	0x08004c05
 8004ad4:	08004c05 	.word	0x08004c05
 8004ad8:	08004c05 	.word	0x08004c05
 8004adc:	08004b41 	.word	0x08004b41
 8004ae0:	08004c05 	.word	0x08004c05
 8004ae4:	08004c05 	.word	0x08004c05
 8004ae8:	08004c05 	.word	0x08004c05
 8004aec:	08004b83 	.word	0x08004b83
 8004af0:	08004c05 	.word	0x08004c05
 8004af4:	08004c05 	.word	0x08004c05
 8004af8:	08004c05 	.word	0x08004c05
 8004afc:	08004bc3 	.word	0x08004bc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f950 	bl	8004dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0208 	orr.w	r2, r2, #8
 8004b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0204 	bic.w	r2, r2, #4
 8004b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6999      	ldr	r1, [r3, #24]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	619a      	str	r2, [r3, #24]
      break;
 8004b3e:	e064      	b.n	8004c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f9a0 	bl	8004e8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6999      	ldr	r1, [r3, #24]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	021a      	lsls	r2, r3, #8
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	619a      	str	r2, [r3, #24]
      break;
 8004b80:	e043      	b.n	8004c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 f9f5 	bl	8004f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0208 	orr.w	r2, r2, #8
 8004b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0204 	bic.w	r2, r2, #4
 8004bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69d9      	ldr	r1, [r3, #28]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	61da      	str	r2, [r3, #28]
      break;
 8004bc0:	e023      	b.n	8004c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fa49 	bl	8005060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69d9      	ldr	r1, [r3, #28]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	021a      	lsls	r2, r3, #8
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	61da      	str	r2, [r3, #28]
      break;
 8004c02:	e002      	b.n	8004c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	75fb      	strb	r3, [r7, #23]
      break;
 8004c08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a40      	ldr	r2, [pc, #256]	; (8004d80 <TIM_Base_SetConfig+0x114>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8a:	d00f      	beq.n	8004cac <TIM_Base_SetConfig+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a3d      	ldr	r2, [pc, #244]	; (8004d84 <TIM_Base_SetConfig+0x118>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00b      	beq.n	8004cac <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a3c      	ldr	r2, [pc, #240]	; (8004d88 <TIM_Base_SetConfig+0x11c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d007      	beq.n	8004cac <TIM_Base_SetConfig+0x40>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a3b      	ldr	r2, [pc, #236]	; (8004d8c <TIM_Base_SetConfig+0x120>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <TIM_Base_SetConfig+0x40>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a3a      	ldr	r2, [pc, #232]	; (8004d90 <TIM_Base_SetConfig+0x124>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d108      	bne.n	8004cbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2f      	ldr	r2, [pc, #188]	; (8004d80 <TIM_Base_SetConfig+0x114>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d02b      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ccc:	d027      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2c      	ldr	r2, [pc, #176]	; (8004d84 <TIM_Base_SetConfig+0x118>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d023      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a2b      	ldr	r2, [pc, #172]	; (8004d88 <TIM_Base_SetConfig+0x11c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01f      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2a      	ldr	r2, [pc, #168]	; (8004d8c <TIM_Base_SetConfig+0x120>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01b      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a29      	ldr	r2, [pc, #164]	; (8004d90 <TIM_Base_SetConfig+0x124>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d017      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a28      	ldr	r2, [pc, #160]	; (8004d94 <TIM_Base_SetConfig+0x128>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a27      	ldr	r2, [pc, #156]	; (8004d98 <TIM_Base_SetConfig+0x12c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00f      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <TIM_Base_SetConfig+0x130>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00b      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a25      	ldr	r2, [pc, #148]	; (8004da0 <TIM_Base_SetConfig+0x134>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d007      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a24      	ldr	r2, [pc, #144]	; (8004da4 <TIM_Base_SetConfig+0x138>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d003      	beq.n	8004d1e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a23      	ldr	r2, [pc, #140]	; (8004da8 <TIM_Base_SetConfig+0x13c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d108      	bne.n	8004d30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a0a      	ldr	r2, [pc, #40]	; (8004d80 <TIM_Base_SetConfig+0x114>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_Base_SetConfig+0xf8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <TIM_Base_SetConfig+0x124>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d103      	bne.n	8004d6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	615a      	str	r2, [r3, #20]
}
 8004d72:	bf00      	nop
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40010000 	.word	0x40010000
 8004d84:	40000400 	.word	0x40000400
 8004d88:	40000800 	.word	0x40000800
 8004d8c:	40000c00 	.word	0x40000c00
 8004d90:	40010400 	.word	0x40010400
 8004d94:	40014000 	.word	0x40014000
 8004d98:	40014400 	.word	0x40014400
 8004d9c:	40014800 	.word	0x40014800
 8004da0:	40001800 	.word	0x40001800
 8004da4:	40001c00 	.word	0x40001c00
 8004da8:	40002000 	.word	0x40002000

08004dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f023 0201 	bic.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f023 0302 	bic.w	r3, r3, #2
 8004df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a20      	ldr	r2, [pc, #128]	; (8004e84 <TIM_OC1_SetConfig+0xd8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_OC1_SetConfig+0x64>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <TIM_OC1_SetConfig+0xdc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10c      	bne.n	8004e2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f023 0308 	bic.w	r3, r3, #8
 8004e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f023 0304 	bic.w	r3, r3, #4
 8004e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <TIM_OC1_SetConfig+0xd8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d003      	beq.n	8004e3a <TIM_OC1_SetConfig+0x8e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <TIM_OC1_SetConfig+0xdc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d111      	bne.n	8004e5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	621a      	str	r2, [r3, #32]
}
 8004e78:	bf00      	nop
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40010400 	.word	0x40010400

08004e8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f023 0210 	bic.w	r2, r3, #16
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f023 0320 	bic.w	r3, r3, #32
 8004ed6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a22      	ldr	r2, [pc, #136]	; (8004f70 <TIM_OC2_SetConfig+0xe4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_OC2_SetConfig+0x68>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <TIM_OC2_SetConfig+0xe8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d10d      	bne.n	8004f10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <TIM_OC2_SetConfig+0xe4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_OC2_SetConfig+0x94>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a16      	ldr	r2, [pc, #88]	; (8004f74 <TIM_OC2_SetConfig+0xe8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d113      	bne.n	8004f48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	621a      	str	r2, [r3, #32]
}
 8004f62:	bf00      	nop
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40010000 	.word	0x40010000
 8004f74:	40010400 	.word	0x40010400

08004f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a21      	ldr	r2, [pc, #132]	; (8005058 <TIM_OC3_SetConfig+0xe0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d003      	beq.n	8004fde <TIM_OC3_SetConfig+0x66>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a20      	ldr	r2, [pc, #128]	; (800505c <TIM_OC3_SetConfig+0xe4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d10d      	bne.n	8004ffa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a16      	ldr	r2, [pc, #88]	; (8005058 <TIM_OC3_SetConfig+0xe0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d003      	beq.n	800500a <TIM_OC3_SetConfig+0x92>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a15      	ldr	r2, [pc, #84]	; (800505c <TIM_OC3_SetConfig+0xe4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d113      	bne.n	8005032 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	621a      	str	r2, [r3, #32]
}
 800504c:	bf00      	nop
 800504e:	371c      	adds	r7, #28
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	40010000 	.word	0x40010000
 800505c:	40010400 	.word	0x40010400

08005060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	031b      	lsls	r3, r3, #12
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a12      	ldr	r2, [pc, #72]	; (8005104 <TIM_OC4_SetConfig+0xa4>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_OC4_SetConfig+0x68>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a11      	ldr	r2, [pc, #68]	; (8005108 <TIM_OC4_SetConfig+0xa8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d109      	bne.n	80050dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	019b      	lsls	r3, r3, #6
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	621a      	str	r2, [r3, #32]
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40010000 	.word	0x40010000
 8005108:	40010400 	.word	0x40010400

0800510c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	2201      	movs	r2, #1
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a1a      	ldr	r2, [r3, #32]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	43db      	mvns	r3, r3
 800512e:	401a      	ands	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a1a      	ldr	r2, [r3, #32]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 031f 	and.w	r3, r3, #31
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	621a      	str	r2, [r3, #32]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
	...

08005158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e05a      	b.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a21      	ldr	r2, [pc, #132]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d022      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051bc:	d01d      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d018      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1b      	ldr	r2, [pc, #108]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1a      	ldr	r2, [pc, #104]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a18      	ldr	r2, [pc, #96]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a17      	ldr	r2, [pc, #92]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a15      	ldr	r2, [pc, #84]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d10c      	bne.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	4313      	orrs	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40010000 	.word	0x40010000
 8005238:	40000400 	.word	0x40000400
 800523c:	40000800 	.word	0x40000800
 8005240:	40000c00 	.word	0x40000c00
 8005244:	40010400 	.word	0x40010400
 8005248:	40014000 	.word	0x40014000
 800524c:	40001800 	.word	0x40001800

08005250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e03f      	b.n	800530a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fc fe3a 	bl	8001f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2224      	movs	r2, #36	; 0x24
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f829 	bl	8005314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695a      	ldr	r2, [r3, #20]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005318:	b0c0      	sub	sp, #256	; 0x100
 800531a:	af00      	add	r7, sp, #0
 800531c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005330:	68d9      	ldr	r1, [r3, #12]
 8005332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	ea40 0301 	orr.w	r3, r0, r1
 800533c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800533e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	431a      	orrs	r2, r3
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	431a      	orrs	r2, r3
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800536c:	f021 010c 	bic.w	r1, r1, #12
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800537a:	430b      	orrs	r3, r1
 800537c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800537e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800538a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538e:	6999      	ldr	r1, [r3, #24]
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	ea40 0301 	orr.w	r3, r0, r1
 800539a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b8f      	ldr	r3, [pc, #572]	; (80055e0 <UART_SetConfig+0x2cc>)
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d005      	beq.n	80053b4 <UART_SetConfig+0xa0>
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4b8d      	ldr	r3, [pc, #564]	; (80055e4 <UART_SetConfig+0x2d0>)
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d104      	bne.n	80053be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053b4:	f7fe fb72 	bl	8003a9c <HAL_RCC_GetPCLK2Freq>
 80053b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053bc:	e003      	b.n	80053c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053be:	f7fe fb59 	bl	8003a74 <HAL_RCC_GetPCLK1Freq>
 80053c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d0:	f040 810c 	bne.w	80055ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053d8:	2200      	movs	r2, #0
 80053da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053e6:	4622      	mov	r2, r4
 80053e8:	462b      	mov	r3, r5
 80053ea:	1891      	adds	r1, r2, r2
 80053ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80053ee:	415b      	adcs	r3, r3
 80053f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053f6:	4621      	mov	r1, r4
 80053f8:	eb12 0801 	adds.w	r8, r2, r1
 80053fc:	4629      	mov	r1, r5
 80053fe:	eb43 0901 	adc.w	r9, r3, r1
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800540e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005416:	4690      	mov	r8, r2
 8005418:	4699      	mov	r9, r3
 800541a:	4623      	mov	r3, r4
 800541c:	eb18 0303 	adds.w	r3, r8, r3
 8005420:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005424:	462b      	mov	r3, r5
 8005426:	eb49 0303 	adc.w	r3, r9, r3
 800542a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800543a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800543e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005442:	460b      	mov	r3, r1
 8005444:	18db      	adds	r3, r3, r3
 8005446:	653b      	str	r3, [r7, #80]	; 0x50
 8005448:	4613      	mov	r3, r2
 800544a:	eb42 0303 	adc.w	r3, r2, r3
 800544e:	657b      	str	r3, [r7, #84]	; 0x54
 8005450:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005454:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005458:	f7fb faf8 	bl	8000a4c <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4b61      	ldr	r3, [pc, #388]	; (80055e8 <UART_SetConfig+0x2d4>)
 8005462:	fba3 2302 	umull	r2, r3, r3, r2
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	011c      	lsls	r4, r3, #4
 800546a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800546e:	2200      	movs	r2, #0
 8005470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005474:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005478:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800547c:	4642      	mov	r2, r8
 800547e:	464b      	mov	r3, r9
 8005480:	1891      	adds	r1, r2, r2
 8005482:	64b9      	str	r1, [r7, #72]	; 0x48
 8005484:	415b      	adcs	r3, r3
 8005486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005488:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800548c:	4641      	mov	r1, r8
 800548e:	eb12 0a01 	adds.w	sl, r2, r1
 8005492:	4649      	mov	r1, r9
 8005494:	eb43 0b01 	adc.w	fp, r3, r1
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054ac:	4692      	mov	sl, r2
 80054ae:	469b      	mov	fp, r3
 80054b0:	4643      	mov	r3, r8
 80054b2:	eb1a 0303 	adds.w	r3, sl, r3
 80054b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054ba:	464b      	mov	r3, r9
 80054bc:	eb4b 0303 	adc.w	r3, fp, r3
 80054c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054d8:	460b      	mov	r3, r1
 80054da:	18db      	adds	r3, r3, r3
 80054dc:	643b      	str	r3, [r7, #64]	; 0x40
 80054de:	4613      	mov	r3, r2
 80054e0:	eb42 0303 	adc.w	r3, r2, r3
 80054e4:	647b      	str	r3, [r7, #68]	; 0x44
 80054e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054ee:	f7fb faad 	bl	8000a4c <__aeabi_uldivmod>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4611      	mov	r1, r2
 80054f8:	4b3b      	ldr	r3, [pc, #236]	; (80055e8 <UART_SetConfig+0x2d4>)
 80054fa:	fba3 2301 	umull	r2, r3, r3, r1
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	2264      	movs	r2, #100	; 0x64
 8005502:	fb02 f303 	mul.w	r3, r2, r3
 8005506:	1acb      	subs	r3, r1, r3
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800550e:	4b36      	ldr	r3, [pc, #216]	; (80055e8 <UART_SetConfig+0x2d4>)
 8005510:	fba3 2302 	umull	r2, r3, r3, r2
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800551c:	441c      	add	r4, r3
 800551e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005522:	2200      	movs	r2, #0
 8005524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005528:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800552c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005530:	4642      	mov	r2, r8
 8005532:	464b      	mov	r3, r9
 8005534:	1891      	adds	r1, r2, r2
 8005536:	63b9      	str	r1, [r7, #56]	; 0x38
 8005538:	415b      	adcs	r3, r3
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800553c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005540:	4641      	mov	r1, r8
 8005542:	1851      	adds	r1, r2, r1
 8005544:	6339      	str	r1, [r7, #48]	; 0x30
 8005546:	4649      	mov	r1, r9
 8005548:	414b      	adcs	r3, r1
 800554a:	637b      	str	r3, [r7, #52]	; 0x34
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005558:	4659      	mov	r1, fp
 800555a:	00cb      	lsls	r3, r1, #3
 800555c:	4651      	mov	r1, sl
 800555e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005562:	4651      	mov	r1, sl
 8005564:	00ca      	lsls	r2, r1, #3
 8005566:	4610      	mov	r0, r2
 8005568:	4619      	mov	r1, r3
 800556a:	4603      	mov	r3, r0
 800556c:	4642      	mov	r2, r8
 800556e:	189b      	adds	r3, r3, r2
 8005570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005574:	464b      	mov	r3, r9
 8005576:	460a      	mov	r2, r1
 8005578:	eb42 0303 	adc.w	r3, r2, r3
 800557c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800558c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005590:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005594:	460b      	mov	r3, r1
 8005596:	18db      	adds	r3, r3, r3
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
 800559a:	4613      	mov	r3, r2
 800559c:	eb42 0303 	adc.w	r3, r2, r3
 80055a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055aa:	f7fb fa4f 	bl	8000a4c <__aeabi_uldivmod>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <UART_SetConfig+0x2d4>)
 80055b4:	fba3 1302 	umull	r1, r3, r3, r2
 80055b8:	095b      	lsrs	r3, r3, #5
 80055ba:	2164      	movs	r1, #100	; 0x64
 80055bc:	fb01 f303 	mul.w	r3, r1, r3
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	3332      	adds	r3, #50	; 0x32
 80055c6:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <UART_SetConfig+0x2d4>)
 80055c8:	fba2 2303 	umull	r2, r3, r2, r3
 80055cc:	095b      	lsrs	r3, r3, #5
 80055ce:	f003 0207 	and.w	r2, r3, #7
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4422      	add	r2, r4
 80055da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055dc:	e105      	b.n	80057ea <UART_SetConfig+0x4d6>
 80055de:	bf00      	nop
 80055e0:	40011000 	.word	0x40011000
 80055e4:	40011400 	.word	0x40011400
 80055e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055fe:	4642      	mov	r2, r8
 8005600:	464b      	mov	r3, r9
 8005602:	1891      	adds	r1, r2, r2
 8005604:	6239      	str	r1, [r7, #32]
 8005606:	415b      	adcs	r3, r3
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
 800560a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800560e:	4641      	mov	r1, r8
 8005610:	1854      	adds	r4, r2, r1
 8005612:	4649      	mov	r1, r9
 8005614:	eb43 0501 	adc.w	r5, r3, r1
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	f04f 0300 	mov.w	r3, #0
 8005620:	00eb      	lsls	r3, r5, #3
 8005622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005626:	00e2      	lsls	r2, r4, #3
 8005628:	4614      	mov	r4, r2
 800562a:	461d      	mov	r5, r3
 800562c:	4643      	mov	r3, r8
 800562e:	18e3      	adds	r3, r4, r3
 8005630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005634:	464b      	mov	r3, r9
 8005636:	eb45 0303 	adc.w	r3, r5, r3
 800563a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800564a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800565a:	4629      	mov	r1, r5
 800565c:	008b      	lsls	r3, r1, #2
 800565e:	4621      	mov	r1, r4
 8005660:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005664:	4621      	mov	r1, r4
 8005666:	008a      	lsls	r2, r1, #2
 8005668:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800566c:	f7fb f9ee 	bl	8000a4c <__aeabi_uldivmod>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4b60      	ldr	r3, [pc, #384]	; (80057f8 <UART_SetConfig+0x4e4>)
 8005676:	fba3 2302 	umull	r2, r3, r3, r2
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	011c      	lsls	r4, r3, #4
 800567e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005682:	2200      	movs	r2, #0
 8005684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005688:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800568c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005690:	4642      	mov	r2, r8
 8005692:	464b      	mov	r3, r9
 8005694:	1891      	adds	r1, r2, r2
 8005696:	61b9      	str	r1, [r7, #24]
 8005698:	415b      	adcs	r3, r3
 800569a:	61fb      	str	r3, [r7, #28]
 800569c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056a0:	4641      	mov	r1, r8
 80056a2:	1851      	adds	r1, r2, r1
 80056a4:	6139      	str	r1, [r7, #16]
 80056a6:	4649      	mov	r1, r9
 80056a8:	414b      	adcs	r3, r1
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056b8:	4659      	mov	r1, fp
 80056ba:	00cb      	lsls	r3, r1, #3
 80056bc:	4651      	mov	r1, sl
 80056be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056c2:	4651      	mov	r1, sl
 80056c4:	00ca      	lsls	r2, r1, #3
 80056c6:	4610      	mov	r0, r2
 80056c8:	4619      	mov	r1, r3
 80056ca:	4603      	mov	r3, r0
 80056cc:	4642      	mov	r2, r8
 80056ce:	189b      	adds	r3, r3, r2
 80056d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056d4:	464b      	mov	r3, r9
 80056d6:	460a      	mov	r2, r1
 80056d8:	eb42 0303 	adc.w	r3, r2, r3
 80056dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80056ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056f8:	4649      	mov	r1, r9
 80056fa:	008b      	lsls	r3, r1, #2
 80056fc:	4641      	mov	r1, r8
 80056fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005702:	4641      	mov	r1, r8
 8005704:	008a      	lsls	r2, r1, #2
 8005706:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800570a:	f7fb f99f 	bl	8000a4c <__aeabi_uldivmod>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4b39      	ldr	r3, [pc, #228]	; (80057f8 <UART_SetConfig+0x4e4>)
 8005714:	fba3 1302 	umull	r1, r3, r3, r2
 8005718:	095b      	lsrs	r3, r3, #5
 800571a:	2164      	movs	r1, #100	; 0x64
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	3332      	adds	r3, #50	; 0x32
 8005726:	4a34      	ldr	r2, [pc, #208]	; (80057f8 <UART_SetConfig+0x4e4>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005732:	441c      	add	r4, r3
 8005734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005738:	2200      	movs	r2, #0
 800573a:	673b      	str	r3, [r7, #112]	; 0x70
 800573c:	677a      	str	r2, [r7, #116]	; 0x74
 800573e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005742:	4642      	mov	r2, r8
 8005744:	464b      	mov	r3, r9
 8005746:	1891      	adds	r1, r2, r2
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	415b      	adcs	r3, r3
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005752:	4641      	mov	r1, r8
 8005754:	1851      	adds	r1, r2, r1
 8005756:	6039      	str	r1, [r7, #0]
 8005758:	4649      	mov	r1, r9
 800575a:	414b      	adcs	r3, r1
 800575c:	607b      	str	r3, [r7, #4]
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800576a:	4659      	mov	r1, fp
 800576c:	00cb      	lsls	r3, r1, #3
 800576e:	4651      	mov	r1, sl
 8005770:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005774:	4651      	mov	r1, sl
 8005776:	00ca      	lsls	r2, r1, #3
 8005778:	4610      	mov	r0, r2
 800577a:	4619      	mov	r1, r3
 800577c:	4603      	mov	r3, r0
 800577e:	4642      	mov	r2, r8
 8005780:	189b      	adds	r3, r3, r2
 8005782:	66bb      	str	r3, [r7, #104]	; 0x68
 8005784:	464b      	mov	r3, r9
 8005786:	460a      	mov	r2, r1
 8005788:	eb42 0303 	adc.w	r3, r2, r3
 800578c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800578e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	663b      	str	r3, [r7, #96]	; 0x60
 8005798:	667a      	str	r2, [r7, #100]	; 0x64
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057a6:	4649      	mov	r1, r9
 80057a8:	008b      	lsls	r3, r1, #2
 80057aa:	4641      	mov	r1, r8
 80057ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057b0:	4641      	mov	r1, r8
 80057b2:	008a      	lsls	r2, r1, #2
 80057b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057b8:	f7fb f948 	bl	8000a4c <__aeabi_uldivmod>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <UART_SetConfig+0x4e4>)
 80057c2:	fba3 1302 	umull	r1, r3, r3, r2
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2164      	movs	r1, #100	; 0x64
 80057ca:	fb01 f303 	mul.w	r3, r1, r3
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	3332      	adds	r3, #50	; 0x32
 80057d4:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <UART_SetConfig+0x4e4>)
 80057d6:	fba2 2303 	umull	r2, r3, r2, r3
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	f003 020f 	and.w	r2, r3, #15
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4422      	add	r2, r4
 80057e8:	609a      	str	r2, [r3, #8]
}
 80057ea:	bf00      	nop
 80057ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057f0:	46bd      	mov	sp, r7
 80057f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057f6:	bf00      	nop
 80057f8:	51eb851f 	.word	0x51eb851f

080057fc <__NVIC_SetPriority>:
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	6039      	str	r1, [r7, #0]
 8005806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580c:	2b00      	cmp	r3, #0
 800580e:	db0a      	blt.n	8005826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	490c      	ldr	r1, [pc, #48]	; (8005848 <__NVIC_SetPriority+0x4c>)
 8005816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800581a:	0112      	lsls	r2, r2, #4
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	440b      	add	r3, r1
 8005820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005824:	e00a      	b.n	800583c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	b2da      	uxtb	r2, r3
 800582a:	4908      	ldr	r1, [pc, #32]	; (800584c <__NVIC_SetPriority+0x50>)
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	3b04      	subs	r3, #4
 8005834:	0112      	lsls	r2, r2, #4
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	440b      	add	r3, r1
 800583a:	761a      	strb	r2, [r3, #24]
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	e000e100 	.word	0xe000e100
 800584c:	e000ed00 	.word	0xe000ed00

08005850 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005854:	4b05      	ldr	r3, [pc, #20]	; (800586c <SysTick_Handler+0x1c>)
 8005856:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005858:	f001 fd28 	bl	80072ac <xTaskGetSchedulerState>
 800585c:	4603      	mov	r3, r0
 800585e:	2b01      	cmp	r3, #1
 8005860:	d001      	beq.n	8005866 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005862:	f002 fb11 	bl	8007e88 <xPortSysTickHandler>
  }
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	e000e010 	.word	0xe000e010

08005870 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005874:	2100      	movs	r1, #0
 8005876:	f06f 0004 	mvn.w	r0, #4
 800587a:	f7ff ffbf 	bl	80057fc <__NVIC_SetPriority>
#endif
}
 800587e:	bf00      	nop
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800588a:	f3ef 8305 	mrs	r3, IPSR
 800588e:	603b      	str	r3, [r7, #0]
  return(result);
 8005890:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005896:	f06f 0305 	mvn.w	r3, #5
 800589a:	607b      	str	r3, [r7, #4]
 800589c:	e00c      	b.n	80058b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800589e:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <osKernelInitialize+0x44>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d105      	bne.n	80058b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058a6:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <osKernelInitialize+0x44>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	607b      	str	r3, [r7, #4]
 80058b0:	e002      	b.n	80058b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80058b2:	f04f 33ff 	mov.w	r3, #4294967295
 80058b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058b8:	687b      	ldr	r3, [r7, #4]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	200002a0 	.word	0x200002a0

080058cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d2:	f3ef 8305 	mrs	r3, IPSR
 80058d6:	603b      	str	r3, [r7, #0]
  return(result);
 80058d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80058de:	f06f 0305 	mvn.w	r3, #5
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	e010      	b.n	8005908 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80058e6:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <osKernelStart+0x48>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d109      	bne.n	8005902 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80058ee:	f7ff ffbf 	bl	8005870 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <osKernelStart+0x48>)
 80058f4:	2202      	movs	r2, #2
 80058f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80058f8:	f001 f87c 	bl	80069f4 <vTaskStartScheduler>
      stat = osOK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	e002      	b.n	8005908 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005902:	f04f 33ff 	mov.w	r3, #4294967295
 8005906:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005908:	687b      	ldr	r3, [r7, #4]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	200002a0 	.word	0x200002a0

08005918 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005918:	b580      	push	{r7, lr}
 800591a:	b08e      	sub	sp, #56	; 0x38
 800591c:	af04      	add	r7, sp, #16
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005924:	2300      	movs	r3, #0
 8005926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005928:	f3ef 8305 	mrs	r3, IPSR
 800592c:	617b      	str	r3, [r7, #20]
  return(result);
 800592e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005930:	2b00      	cmp	r3, #0
 8005932:	d17e      	bne.n	8005a32 <osThreadNew+0x11a>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d07b      	beq.n	8005a32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800593e:	2318      	movs	r3, #24
 8005940:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005942:	2300      	movs	r3, #0
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005946:	f04f 33ff 	mov.w	r3, #4294967295
 800594a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d045      	beq.n	80059de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <osThreadNew+0x48>
        name = attr->name;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <osThreadNew+0x6e>
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2b38      	cmp	r3, #56	; 0x38
 8005978:	d805      	bhi.n	8005986 <osThreadNew+0x6e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <osThreadNew+0x72>
        return (NULL);
 8005986:	2300      	movs	r3, #0
 8005988:	e054      	b.n	8005a34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	089b      	lsrs	r3, r3, #2
 8005998:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00e      	beq.n	80059c0 <osThreadNew+0xa8>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	2bbb      	cmp	r3, #187	; 0xbb
 80059a8:	d90a      	bls.n	80059c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d006      	beq.n	80059c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <osThreadNew+0xa8>
        mem = 1;
 80059ba:	2301      	movs	r3, #1
 80059bc:	61bb      	str	r3, [r7, #24]
 80059be:	e010      	b.n	80059e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10c      	bne.n	80059e2 <osThreadNew+0xca>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d108      	bne.n	80059e2 <osThreadNew+0xca>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <osThreadNew+0xca>
          mem = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	61bb      	str	r3, [r7, #24]
 80059dc:	e001      	b.n	80059e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d110      	bne.n	8005a0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059f0:	9202      	str	r2, [sp, #8]
 80059f2:	9301      	str	r3, [sp, #4]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	6a3a      	ldr	r2, [r7, #32]
 80059fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 fe0c 	bl	800661c <xTaskCreateStatic>
 8005a04:	4603      	mov	r3, r0
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	e013      	b.n	8005a32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d110      	bne.n	8005a32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	f107 0310 	add.w	r3, r7, #16
 8005a18:	9301      	str	r3, [sp, #4]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fe57 	bl	80066d6 <xTaskCreate>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d001      	beq.n	8005a32 <osThreadNew+0x11a>
            hTask = NULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a32:	693b      	ldr	r3, [r7, #16]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3728      	adds	r7, #40	; 0x28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a44:	f3ef 8305 	mrs	r3, IPSR
 8005a48:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <osDelay+0x1c>
    stat = osErrorISR;
 8005a50:	f06f 0305 	mvn.w	r3, #5
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	e007      	b.n	8005a68 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 ff92 	bl	800698c <vTaskDelay>
    }
  }

  return (stat);
 8005a68:	68fb      	ldr	r3, [r7, #12]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4a07      	ldr	r2, [pc, #28]	; (8005aa0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	4a06      	ldr	r2, [pc, #24]	; (8005aa4 <vApplicationGetIdleTaskMemory+0x30>)
 8005a8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2280      	movs	r2, #128	; 0x80
 8005a90:	601a      	str	r2, [r3, #0]
}
 8005a92:	bf00      	nop
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	200002a4 	.word	0x200002a4
 8005aa4:	20000360 	.word	0x20000360

08005aa8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4a07      	ldr	r2, [pc, #28]	; (8005ad4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ab8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	4a06      	ldr	r2, [pc, #24]	; (8005ad8 <vApplicationGetTimerTaskMemory+0x30>)
 8005abe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ac6:	601a      	str	r2, [r3, #0]
}
 8005ac8:	bf00      	nop
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	20000560 	.word	0x20000560
 8005ad8:	2000061c 	.word	0x2000061c

08005adc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f103 0208 	add.w	r2, r3, #8
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f04f 32ff 	mov.w	r2, #4294967295
 8005af4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f103 0208 	add.w	r2, r3, #8
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f103 0208 	add.w	r2, r3, #8
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	601a      	str	r2, [r3, #0]
}
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d103      	bne.n	8005b9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e00c      	b.n	8005bb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e002      	b.n	8005bac <vListInsert+0x2e>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d2f6      	bcs.n	8005ba6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	601a      	str	r2, [r3, #0]
}
 8005be4:	bf00      	nop
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6892      	ldr	r2, [r2, #8]
 8005c06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6852      	ldr	r2, [r2, #4]
 8005c10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d103      	bne.n	8005c24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	1e5a      	subs	r2, r3, #1
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10a      	bne.n	8005c6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c6a:	bf00      	nop
 8005c6c:	e7fe      	b.n	8005c6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c6e:	f002 f879 	bl	8007d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	68f9      	ldr	r1, [r7, #12]
 8005c7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c7e:	fb01 f303 	mul.w	r3, r1, r3
 8005c82:	441a      	add	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	68f9      	ldr	r1, [r7, #12]
 8005ca2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ca4:	fb01 f303 	mul.w	r3, r1, r3
 8005ca8:	441a      	add	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	22ff      	movs	r2, #255	; 0xff
 8005cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	22ff      	movs	r2, #255	; 0xff
 8005cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d114      	bne.n	8005cee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01a      	beq.n	8005d02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3310      	adds	r3, #16
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f001 f929 	bl	8006f28 <xTaskRemoveFromEventList>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d012      	beq.n	8005d02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <xQueueGenericReset+0xcc>)
 8005cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	e009      	b.n	8005d02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3310      	adds	r3, #16
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fef2 	bl	8005adc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	3324      	adds	r3, #36	; 0x24
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff feed 	bl	8005adc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d02:	f002 f85f 	bl	8007dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d06:	2301      	movs	r3, #1
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	e000ed04 	.word	0xe000ed04

08005d14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08e      	sub	sp, #56	; 0x38
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d3a:	bf00      	nop
 8005d3c:	e7fe      	b.n	8005d3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <xQueueGenericCreateStatic+0x52>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <xQueueGenericCreateStatic+0x56>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <xQueueGenericCreateStatic+0x58>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	623b      	str	r3, [r7, #32]
}
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d102      	bne.n	8005d92 <xQueueGenericCreateStatic+0x7e>
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <xQueueGenericCreateStatic+0x82>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <xQueueGenericCreateStatic+0x84>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	61fb      	str	r3, [r7, #28]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005db2:	2350      	movs	r3, #80	; 0x50
 8005db4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b50      	cmp	r3, #80	; 0x50
 8005dba:	d00a      	beq.n	8005dd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	61bb      	str	r3, [r7, #24]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005dd2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00d      	beq.n	8005dfa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005de6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	4613      	mov	r3, r2
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 f805 	bl	8005e04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3730      	adds	r7, #48	; 0x30
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d103      	bne.n	8005e20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	e002      	b.n	8005e26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e32:	2101      	movs	r1, #1
 8005e34:	69b8      	ldr	r0, [r7, #24]
 8005e36:	f7ff ff05 	bl	8005c44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	78fa      	ldrb	r2, [r7, #3]
 8005e3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08e      	sub	sp, #56	; 0x38
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <xQueueGenericSend+0x32>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <xQueueGenericSend+0x40>
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <xQueueGenericSend+0x44>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <xQueueGenericSend+0x46>
 8005e90:	2300      	movs	r3, #0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <xQueueGenericSend+0x60>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d103      	bne.n	8005eba <xQueueGenericSend+0x6e>
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <xQueueGenericSend+0x72>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <xQueueGenericSend+0x74>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <xQueueGenericSend+0x8e>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	623b      	str	r3, [r7, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eda:	f001 f9e7 	bl	80072ac <xTaskGetSchedulerState>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <xQueueGenericSend+0x9e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <xQueueGenericSend+0xa2>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <xQueueGenericSend+0xa4>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <xQueueGenericSend+0xbe>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	61fb      	str	r3, [r7, #28]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f0a:	f001 ff2b 	bl	8007d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d302      	bcc.n	8005f20 <xQueueGenericSend+0xd4>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d129      	bne.n	8005f74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f26:	f000 fa0b 	bl	8006340 <prvCopyDataToQueue>
 8005f2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d010      	beq.n	8005f56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	3324      	adds	r3, #36	; 0x24
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 fff5 	bl	8006f28 <xTaskRemoveFromEventList>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d013      	beq.n	8005f6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f44:	4b3f      	ldr	r3, [pc, #252]	; (8006044 <xQueueGenericSend+0x1f8>)
 8005f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	e00a      	b.n	8005f6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f5c:	4b39      	ldr	r3, [pc, #228]	; (8006044 <xQueueGenericSend+0x1f8>)
 8005f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f6c:	f001 ff2a 	bl	8007dc4 <vPortExitCritical>
				return pdPASS;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e063      	b.n	800603c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d103      	bne.n	8005f82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f7a:	f001 ff23 	bl	8007dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e05c      	b.n	800603c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f88:	f107 0314 	add.w	r3, r7, #20
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 f82f 	bl	8006ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f92:	2301      	movs	r3, #1
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f96:	f001 ff15 	bl	8007dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f9a:	f000 fd9b 	bl	8006ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f9e:	f001 fee1 	bl	8007d64 <vPortEnterCritical>
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fa8:	b25b      	sxtb	r3, r3
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d103      	bne.n	8005fb8 <xQueueGenericSend+0x16c>
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fbe:	b25b      	sxtb	r3, r3
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d103      	bne.n	8005fce <xQueueGenericSend+0x182>
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fce:	f001 fef9 	bl	8007dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fd2:	1d3a      	adds	r2, r7, #4
 8005fd4:	f107 0314 	add.w	r3, r7, #20
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 f81e 	bl	800701c <xTaskCheckForTimeOut>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d124      	bne.n	8006030 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fe8:	f000 faa2 	bl	8006530 <prvIsQueueFull>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d018      	beq.n	8006024 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	3310      	adds	r3, #16
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 ff44 	bl	8006e88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006002:	f000 fa2d 	bl	8006460 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006006:	f000 fd73 	bl	8006af0 <xTaskResumeAll>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	f47f af7c 	bne.w	8005f0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006012:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <xQueueGenericSend+0x1f8>)
 8006014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	e772      	b.n	8005f0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006026:	f000 fa1b 	bl	8006460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800602a:	f000 fd61 	bl	8006af0 <xTaskResumeAll>
 800602e:	e76c      	b.n	8005f0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006032:	f000 fa15 	bl	8006460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006036:	f000 fd5b 	bl	8006af0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800603a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800603c:	4618      	mov	r0, r3
 800603e:	3738      	adds	r7, #56	; 0x38
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	e000ed04 	.word	0xe000ed04

08006048 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b090      	sub	sp, #64	; 0x40
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <xQueueGenericSendFromISR+0x3c>
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <xQueueGenericSendFromISR+0x40>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <xQueueGenericSendFromISR+0x42>
 8006088:	2300      	movs	r3, #0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d103      	bne.n	80060b2 <xQueueGenericSendFromISR+0x6a>
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <xQueueGenericSendFromISR+0x6e>
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <xQueueGenericSendFromISR+0x70>
 80060b6:	2300      	movs	r3, #0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	623b      	str	r3, [r7, #32]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060d2:	f001 ff29 	bl	8007f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060d6:	f3ef 8211 	mrs	r2, BASEPRI
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	61fa      	str	r2, [r7, #28]
 80060ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80060ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d302      	bcc.n	8006104 <xQueueGenericSendFromISR+0xbc>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d12f      	bne.n	8006164 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800610a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800611a:	f000 f911 	bl	8006340 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800611e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d112      	bne.n	800614e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	2b00      	cmp	r3, #0
 800612e:	d016      	beq.n	800615e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	3324      	adds	r3, #36	; 0x24
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fef7 	bl	8006f28 <xTaskRemoveFromEventList>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00e      	beq.n	800615e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	e007      	b.n	800615e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800614e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006152:	3301      	adds	r3, #1
 8006154:	b2db      	uxtb	r3, r3
 8006156:	b25a      	sxtb	r2, r3
 8006158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800615e:	2301      	movs	r3, #1
 8006160:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006162:	e001      	b.n	8006168 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006164:	2300      	movs	r3, #0
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006172:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006176:	4618      	mov	r0, r3
 8006178:	3740      	adds	r7, #64	; 0x40
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08c      	sub	sp, #48	; 0x30
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800618c:	2300      	movs	r3, #0
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <xQueueReceive+0x30>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	623b      	str	r3, [r7, #32]
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d103      	bne.n	80061be <xQueueReceive+0x3e>
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <xQueueReceive+0x42>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <xQueueReceive+0x44>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <xQueueReceive+0x5e>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	61fb      	str	r3, [r7, #28]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061de:	f001 f865 	bl	80072ac <xTaskGetSchedulerState>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d102      	bne.n	80061ee <xQueueReceive+0x6e>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <xQueueReceive+0x72>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <xQueueReceive+0x74>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <xQueueReceive+0x8e>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	61bb      	str	r3, [r7, #24]
}
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800620e:	f001 fda9 	bl	8007d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01f      	beq.n	800625e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006222:	f000 f8f7 	bl	8006414 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	1e5a      	subs	r2, r3, #1
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800622e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00f      	beq.n	8006256 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	3310      	adds	r3, #16
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fe74 	bl	8006f28 <xTaskRemoveFromEventList>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d007      	beq.n	8006256 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006246:	4b3d      	ldr	r3, [pc, #244]	; (800633c <xQueueReceive+0x1bc>)
 8006248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006256:	f001 fdb5 	bl	8007dc4 <vPortExitCritical>
				return pdPASS;
 800625a:	2301      	movs	r3, #1
 800625c:	e069      	b.n	8006332 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d103      	bne.n	800626c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006264:	f001 fdae 	bl	8007dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006268:	2300      	movs	r3, #0
 800626a:	e062      	b.n	8006332 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006272:	f107 0310 	add.w	r3, r7, #16
 8006276:	4618      	mov	r0, r3
 8006278:	f000 feba 	bl	8006ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800627c:	2301      	movs	r3, #1
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006280:	f001 fda0 	bl	8007dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006284:	f000 fc26 	bl	8006ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006288:	f001 fd6c 	bl	8007d64 <vPortEnterCritical>
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006292:	b25b      	sxtb	r3, r3
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d103      	bne.n	80062a2 <xQueueReceive+0x122>
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062a8:	b25b      	sxtb	r3, r3
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d103      	bne.n	80062b8 <xQueueReceive+0x138>
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062b8:	f001 fd84 	bl	8007dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062bc:	1d3a      	adds	r2, r7, #4
 80062be:	f107 0310 	add.w	r3, r7, #16
 80062c2:	4611      	mov	r1, r2
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 fea9 	bl	800701c <xTaskCheckForTimeOut>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d123      	bne.n	8006318 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d2:	f000 f917 	bl	8006504 <prvIsQueueEmpty>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d017      	beq.n	800630c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	3324      	adds	r3, #36	; 0x24
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	4611      	mov	r1, r2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fdcf 	bl	8006e88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ec:	f000 f8b8 	bl	8006460 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062f0:	f000 fbfe 	bl	8006af0 <xTaskResumeAll>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d189      	bne.n	800620e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80062fa:	4b10      	ldr	r3, [pc, #64]	; (800633c <xQueueReceive+0x1bc>)
 80062fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	e780      	b.n	800620e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800630c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800630e:	f000 f8a7 	bl	8006460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006312:	f000 fbed 	bl	8006af0 <xTaskResumeAll>
 8006316:	e77a      	b.n	800620e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800631a:	f000 f8a1 	bl	8006460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800631e:	f000 fbe7 	bl	8006af0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006324:	f000 f8ee 	bl	8006504 <prvIsQueueEmpty>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	f43f af6f 	beq.w	800620e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006330:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006332:	4618      	mov	r0, r3
 8006334:	3730      	adds	r7, #48	; 0x30
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	e000ed04 	.word	0xe000ed04

08006340 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10d      	bne.n	800637a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d14d      	bne.n	8006402 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	4618      	mov	r0, r3
 800636c:	f000 ffbc 	bl	80072e8 <xTaskPriorityDisinherit>
 8006370:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	609a      	str	r2, [r3, #8]
 8006378:	e043      	b.n	8006402 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d119      	bne.n	80063b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6858      	ldr	r0, [r3, #4]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006388:	461a      	mov	r2, r3
 800638a:	68b9      	ldr	r1, [r7, #8]
 800638c:	f002 f81c 	bl	80083c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	441a      	add	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d32b      	bcc.n	8006402 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	605a      	str	r2, [r3, #4]
 80063b2:	e026      	b.n	8006402 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	68d8      	ldr	r0, [r3, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	461a      	mov	r2, r3
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	f002 f802 	bl	80083c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	425b      	negs	r3, r3
 80063ce:	441a      	add	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d207      	bcs.n	80063f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	425b      	negs	r3, r3
 80063ea:	441a      	add	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d105      	bne.n	8006402 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	3b01      	subs	r3, #1
 8006400:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800640a:	697b      	ldr	r3, [r7, #20]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	d018      	beq.n	8006458 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	441a      	add	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	429a      	cmp	r2, r3
 800643e:	d303      	bcc.n	8006448 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68d9      	ldr	r1, [r3, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	461a      	mov	r2, r3
 8006452:	6838      	ldr	r0, [r7, #0]
 8006454:	f001 ffb8 	bl	80083c8 <memcpy>
	}
}
 8006458:	bf00      	nop
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006468:	f001 fc7c 	bl	8007d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006472:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006474:	e011      	b.n	800649a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	d012      	beq.n	80064a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3324      	adds	r3, #36	; 0x24
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fd50 	bl	8006f28 <xTaskRemoveFromEventList>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800648e:	f000 fe27 	bl	80070e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	3b01      	subs	r3, #1
 8006496:	b2db      	uxtb	r3, r3
 8006498:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800649a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	dce9      	bgt.n	8006476 <prvUnlockQueue+0x16>
 80064a2:	e000      	b.n	80064a6 <prvUnlockQueue+0x46>
					break;
 80064a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	22ff      	movs	r2, #255	; 0xff
 80064aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064ae:	f001 fc89 	bl	8007dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064b2:	f001 fc57 	bl	8007d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064be:	e011      	b.n	80064e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d012      	beq.n	80064ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3310      	adds	r3, #16
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fd2b 	bl	8006f28 <xTaskRemoveFromEventList>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064d8:	f000 fe02 	bl	80070e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	3b01      	subs	r3, #1
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	dce9      	bgt.n	80064c0 <prvUnlockQueue+0x60>
 80064ec:	e000      	b.n	80064f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	22ff      	movs	r2, #255	; 0xff
 80064f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80064f8:	f001 fc64 	bl	8007dc4 <vPortExitCritical>
}
 80064fc:	bf00      	nop
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800650c:	f001 fc2a 	bl	8007d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006514:	2b00      	cmp	r3, #0
 8006516:	d102      	bne.n	800651e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006518:	2301      	movs	r3, #1
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	e001      	b.n	8006522 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006522:	f001 fc4f 	bl	8007dc4 <vPortExitCritical>

	return xReturn;
 8006526:	68fb      	ldr	r3, [r7, #12]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006538:	f001 fc14 	bl	8007d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006544:	429a      	cmp	r2, r3
 8006546:	d102      	bne.n	800654e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006548:	2301      	movs	r3, #1
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	e001      	b.n	8006552 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006552:	f001 fc37 	bl	8007dc4 <vPortExitCritical>

	return xReturn;
 8006556:	68fb      	ldr	r3, [r7, #12]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	e014      	b.n	800659a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006570:	4a0f      	ldr	r2, [pc, #60]	; (80065b0 <vQueueAddToRegistry+0x50>)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10b      	bne.n	8006594 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800657c:	490c      	ldr	r1, [pc, #48]	; (80065b0 <vQueueAddToRegistry+0x50>)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006586:	4a0a      	ldr	r2, [pc, #40]	; (80065b0 <vQueueAddToRegistry+0x50>)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	4413      	add	r3, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006592:	e006      	b.n	80065a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3301      	adds	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b07      	cmp	r3, #7
 800659e:	d9e7      	bls.n	8006570 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20000a1c 	.word	0x20000a1c

080065b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065c4:	f001 fbce 	bl	8007d64 <vPortEnterCritical>
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065ce:	b25b      	sxtb	r3, r3
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d103      	bne.n	80065de <vQueueWaitForMessageRestricted+0x2a>
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065e4:	b25b      	sxtb	r3, r3
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ea:	d103      	bne.n	80065f4 <vQueueWaitForMessageRestricted+0x40>
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065f4:	f001 fbe6 	bl	8007dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d106      	bne.n	800660e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	3324      	adds	r3, #36	; 0x24
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	4618      	mov	r0, r3
 800660a:	f000 fc61 	bl	8006ed0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800660e:	6978      	ldr	r0, [r7, #20]
 8006610:	f7ff ff26 	bl	8006460 <prvUnlockQueue>
	}
 8006614:	bf00      	nop
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08e      	sub	sp, #56	; 0x38
 8006620:	af04      	add	r7, sp, #16
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800662a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10a      	bne.n	8006646 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	623b      	str	r3, [r7, #32]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <xTaskCreateStatic+0x46>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	61fb      	str	r3, [r7, #28]
}
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006662:	23bc      	movs	r3, #188	; 0xbc
 8006664:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	2bbc      	cmp	r3, #188	; 0xbc
 800666a:	d00a      	beq.n	8006682 <xTaskCreateStatic+0x66>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	61bb      	str	r3, [r7, #24]
}
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006682:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	2b00      	cmp	r3, #0
 8006688:	d01e      	beq.n	80066c8 <xTaskCreateStatic+0xac>
 800668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01b      	beq.n	80066c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006698:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	2202      	movs	r2, #2
 800669e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066a2:	2300      	movs	r3, #0
 80066a4:	9303      	str	r3, [sp, #12]
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	9302      	str	r3, [sp, #8]
 80066aa:	f107 0314 	add.w	r3, r7, #20
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f850 	bl	8006760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066c2:	f000 f8f3 	bl	80068ac <prvAddNewTaskToReadyList>
 80066c6:	e001      	b.n	80066cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066cc:	697b      	ldr	r3, [r7, #20]
	}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3728      	adds	r7, #40	; 0x28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b08c      	sub	sp, #48	; 0x30
 80066da:	af04      	add	r7, sp, #16
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 fc5c 	bl	8007fa8 <pvPortMalloc>
 80066f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00e      	beq.n	8006716 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066f8:	20bc      	movs	r0, #188	; 0xbc
 80066fa:	f001 fc55 	bl	8007fa8 <pvPortMalloc>
 80066fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
 800670c:	e005      	b.n	800671a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800670e:	6978      	ldr	r0, [r7, #20]
 8006710:	f001 fd16 	bl	8008140 <vPortFree>
 8006714:	e001      	b.n	800671a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d017      	beq.n	8006750 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006728:	88fa      	ldrh	r2, [r7, #6]
 800672a:	2300      	movs	r3, #0
 800672c:	9303      	str	r3, [sp, #12]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	9302      	str	r3, [sp, #8]
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f80e 	bl	8006760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006744:	69f8      	ldr	r0, [r7, #28]
 8006746:	f000 f8b1 	bl	80068ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800674a:	2301      	movs	r3, #1
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	e002      	b.n	8006756 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006750:	f04f 33ff 	mov.w	r3, #4294967295
 8006754:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006756:	69bb      	ldr	r3, [r7, #24]
	}
 8006758:	4618      	mov	r0, r3
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	461a      	mov	r2, r3
 8006778:	21a5      	movs	r1, #165	; 0xa5
 800677a:	f001 fe33 	bl	80083e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006788:	3b01      	subs	r3, #1
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	f023 0307 	bic.w	r3, r3, #7
 8006796:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	617b      	str	r3, [r7, #20]
}
 80067b4:	bf00      	nop
 80067b6:	e7fe      	b.n	80067b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01f      	beq.n	80067fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067be:	2300      	movs	r3, #0
 80067c0:	61fb      	str	r3, [r7, #28]
 80067c2:	e012      	b.n	80067ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	7819      	ldrb	r1, [r3, #0]
 80067cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	4413      	add	r3, r2
 80067d2:	3334      	adds	r3, #52	; 0x34
 80067d4:	460a      	mov	r2, r1
 80067d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	4413      	add	r3, r2
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d006      	beq.n	80067f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	3301      	adds	r3, #1
 80067e8:	61fb      	str	r3, [r7, #28]
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	2b0f      	cmp	r3, #15
 80067ee:	d9e9      	bls.n	80067c4 <prvInitialiseNewTask+0x64>
 80067f0:	e000      	b.n	80067f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80067f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067fc:	e003      	b.n	8006806 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006808:	2b37      	cmp	r3, #55	; 0x37
 800680a:	d901      	bls.n	8006810 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800680c:	2337      	movs	r3, #55	; 0x37
 800680e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006814:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800681a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	2200      	movs	r2, #0
 8006820:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	3304      	adds	r3, #4
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff f978 	bl	8005b1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	3318      	adds	r3, #24
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff f973 	bl	8005b1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800683a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800684a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	2200      	movs	r2, #0
 8006858:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	3354      	adds	r3, #84	; 0x54
 8006860:	2260      	movs	r2, #96	; 0x60
 8006862:	2100      	movs	r1, #0
 8006864:	4618      	mov	r0, r3
 8006866:	f001 fdbd 	bl	80083e4 <memset>
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	4a0c      	ldr	r2, [pc, #48]	; (80068a0 <prvInitialiseNewTask+0x140>)
 800686e:	659a      	str	r2, [r3, #88]	; 0x58
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	4a0c      	ldr	r2, [pc, #48]	; (80068a4 <prvInitialiseNewTask+0x144>)
 8006874:	65da      	str	r2, [r3, #92]	; 0x5c
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	4a0b      	ldr	r2, [pc, #44]	; (80068a8 <prvInitialiseNewTask+0x148>)
 800687a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	68f9      	ldr	r1, [r7, #12]
 8006880:	69b8      	ldr	r0, [r7, #24]
 8006882:	f001 f941 	bl	8007b08 <pxPortInitialiseStack>
 8006886:	4602      	mov	r2, r0
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006896:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006898:	bf00      	nop
 800689a:	3720      	adds	r7, #32
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	08008648 	.word	0x08008648
 80068a4:	08008668 	.word	0x08008668
 80068a8:	08008628 	.word	0x08008628

080068ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068b4:	f001 fa56 	bl	8007d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068b8:	4b2d      	ldr	r3, [pc, #180]	; (8006970 <prvAddNewTaskToReadyList+0xc4>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3301      	adds	r3, #1
 80068be:	4a2c      	ldr	r2, [pc, #176]	; (8006970 <prvAddNewTaskToReadyList+0xc4>)
 80068c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068c2:	4b2c      	ldr	r3, [pc, #176]	; (8006974 <prvAddNewTaskToReadyList+0xc8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068ca:	4a2a      	ldr	r2, [pc, #168]	; (8006974 <prvAddNewTaskToReadyList+0xc8>)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068d0:	4b27      	ldr	r3, [pc, #156]	; (8006970 <prvAddNewTaskToReadyList+0xc4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d110      	bne.n	80068fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068d8:	f000 fc26 	bl	8007128 <prvInitialiseTaskLists>
 80068dc:	e00d      	b.n	80068fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068de:	4b26      	ldr	r3, [pc, #152]	; (8006978 <prvAddNewTaskToReadyList+0xcc>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068e6:	4b23      	ldr	r3, [pc, #140]	; (8006974 <prvAddNewTaskToReadyList+0xc8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d802      	bhi.n	80068fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068f4:	4a1f      	ldr	r2, [pc, #124]	; (8006974 <prvAddNewTaskToReadyList+0xc8>)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068fa:	4b20      	ldr	r3, [pc, #128]	; (800697c <prvAddNewTaskToReadyList+0xd0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3301      	adds	r3, #1
 8006900:	4a1e      	ldr	r2, [pc, #120]	; (800697c <prvAddNewTaskToReadyList+0xd0>)
 8006902:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006904:	4b1d      	ldr	r3, [pc, #116]	; (800697c <prvAddNewTaskToReadyList+0xd0>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006910:	4b1b      	ldr	r3, [pc, #108]	; (8006980 <prvAddNewTaskToReadyList+0xd4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d903      	bls.n	8006920 <prvAddNewTaskToReadyList+0x74>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	4a18      	ldr	r2, [pc, #96]	; (8006980 <prvAddNewTaskToReadyList+0xd4>)
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4a15      	ldr	r2, [pc, #84]	; (8006984 <prvAddNewTaskToReadyList+0xd8>)
 800692e:	441a      	add	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3304      	adds	r3, #4
 8006934:	4619      	mov	r1, r3
 8006936:	4610      	mov	r0, r2
 8006938:	f7ff f8fd 	bl	8005b36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800693c:	f001 fa42 	bl	8007dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006940:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <prvAddNewTaskToReadyList+0xcc>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00e      	beq.n	8006966 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <prvAddNewTaskToReadyList+0xc8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	429a      	cmp	r2, r3
 8006954:	d207      	bcs.n	8006966 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006956:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <prvAddNewTaskToReadyList+0xdc>)
 8006958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000f30 	.word	0x20000f30
 8006974:	20000a5c 	.word	0x20000a5c
 8006978:	20000f3c 	.word	0x20000f3c
 800697c:	20000f4c 	.word	0x20000f4c
 8006980:	20000f38 	.word	0x20000f38
 8006984:	20000a60 	.word	0x20000a60
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d017      	beq.n	80069ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800699e:	4b13      	ldr	r3, [pc, #76]	; (80069ec <vTaskDelay+0x60>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <vTaskDelay+0x30>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	60bb      	str	r3, [r7, #8]
}
 80069b8:	bf00      	nop
 80069ba:	e7fe      	b.n	80069ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069bc:	f000 f88a 	bl	8006ad4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069c0:	2100      	movs	r1, #0
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fcfe 	bl	80073c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069c8:	f000 f892 	bl	8006af0 <xTaskResumeAll>
 80069cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d107      	bne.n	80069e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80069d4:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <vTaskDelay+0x64>)
 80069d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20000f58 	.word	0x20000f58
 80069f0:	e000ed04 	.word	0xe000ed04

080069f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	; 0x28
 80069f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a02:	463a      	mov	r2, r7
 8006a04:	1d39      	adds	r1, r7, #4
 8006a06:	f107 0308 	add.w	r3, r7, #8
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff f832 	bl	8005a74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	9202      	str	r2, [sp, #8]
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	460a      	mov	r2, r1
 8006a22:	4924      	ldr	r1, [pc, #144]	; (8006ab4 <vTaskStartScheduler+0xc0>)
 8006a24:	4824      	ldr	r0, [pc, #144]	; (8006ab8 <vTaskStartScheduler+0xc4>)
 8006a26:	f7ff fdf9 	bl	800661c <xTaskCreateStatic>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4a23      	ldr	r2, [pc, #140]	; (8006abc <vTaskStartScheduler+0xc8>)
 8006a2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a30:	4b22      	ldr	r3, [pc, #136]	; (8006abc <vTaskStartScheduler+0xc8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	e001      	b.n	8006a42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d102      	bne.n	8006a4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a48:	f000 fd10 	bl	800746c <xTimerCreateTimerTask>
 8006a4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d11b      	bne.n	8006a8c <vTaskStartScheduler+0x98>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	613b      	str	r3, [r7, #16]
}
 8006a66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a68:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <vTaskStartScheduler+0xcc>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3354      	adds	r3, #84	; 0x54
 8006a6e:	4a15      	ldr	r2, [pc, #84]	; (8006ac4 <vTaskStartScheduler+0xd0>)
 8006a70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a72:	4b15      	ldr	r3, [pc, #84]	; (8006ac8 <vTaskStartScheduler+0xd4>)
 8006a74:	f04f 32ff 	mov.w	r2, #4294967295
 8006a78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a7a:	4b14      	ldr	r3, [pc, #80]	; (8006acc <vTaskStartScheduler+0xd8>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a80:	4b13      	ldr	r3, [pc, #76]	; (8006ad0 <vTaskStartScheduler+0xdc>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a86:	f001 f8cb 	bl	8007c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a8a:	e00e      	b.n	8006aaa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a92:	d10a      	bne.n	8006aaa <vTaskStartScheduler+0xb6>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	60fb      	str	r3, [r7, #12]
}
 8006aa6:	bf00      	nop
 8006aa8:	e7fe      	b.n	8006aa8 <vTaskStartScheduler+0xb4>
}
 8006aaa:	bf00      	nop
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	080085a8 	.word	0x080085a8
 8006ab8:	080070f9 	.word	0x080070f9
 8006abc:	20000f54 	.word	0x20000f54
 8006ac0:	20000a5c 	.word	0x20000a5c
 8006ac4:	20000014 	.word	0x20000014
 8006ac8:	20000f50 	.word	0x20000f50
 8006acc:	20000f3c 	.word	0x20000f3c
 8006ad0:	20000f34 	.word	0x20000f34

08006ad4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ad8:	4b04      	ldr	r3, [pc, #16]	; (8006aec <vTaskSuspendAll+0x18>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3301      	adds	r3, #1
 8006ade:	4a03      	ldr	r2, [pc, #12]	; (8006aec <vTaskSuspendAll+0x18>)
 8006ae0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ae2:	bf00      	nop
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	20000f58 	.word	0x20000f58

08006af0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006afe:	4b42      	ldr	r3, [pc, #264]	; (8006c08 <xTaskResumeAll+0x118>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <xTaskResumeAll+0x2c>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	603b      	str	r3, [r7, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	e7fe      	b.n	8006b1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b1c:	f001 f922 	bl	8007d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b20:	4b39      	ldr	r3, [pc, #228]	; (8006c08 <xTaskResumeAll+0x118>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	4a38      	ldr	r2, [pc, #224]	; (8006c08 <xTaskResumeAll+0x118>)
 8006b28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b2a:	4b37      	ldr	r3, [pc, #220]	; (8006c08 <xTaskResumeAll+0x118>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d162      	bne.n	8006bf8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b32:	4b36      	ldr	r3, [pc, #216]	; (8006c0c <xTaskResumeAll+0x11c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d05e      	beq.n	8006bf8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b3a:	e02f      	b.n	8006b9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b3c:	4b34      	ldr	r3, [pc, #208]	; (8006c10 <xTaskResumeAll+0x120>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3318      	adds	r3, #24
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7ff f851 	bl	8005bf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3304      	adds	r3, #4
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff f84c 	bl	8005bf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5c:	4b2d      	ldr	r3, [pc, #180]	; (8006c14 <xTaskResumeAll+0x124>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d903      	bls.n	8006b6c <xTaskResumeAll+0x7c>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	4a2a      	ldr	r2, [pc, #168]	; (8006c14 <xTaskResumeAll+0x124>)
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4a27      	ldr	r2, [pc, #156]	; (8006c18 <xTaskResumeAll+0x128>)
 8006b7a:	441a      	add	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f7fe ffd7 	bl	8005b36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8c:	4b23      	ldr	r3, [pc, #140]	; (8006c1c <xTaskResumeAll+0x12c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d302      	bcc.n	8006b9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006b96:	4b22      	ldr	r3, [pc, #136]	; (8006c20 <xTaskResumeAll+0x130>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b9c:	4b1c      	ldr	r3, [pc, #112]	; (8006c10 <xTaskResumeAll+0x120>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1cb      	bne.n	8006b3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006baa:	f000 fb5f 	bl	800726c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bae:	4b1d      	ldr	r3, [pc, #116]	; (8006c24 <xTaskResumeAll+0x134>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d010      	beq.n	8006bdc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bba:	f000 f847 	bl	8006c4c <xTaskIncrementTick>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006bc4:	4b16      	ldr	r3, [pc, #88]	; (8006c20 <xTaskResumeAll+0x130>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f1      	bne.n	8006bba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006bd6:	4b13      	ldr	r3, [pc, #76]	; (8006c24 <xTaskResumeAll+0x134>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bdc:	4b10      	ldr	r3, [pc, #64]	; (8006c20 <xTaskResumeAll+0x130>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d009      	beq.n	8006bf8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006be8:	4b0f      	ldr	r3, [pc, #60]	; (8006c28 <xTaskResumeAll+0x138>)
 8006bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bf8:	f001 f8e4 	bl	8007dc4 <vPortExitCritical>

	return xAlreadyYielded;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000f58 	.word	0x20000f58
 8006c0c:	20000f30 	.word	0x20000f30
 8006c10:	20000ef0 	.word	0x20000ef0
 8006c14:	20000f38 	.word	0x20000f38
 8006c18:	20000a60 	.word	0x20000a60
 8006c1c:	20000a5c 	.word	0x20000a5c
 8006c20:	20000f44 	.word	0x20000f44
 8006c24:	20000f40 	.word	0x20000f40
 8006c28:	e000ed04 	.word	0xe000ed04

08006c2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c32:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <xTaskGetTickCount+0x1c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c38:	687b      	ldr	r3, [r7, #4]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	20000f34 	.word	0x20000f34

08006c4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c52:	2300      	movs	r3, #0
 8006c54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c56:	4b4f      	ldr	r3, [pc, #316]	; (8006d94 <xTaskIncrementTick+0x148>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f040 808f 	bne.w	8006d7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c60:	4b4d      	ldr	r3, [pc, #308]	; (8006d98 <xTaskIncrementTick+0x14c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3301      	adds	r3, #1
 8006c66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c68:	4a4b      	ldr	r2, [pc, #300]	; (8006d98 <xTaskIncrementTick+0x14c>)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d120      	bne.n	8006cb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c74:	4b49      	ldr	r3, [pc, #292]	; (8006d9c <xTaskIncrementTick+0x150>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <xTaskIncrementTick+0x48>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	603b      	str	r3, [r7, #0]
}
 8006c90:	bf00      	nop
 8006c92:	e7fe      	b.n	8006c92 <xTaskIncrementTick+0x46>
 8006c94:	4b41      	ldr	r3, [pc, #260]	; (8006d9c <xTaskIncrementTick+0x150>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	4b41      	ldr	r3, [pc, #260]	; (8006da0 <xTaskIncrementTick+0x154>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a3f      	ldr	r2, [pc, #252]	; (8006d9c <xTaskIncrementTick+0x150>)
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	4a3f      	ldr	r2, [pc, #252]	; (8006da0 <xTaskIncrementTick+0x154>)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	4b3e      	ldr	r3, [pc, #248]	; (8006da4 <xTaskIncrementTick+0x158>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3301      	adds	r3, #1
 8006cae:	4a3d      	ldr	r2, [pc, #244]	; (8006da4 <xTaskIncrementTick+0x158>)
 8006cb0:	6013      	str	r3, [r2, #0]
 8006cb2:	f000 fadb 	bl	800726c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cb6:	4b3c      	ldr	r3, [pc, #240]	; (8006da8 <xTaskIncrementTick+0x15c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d349      	bcc.n	8006d54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cc0:	4b36      	ldr	r3, [pc, #216]	; (8006d9c <xTaskIncrementTick+0x150>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d104      	bne.n	8006cd4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cca:	4b37      	ldr	r3, [pc, #220]	; (8006da8 <xTaskIncrementTick+0x15c>)
 8006ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd0:	601a      	str	r2, [r3, #0]
					break;
 8006cd2:	e03f      	b.n	8006d54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cd4:	4b31      	ldr	r3, [pc, #196]	; (8006d9c <xTaskIncrementTick+0x150>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d203      	bcs.n	8006cf4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cec:	4a2e      	ldr	r2, [pc, #184]	; (8006da8 <xTaskIncrementTick+0x15c>)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006cf2:	e02f      	b.n	8006d54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fe ff79 	bl	8005bf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d004      	beq.n	8006d10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	3318      	adds	r3, #24
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe ff70 	bl	8005bf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d14:	4b25      	ldr	r3, [pc, #148]	; (8006dac <xTaskIncrementTick+0x160>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d903      	bls.n	8006d24 <xTaskIncrementTick+0xd8>
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	4a22      	ldr	r2, [pc, #136]	; (8006dac <xTaskIncrementTick+0x160>)
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4a1f      	ldr	r2, [pc, #124]	; (8006db0 <xTaskIncrementTick+0x164>)
 8006d32:	441a      	add	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f7fe fefb 	bl	8005b36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d44:	4b1b      	ldr	r3, [pc, #108]	; (8006db4 <xTaskIncrementTick+0x168>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d3b8      	bcc.n	8006cc0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d52:	e7b5      	b.n	8006cc0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d54:	4b17      	ldr	r3, [pc, #92]	; (8006db4 <xTaskIncrementTick+0x168>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5a:	4915      	ldr	r1, [pc, #84]	; (8006db0 <xTaskIncrementTick+0x164>)
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	440b      	add	r3, r1
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d901      	bls.n	8006d70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d70:	4b11      	ldr	r3, [pc, #68]	; (8006db8 <xTaskIncrementTick+0x16c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e004      	b.n	8006d88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d7e:	4b0f      	ldr	r3, [pc, #60]	; (8006dbc <xTaskIncrementTick+0x170>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3301      	adds	r3, #1
 8006d84:	4a0d      	ldr	r2, [pc, #52]	; (8006dbc <xTaskIncrementTick+0x170>)
 8006d86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d88:	697b      	ldr	r3, [r7, #20]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20000f58 	.word	0x20000f58
 8006d98:	20000f34 	.word	0x20000f34
 8006d9c:	20000ee8 	.word	0x20000ee8
 8006da0:	20000eec 	.word	0x20000eec
 8006da4:	20000f48 	.word	0x20000f48
 8006da8:	20000f50 	.word	0x20000f50
 8006dac:	20000f38 	.word	0x20000f38
 8006db0:	20000a60 	.word	0x20000a60
 8006db4:	20000a5c 	.word	0x20000a5c
 8006db8:	20000f44 	.word	0x20000f44
 8006dbc:	20000f40 	.word	0x20000f40

08006dc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dc6:	4b2a      	ldr	r3, [pc, #168]	; (8006e70 <vTaskSwitchContext+0xb0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dce:	4b29      	ldr	r3, [pc, #164]	; (8006e74 <vTaskSwitchContext+0xb4>)
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dd4:	e046      	b.n	8006e64 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006dd6:	4b27      	ldr	r3, [pc, #156]	; (8006e74 <vTaskSwitchContext+0xb4>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ddc:	4b26      	ldr	r3, [pc, #152]	; (8006e78 <vTaskSwitchContext+0xb8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	e010      	b.n	8006e06 <vTaskSwitchContext+0x46>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <vTaskSwitchContext+0x40>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	607b      	str	r3, [r7, #4]
}
 8006dfc:	bf00      	nop
 8006dfe:	e7fe      	b.n	8006dfe <vTaskSwitchContext+0x3e>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	491d      	ldr	r1, [pc, #116]	; (8006e7c <vTaskSwitchContext+0xbc>)
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	440b      	add	r3, r1
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d0e4      	beq.n	8006de4 <vTaskSwitchContext+0x24>
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4a15      	ldr	r2, [pc, #84]	; (8006e7c <vTaskSwitchContext+0xbc>)
 8006e26:	4413      	add	r3, r2
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	605a      	str	r2, [r3, #4]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d104      	bne.n	8006e4a <vTaskSwitchContext+0x8a>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	605a      	str	r2, [r3, #4]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	4a0b      	ldr	r2, [pc, #44]	; (8006e80 <vTaskSwitchContext+0xc0>)
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	4a08      	ldr	r2, [pc, #32]	; (8006e78 <vTaskSwitchContext+0xb8>)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e5a:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <vTaskSwitchContext+0xc0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3354      	adds	r3, #84	; 0x54
 8006e60:	4a08      	ldr	r2, [pc, #32]	; (8006e84 <vTaskSwitchContext+0xc4>)
 8006e62:	6013      	str	r3, [r2, #0]
}
 8006e64:	bf00      	nop
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	20000f58 	.word	0x20000f58
 8006e74:	20000f44 	.word	0x20000f44
 8006e78:	20000f38 	.word	0x20000f38
 8006e7c:	20000a60 	.word	0x20000a60
 8006e80:	20000a5c 	.word	0x20000a5c
 8006e84:	20000014 	.word	0x20000014

08006e88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	60fb      	str	r3, [r7, #12]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eae:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <vTaskPlaceOnEventList+0x44>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3318      	adds	r3, #24
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fe fe61 	bl	8005b7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	6838      	ldr	r0, [r7, #0]
 8006ec0:	f000 fa80 	bl	80073c4 <prvAddCurrentTaskToDelayedList>
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000a5c 	.word	0x20000a5c

08006ed0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	617b      	str	r3, [r7, #20]
}
 8006ef4:	bf00      	nop
 8006ef6:	e7fe      	b.n	8006ef6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <vTaskPlaceOnEventListRestricted+0x54>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3318      	adds	r3, #24
 8006efe:	4619      	mov	r1, r3
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7fe fe18 	bl	8005b36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	68b8      	ldr	r0, [r7, #8]
 8006f16:	f000 fa55 	bl	80073c4 <prvAddCurrentTaskToDelayedList>
	}
 8006f1a:	bf00      	nop
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000a5c 	.word	0x20000a5c

08006f28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	60fb      	str	r3, [r7, #12]
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	3318      	adds	r3, #24
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe fe49 	bl	8005bf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f5e:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <xTaskRemoveFromEventList+0xb0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d11d      	bne.n	8006fa2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fe40 	bl	8005bf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f74:	4b19      	ldr	r3, [pc, #100]	; (8006fdc <xTaskRemoveFromEventList+0xb4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d903      	bls.n	8006f84 <xTaskRemoveFromEventList+0x5c>
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	4a16      	ldr	r2, [pc, #88]	; (8006fdc <xTaskRemoveFromEventList+0xb4>)
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4a13      	ldr	r2, [pc, #76]	; (8006fe0 <xTaskRemoveFromEventList+0xb8>)
 8006f92:	441a      	add	r2, r3
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	3304      	adds	r3, #4
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	f7fe fdcb 	bl	8005b36 <vListInsertEnd>
 8006fa0:	e005      	b.n	8006fae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	3318      	adds	r3, #24
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	480e      	ldr	r0, [pc, #56]	; (8006fe4 <xTaskRemoveFromEventList+0xbc>)
 8006faa:	f7fe fdc4 	bl	8005b36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	; (8006fe8 <xTaskRemoveFromEventList+0xc0>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d905      	bls.n	8006fc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <xTaskRemoveFromEventList+0xc4>)
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	e001      	b.n	8006fcc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fcc:	697b      	ldr	r3, [r7, #20]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000f58 	.word	0x20000f58
 8006fdc:	20000f38 	.word	0x20000f38
 8006fe0:	20000a60 	.word	0x20000a60
 8006fe4:	20000ef0 	.word	0x20000ef0
 8006fe8:	20000a5c 	.word	0x20000a5c
 8006fec:	20000f44 	.word	0x20000f44

08006ff0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ff8:	4b06      	ldr	r3, [pc, #24]	; (8007014 <vTaskInternalSetTimeOutState+0x24>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <vTaskInternalSetTimeOutState+0x28>)
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	605a      	str	r2, [r3, #4]
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	20000f48 	.word	0x20000f48
 8007018:	20000f34 	.word	0x20000f34

0800701c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	613b      	str	r3, [r7, #16]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	60fb      	str	r3, [r7, #12]
}
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800705e:	f000 fe81 	bl	8007d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007062:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <xTaskCheckForTimeOut+0xbc>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707a:	d102      	bne.n	8007082 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800707c:	2300      	movs	r3, #0
 800707e:	61fb      	str	r3, [r7, #28]
 8007080:	e023      	b.n	80070ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b15      	ldr	r3, [pc, #84]	; (80070dc <xTaskCheckForTimeOut+0xc0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d007      	beq.n	800709e <xTaskCheckForTimeOut+0x82>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	429a      	cmp	r2, r3
 8007096:	d302      	bcc.n	800709e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007098:	2301      	movs	r3, #1
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	e015      	b.n	80070ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d20b      	bcs.n	80070c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	1ad2      	subs	r2, r2, r3
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff ff9b 	bl	8006ff0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	e004      	b.n	80070ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070c6:	2301      	movs	r3, #1
 80070c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070ca:	f000 fe7b 	bl	8007dc4 <vPortExitCritical>

	return xReturn;
 80070ce:	69fb      	ldr	r3, [r7, #28]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3720      	adds	r7, #32
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20000f34 	.word	0x20000f34
 80070dc:	20000f48 	.word	0x20000f48

080070e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070e4:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <vTaskMissedYield+0x14>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	601a      	str	r2, [r3, #0]
}
 80070ea:	bf00      	nop
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	20000f44 	.word	0x20000f44

080070f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007100:	f000 f852 	bl	80071a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007104:	4b06      	ldr	r3, [pc, #24]	; (8007120 <prvIdleTask+0x28>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d9f9      	bls.n	8007100 <prvIdleTask+0x8>
			{
				taskYIELD();
 800710c:	4b05      	ldr	r3, [pc, #20]	; (8007124 <prvIdleTask+0x2c>)
 800710e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800711c:	e7f0      	b.n	8007100 <prvIdleTask+0x8>
 800711e:	bf00      	nop
 8007120:	20000a60 	.word	0x20000a60
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800712e:	2300      	movs	r3, #0
 8007130:	607b      	str	r3, [r7, #4]
 8007132:	e00c      	b.n	800714e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4a12      	ldr	r2, [pc, #72]	; (8007188 <prvInitialiseTaskLists+0x60>)
 8007140:	4413      	add	r3, r2
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fcca 	bl	8005adc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3301      	adds	r3, #1
 800714c:	607b      	str	r3, [r7, #4]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b37      	cmp	r3, #55	; 0x37
 8007152:	d9ef      	bls.n	8007134 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007154:	480d      	ldr	r0, [pc, #52]	; (800718c <prvInitialiseTaskLists+0x64>)
 8007156:	f7fe fcc1 	bl	8005adc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800715a:	480d      	ldr	r0, [pc, #52]	; (8007190 <prvInitialiseTaskLists+0x68>)
 800715c:	f7fe fcbe 	bl	8005adc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007160:	480c      	ldr	r0, [pc, #48]	; (8007194 <prvInitialiseTaskLists+0x6c>)
 8007162:	f7fe fcbb 	bl	8005adc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007166:	480c      	ldr	r0, [pc, #48]	; (8007198 <prvInitialiseTaskLists+0x70>)
 8007168:	f7fe fcb8 	bl	8005adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800716c:	480b      	ldr	r0, [pc, #44]	; (800719c <prvInitialiseTaskLists+0x74>)
 800716e:	f7fe fcb5 	bl	8005adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007172:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <prvInitialiseTaskLists+0x78>)
 8007174:	4a05      	ldr	r2, [pc, #20]	; (800718c <prvInitialiseTaskLists+0x64>)
 8007176:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007178:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <prvInitialiseTaskLists+0x7c>)
 800717a:	4a05      	ldr	r2, [pc, #20]	; (8007190 <prvInitialiseTaskLists+0x68>)
 800717c:	601a      	str	r2, [r3, #0]
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20000a60 	.word	0x20000a60
 800718c:	20000ec0 	.word	0x20000ec0
 8007190:	20000ed4 	.word	0x20000ed4
 8007194:	20000ef0 	.word	0x20000ef0
 8007198:	20000f04 	.word	0x20000f04
 800719c:	20000f1c 	.word	0x20000f1c
 80071a0:	20000ee8 	.word	0x20000ee8
 80071a4:	20000eec 	.word	0x20000eec

080071a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071ae:	e019      	b.n	80071e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071b0:	f000 fdd8 	bl	8007d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b4:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <prvCheckTasksWaitingTermination+0x50>)
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3304      	adds	r3, #4
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe fd15 	bl	8005bf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071c6:	4b0d      	ldr	r3, [pc, #52]	; (80071fc <prvCheckTasksWaitingTermination+0x54>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	4a0b      	ldr	r2, [pc, #44]	; (80071fc <prvCheckTasksWaitingTermination+0x54>)
 80071ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071d0:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <prvCheckTasksWaitingTermination+0x58>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	4a0a      	ldr	r2, [pc, #40]	; (8007200 <prvCheckTasksWaitingTermination+0x58>)
 80071d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071da:	f000 fdf3 	bl	8007dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f810 	bl	8007204 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071e4:	4b06      	ldr	r3, [pc, #24]	; (8007200 <prvCheckTasksWaitingTermination+0x58>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e1      	bne.n	80071b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071ec:	bf00      	nop
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20000f04 	.word	0x20000f04
 80071fc:	20000f30 	.word	0x20000f30
 8007200:	20000f18 	.word	0x20000f18

08007204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3354      	adds	r3, #84	; 0x54
 8007210:	4618      	mov	r0, r3
 8007212:	f001 f8fd 	bl	8008410 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800721c:	2b00      	cmp	r3, #0
 800721e:	d108      	bne.n	8007232 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007224:	4618      	mov	r0, r3
 8007226:	f000 ff8b 	bl	8008140 <vPortFree>
				vPortFree( pxTCB );
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 ff88 	bl	8008140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007230:	e018      	b.n	8007264 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007238:	2b01      	cmp	r3, #1
 800723a:	d103      	bne.n	8007244 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 ff7f 	bl	8008140 <vPortFree>
	}
 8007242:	e00f      	b.n	8007264 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800724a:	2b02      	cmp	r3, #2
 800724c:	d00a      	beq.n	8007264 <prvDeleteTCB+0x60>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	60fb      	str	r3, [r7, #12]
}
 8007260:	bf00      	nop
 8007262:	e7fe      	b.n	8007262 <prvDeleteTCB+0x5e>
	}
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007272:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <prvResetNextTaskUnblockTime+0x38>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800727c:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <prvResetNextTaskUnblockTime+0x3c>)
 800727e:	f04f 32ff 	mov.w	r2, #4294967295
 8007282:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007284:	e008      	b.n	8007298 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007286:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <prvResetNextTaskUnblockTime+0x38>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	4a04      	ldr	r2, [pc, #16]	; (80072a8 <prvResetNextTaskUnblockTime+0x3c>)
 8007296:	6013      	str	r3, [r2, #0]
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	20000ee8 	.word	0x20000ee8
 80072a8:	20000f50 	.word	0x20000f50

080072ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072b2:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <xTaskGetSchedulerState+0x34>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d102      	bne.n	80072c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072ba:	2301      	movs	r3, #1
 80072bc:	607b      	str	r3, [r7, #4]
 80072be:	e008      	b.n	80072d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072c0:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <xTaskGetSchedulerState+0x38>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d102      	bne.n	80072ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072c8:	2302      	movs	r3, #2
 80072ca:	607b      	str	r3, [r7, #4]
 80072cc:	e001      	b.n	80072d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072ce:	2300      	movs	r3, #0
 80072d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072d2:	687b      	ldr	r3, [r7, #4]
	}
 80072d4:	4618      	mov	r0, r3
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	20000f3c 	.word	0x20000f3c
 80072e4:	20000f58 	.word	0x20000f58

080072e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072f4:	2300      	movs	r3, #0
 80072f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d056      	beq.n	80073ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072fe:	4b2e      	ldr	r3, [pc, #184]	; (80073b8 <xTaskPriorityDisinherit+0xd0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	429a      	cmp	r2, r3
 8007306:	d00a      	beq.n	800731e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60fb      	str	r3, [r7, #12]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	60bb      	str	r3, [r7, #8]
}
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007340:	1e5a      	subs	r2, r3, #1
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734e:	429a      	cmp	r2, r3
 8007350:	d02c      	beq.n	80073ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007356:	2b00      	cmp	r3, #0
 8007358:	d128      	bne.n	80073ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	3304      	adds	r3, #4
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe fc46 	bl	8005bf0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737c:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <xTaskPriorityDisinherit+0xd4>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d903      	bls.n	800738c <xTaskPriorityDisinherit+0xa4>
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	4a0c      	ldr	r2, [pc, #48]	; (80073bc <xTaskPriorityDisinherit+0xd4>)
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4a09      	ldr	r2, [pc, #36]	; (80073c0 <xTaskPriorityDisinherit+0xd8>)
 800739a:	441a      	add	r2, r3
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	3304      	adds	r3, #4
 80073a0:	4619      	mov	r1, r3
 80073a2:	4610      	mov	r0, r2
 80073a4:	f7fe fbc7 	bl	8005b36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073ac:	697b      	ldr	r3, [r7, #20]
	}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000a5c 	.word	0x20000a5c
 80073bc:	20000f38 	.word	0x20000f38
 80073c0:	20000a60 	.word	0x20000a60

080073c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073ce:	4b21      	ldr	r3, [pc, #132]	; (8007454 <prvAddCurrentTaskToDelayedList+0x90>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073d4:	4b20      	ldr	r3, [pc, #128]	; (8007458 <prvAddCurrentTaskToDelayedList+0x94>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3304      	adds	r3, #4
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fe fc08 	bl	8005bf0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e6:	d10a      	bne.n	80073fe <prvAddCurrentTaskToDelayedList+0x3a>
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d007      	beq.n	80073fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073ee:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <prvAddCurrentTaskToDelayedList+0x94>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3304      	adds	r3, #4
 80073f4:	4619      	mov	r1, r3
 80073f6:	4819      	ldr	r0, [pc, #100]	; (800745c <prvAddCurrentTaskToDelayedList+0x98>)
 80073f8:	f7fe fb9d 	bl	8005b36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073fc:	e026      	b.n	800744c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4413      	add	r3, r2
 8007404:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007406:	4b14      	ldr	r3, [pc, #80]	; (8007458 <prvAddCurrentTaskToDelayedList+0x94>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	429a      	cmp	r2, r3
 8007414:	d209      	bcs.n	800742a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007416:	4b12      	ldr	r3, [pc, #72]	; (8007460 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b0f      	ldr	r3, [pc, #60]	; (8007458 <prvAddCurrentTaskToDelayedList+0x94>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3304      	adds	r3, #4
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	f7fe fbab 	bl	8005b7e <vListInsert>
}
 8007428:	e010      	b.n	800744c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800742a:	4b0e      	ldr	r3, [pc, #56]	; (8007464 <prvAddCurrentTaskToDelayedList+0xa0>)
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <prvAddCurrentTaskToDelayedList+0x94>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3304      	adds	r3, #4
 8007434:	4619      	mov	r1, r3
 8007436:	4610      	mov	r0, r2
 8007438:	f7fe fba1 	bl	8005b7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800743c:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <prvAddCurrentTaskToDelayedList+0xa4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	429a      	cmp	r2, r3
 8007444:	d202      	bcs.n	800744c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007446:	4a08      	ldr	r2, [pc, #32]	; (8007468 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	6013      	str	r3, [r2, #0]
}
 800744c:	bf00      	nop
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	20000f34 	.word	0x20000f34
 8007458:	20000a5c 	.word	0x20000a5c
 800745c:	20000f1c 	.word	0x20000f1c
 8007460:	20000eec 	.word	0x20000eec
 8007464:	20000ee8 	.word	0x20000ee8
 8007468:	20000f50 	.word	0x20000f50

0800746c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08a      	sub	sp, #40	; 0x28
 8007470:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007476:	f000 fb07 	bl	8007a88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800747a:	4b1c      	ldr	r3, [pc, #112]	; (80074ec <xTimerCreateTimerTask+0x80>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d021      	beq.n	80074c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007486:	2300      	movs	r3, #0
 8007488:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800748a:	1d3a      	adds	r2, r7, #4
 800748c:	f107 0108 	add.w	r1, r7, #8
 8007490:	f107 030c 	add.w	r3, r7, #12
 8007494:	4618      	mov	r0, r3
 8007496:	f7fe fb07 	bl	8005aa8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	9202      	str	r2, [sp, #8]
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	2302      	movs	r3, #2
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	2300      	movs	r3, #0
 80074aa:	460a      	mov	r2, r1
 80074ac:	4910      	ldr	r1, [pc, #64]	; (80074f0 <xTimerCreateTimerTask+0x84>)
 80074ae:	4811      	ldr	r0, [pc, #68]	; (80074f4 <xTimerCreateTimerTask+0x88>)
 80074b0:	f7ff f8b4 	bl	800661c <xTaskCreateStatic>
 80074b4:	4603      	mov	r3, r0
 80074b6:	4a10      	ldr	r2, [pc, #64]	; (80074f8 <xTimerCreateTimerTask+0x8c>)
 80074b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074ba:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <xTimerCreateTimerTask+0x8c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074c2:	2301      	movs	r3, #1
 80074c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	613b      	str	r3, [r7, #16]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80074e2:	697b      	ldr	r3, [r7, #20]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	20000f8c 	.word	0x20000f8c
 80074f0:	080085b0 	.word	0x080085b0
 80074f4:	08007631 	.word	0x08007631
 80074f8:	20000f90 	.word	0x20000f90

080074fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08a      	sub	sp, #40	; 0x28
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800750a:	2300      	movs	r3, #0
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10a      	bne.n	800752a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	623b      	str	r3, [r7, #32]
}
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800752a:	4b1a      	ldr	r3, [pc, #104]	; (8007594 <xTimerGenericCommand+0x98>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d02a      	beq.n	8007588 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2b05      	cmp	r3, #5
 8007542:	dc18      	bgt.n	8007576 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007544:	f7ff feb2 	bl	80072ac <xTaskGetSchedulerState>
 8007548:	4603      	mov	r3, r0
 800754a:	2b02      	cmp	r3, #2
 800754c:	d109      	bne.n	8007562 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800754e:	4b11      	ldr	r3, [pc, #68]	; (8007594 <xTimerGenericCommand+0x98>)
 8007550:	6818      	ldr	r0, [r3, #0]
 8007552:	f107 0110 	add.w	r1, r7, #16
 8007556:	2300      	movs	r3, #0
 8007558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800755a:	f7fe fc77 	bl	8005e4c <xQueueGenericSend>
 800755e:	6278      	str	r0, [r7, #36]	; 0x24
 8007560:	e012      	b.n	8007588 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007562:	4b0c      	ldr	r3, [pc, #48]	; (8007594 <xTimerGenericCommand+0x98>)
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	f107 0110 	add.w	r1, r7, #16
 800756a:	2300      	movs	r3, #0
 800756c:	2200      	movs	r2, #0
 800756e:	f7fe fc6d 	bl	8005e4c <xQueueGenericSend>
 8007572:	6278      	str	r0, [r7, #36]	; 0x24
 8007574:	e008      	b.n	8007588 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007576:	4b07      	ldr	r3, [pc, #28]	; (8007594 <xTimerGenericCommand+0x98>)
 8007578:	6818      	ldr	r0, [r3, #0]
 800757a:	f107 0110 	add.w	r1, r7, #16
 800757e:	2300      	movs	r3, #0
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	f7fe fd61 	bl	8006048 <xQueueGenericSendFromISR>
 8007586:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800758a:	4618      	mov	r0, r3
 800758c:	3728      	adds	r7, #40	; 0x28
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000f8c 	.word	0x20000f8c

08007598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af02      	add	r7, sp, #8
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a2:	4b22      	ldr	r3, [pc, #136]	; (800762c <prvProcessExpiredTimer+0x94>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	3304      	adds	r3, #4
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe fb1d 	bl	8005bf0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075bc:	f003 0304 	and.w	r3, r3, #4
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d022      	beq.n	800760a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	699a      	ldr	r2, [r3, #24]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	18d1      	adds	r1, r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	6978      	ldr	r0, [r7, #20]
 80075d2:	f000 f8d1 	bl	8007778 <prvInsertTimerInActiveList>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01f      	beq.n	800761c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075dc:	2300      	movs	r3, #0
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	2300      	movs	r3, #0
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	2100      	movs	r1, #0
 80075e6:	6978      	ldr	r0, [r7, #20]
 80075e8:	f7ff ff88 	bl	80074fc <xTimerGenericCommand>
 80075ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d113      	bne.n	800761c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	60fb      	str	r3, [r7, #12]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007610:	f023 0301 	bic.w	r3, r3, #1
 8007614:	b2da      	uxtb	r2, r3
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	6978      	ldr	r0, [r7, #20]
 8007622:	4798      	blx	r3
}
 8007624:	bf00      	nop
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	20000f84 	.word	0x20000f84

08007630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007638:	f107 0308 	add.w	r3, r7, #8
 800763c:	4618      	mov	r0, r3
 800763e:	f000 f857 	bl	80076f0 <prvGetNextExpireTime>
 8007642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4619      	mov	r1, r3
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f803 	bl	8007654 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800764e:	f000 f8d5 	bl	80077fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007652:	e7f1      	b.n	8007638 <prvTimerTask+0x8>

08007654 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800765e:	f7ff fa39 	bl	8006ad4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007662:	f107 0308 	add.w	r3, r7, #8
 8007666:	4618      	mov	r0, r3
 8007668:	f000 f866 	bl	8007738 <prvSampleTimeNow>
 800766c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d130      	bne.n	80076d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10a      	bne.n	8007690 <prvProcessTimerOrBlockTask+0x3c>
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	429a      	cmp	r2, r3
 8007680:	d806      	bhi.n	8007690 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007682:	f7ff fa35 	bl	8006af0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007686:	68f9      	ldr	r1, [r7, #12]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7ff ff85 	bl	8007598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800768e:	e024      	b.n	80076da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d008      	beq.n	80076a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007696:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <prvProcessTimerOrBlockTask+0x90>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <prvProcessTimerOrBlockTask+0x50>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e000      	b.n	80076a6 <prvProcessTimerOrBlockTask+0x52>
 80076a4:	2300      	movs	r3, #0
 80076a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076a8:	4b0f      	ldr	r3, [pc, #60]	; (80076e8 <prvProcessTimerOrBlockTask+0x94>)
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	4619      	mov	r1, r3
 80076b6:	f7fe ff7d 	bl	80065b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076ba:	f7ff fa19 	bl	8006af0 <xTaskResumeAll>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10a      	bne.n	80076da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076c4:	4b09      	ldr	r3, [pc, #36]	; (80076ec <prvProcessTimerOrBlockTask+0x98>)
 80076c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	f3bf 8f6f 	isb	sy
}
 80076d4:	e001      	b.n	80076da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076d6:	f7ff fa0b 	bl	8006af0 <xTaskResumeAll>
}
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20000f88 	.word	0x20000f88
 80076e8:	20000f8c 	.word	0x20000f8c
 80076ec:	e000ed04 	.word	0xe000ed04

080076f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076f8:	4b0e      	ldr	r3, [pc, #56]	; (8007734 <prvGetNextExpireTime+0x44>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <prvGetNextExpireTime+0x16>
 8007702:	2201      	movs	r2, #1
 8007704:	e000      	b.n	8007708 <prvGetNextExpireTime+0x18>
 8007706:	2200      	movs	r2, #0
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007714:	4b07      	ldr	r3, [pc, #28]	; (8007734 <prvGetNextExpireTime+0x44>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	e001      	b.n	8007724 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007724:	68fb      	ldr	r3, [r7, #12]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	20000f84 	.word	0x20000f84

08007738 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007740:	f7ff fa74 	bl	8006c2c <xTaskGetTickCount>
 8007744:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007746:	4b0b      	ldr	r3, [pc, #44]	; (8007774 <prvSampleTimeNow+0x3c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	429a      	cmp	r2, r3
 800774e:	d205      	bcs.n	800775c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007750:	f000 f936 	bl	80079c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	e002      	b.n	8007762 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007762:	4a04      	ldr	r2, [pc, #16]	; (8007774 <prvSampleTimeNow+0x3c>)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007768:	68fb      	ldr	r3, [r7, #12]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20000f94 	.word	0x20000f94

08007778 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007786:	2300      	movs	r3, #0
 8007788:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	429a      	cmp	r2, r3
 800779c:	d812      	bhi.n	80077c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	1ad2      	subs	r2, r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d302      	bcc.n	80077b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077ac:	2301      	movs	r3, #1
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	e01b      	b.n	80077ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077b2:	4b10      	ldr	r3, [pc, #64]	; (80077f4 <prvInsertTimerInActiveList+0x7c>)
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3304      	adds	r3, #4
 80077ba:	4619      	mov	r1, r3
 80077bc:	4610      	mov	r0, r2
 80077be:	f7fe f9de 	bl	8005b7e <vListInsert>
 80077c2:	e012      	b.n	80077ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d206      	bcs.n	80077da <prvInsertTimerInActiveList+0x62>
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d302      	bcc.n	80077da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077d4:	2301      	movs	r3, #1
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	e007      	b.n	80077ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077da:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <prvInsertTimerInActiveList+0x80>)
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3304      	adds	r3, #4
 80077e2:	4619      	mov	r1, r3
 80077e4:	4610      	mov	r0, r2
 80077e6:	f7fe f9ca 	bl	8005b7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077ea:	697b      	ldr	r3, [r7, #20]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20000f88 	.word	0x20000f88
 80077f8:	20000f84 	.word	0x20000f84

080077fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08e      	sub	sp, #56	; 0x38
 8007800:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007802:	e0ca      	b.n	800799a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	da18      	bge.n	800783c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800780a:	1d3b      	adds	r3, r7, #4
 800780c:	3304      	adds	r3, #4
 800780e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10a      	bne.n	800782c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	61fb      	str	r3, [r7, #28]
}
 8007828:	bf00      	nop
 800782a:	e7fe      	b.n	800782a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800782c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007832:	6850      	ldr	r0, [r2, #4]
 8007834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007836:	6892      	ldr	r2, [r2, #8]
 8007838:	4611      	mov	r1, r2
 800783a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	f2c0 80aa 	blt.w	8007998 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	3304      	adds	r3, #4
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe f9cb 	bl	8005bf0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800785a:	463b      	mov	r3, r7
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff ff6b 	bl	8007738 <prvSampleTimeNow>
 8007862:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b09      	cmp	r3, #9
 8007868:	f200 8097 	bhi.w	800799a <prvProcessReceivedCommands+0x19e>
 800786c:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <prvProcessReceivedCommands+0x78>)
 800786e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007872:	bf00      	nop
 8007874:	0800789d 	.word	0x0800789d
 8007878:	0800789d 	.word	0x0800789d
 800787c:	0800789d 	.word	0x0800789d
 8007880:	08007911 	.word	0x08007911
 8007884:	08007925 	.word	0x08007925
 8007888:	0800796f 	.word	0x0800796f
 800788c:	0800789d 	.word	0x0800789d
 8007890:	0800789d 	.word	0x0800789d
 8007894:	08007911 	.word	0x08007911
 8007898:	08007925 	.word	0x08007925
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078a2:	f043 0301 	orr.w	r3, r3, #1
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	18d1      	adds	r1, r2, r3
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078bc:	f7ff ff5c 	bl	8007778 <prvInsertTimerInActiveList>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d069      	beq.n	800799a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078d4:	f003 0304 	and.w	r3, r3, #4
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d05e      	beq.n	800799a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	441a      	add	r2, r3
 80078e4:	2300      	movs	r3, #0
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	2300      	movs	r3, #0
 80078ea:	2100      	movs	r1, #0
 80078ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ee:	f7ff fe05 	bl	80074fc <xTimerGenericCommand>
 80078f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d14f      	bne.n	800799a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	61bb      	str	r3, [r7, #24]
}
 800790c:	bf00      	nop
 800790e:	e7fe      	b.n	800790e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007916:	f023 0301 	bic.w	r3, r3, #1
 800791a:	b2da      	uxtb	r2, r3
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007922:	e03a      	b.n	800799a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800792a:	f043 0301 	orr.w	r3, r3, #1
 800792e:	b2da      	uxtb	r2, r3
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	617b      	str	r3, [r7, #20]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	699a      	ldr	r2, [r3, #24]
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	18d1      	adds	r1, r2, r3
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007968:	f7ff ff06 	bl	8007778 <prvInsertTimerInActiveList>
					break;
 800796c:	e015      	b.n	800799a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d103      	bne.n	8007984 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800797c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800797e:	f000 fbdf 	bl	8008140 <vPortFree>
 8007982:	e00a      	b.n	800799a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800798a:	f023 0301 	bic.w	r3, r3, #1
 800798e:	b2da      	uxtb	r2, r3
 8007990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007996:	e000      	b.n	800799a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007998:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800799a:	4b08      	ldr	r3, [pc, #32]	; (80079bc <prvProcessReceivedCommands+0x1c0>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	1d39      	adds	r1, r7, #4
 80079a0:	2200      	movs	r2, #0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fbec 	bl	8006180 <xQueueReceive>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f47f af2a 	bne.w	8007804 <prvProcessReceivedCommands+0x8>
	}
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	3730      	adds	r7, #48	; 0x30
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000f8c 	.word	0x20000f8c

080079c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079c6:	e048      	b.n	8007a5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079c8:	4b2d      	ldr	r3, [pc, #180]	; (8007a80 <prvSwitchTimerLists+0xc0>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d2:	4b2b      	ldr	r3, [pc, #172]	; (8007a80 <prvSwitchTimerLists+0xc0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3304      	adds	r3, #4
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe f905 	bl	8005bf0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d02e      	beq.n	8007a5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	4413      	add	r3, r2
 8007a04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d90e      	bls.n	8007a2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a1a:	4b19      	ldr	r3, [pc, #100]	; (8007a80 <prvSwitchTimerLists+0xc0>)
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3304      	adds	r3, #4
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f7fe f8aa 	bl	8005b7e <vListInsert>
 8007a2a:	e016      	b.n	8007a5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	2300      	movs	r3, #0
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	2100      	movs	r1, #0
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f7ff fd60 	bl	80074fc <xTimerGenericCommand>
 8007a3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10a      	bne.n	8007a5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	603b      	str	r3, [r7, #0]
}
 8007a56:	bf00      	nop
 8007a58:	e7fe      	b.n	8007a58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a5a:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <prvSwitchTimerLists+0xc0>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1b1      	bne.n	80079c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a64:	4b06      	ldr	r3, [pc, #24]	; (8007a80 <prvSwitchTimerLists+0xc0>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a6a:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <prvSwitchTimerLists+0xc4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a04      	ldr	r2, [pc, #16]	; (8007a80 <prvSwitchTimerLists+0xc0>)
 8007a70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a72:	4a04      	ldr	r2, [pc, #16]	; (8007a84 <prvSwitchTimerLists+0xc4>)
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	6013      	str	r3, [r2, #0]
}
 8007a78:	bf00      	nop
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	20000f84 	.word	0x20000f84
 8007a84:	20000f88 	.word	0x20000f88

08007a88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a8e:	f000 f969 	bl	8007d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a92:	4b15      	ldr	r3, [pc, #84]	; (8007ae8 <prvCheckForValidListAndQueue+0x60>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d120      	bne.n	8007adc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a9a:	4814      	ldr	r0, [pc, #80]	; (8007aec <prvCheckForValidListAndQueue+0x64>)
 8007a9c:	f7fe f81e 	bl	8005adc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007aa0:	4813      	ldr	r0, [pc, #76]	; (8007af0 <prvCheckForValidListAndQueue+0x68>)
 8007aa2:	f7fe f81b 	bl	8005adc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007aa6:	4b13      	ldr	r3, [pc, #76]	; (8007af4 <prvCheckForValidListAndQueue+0x6c>)
 8007aa8:	4a10      	ldr	r2, [pc, #64]	; (8007aec <prvCheckForValidListAndQueue+0x64>)
 8007aaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007aac:	4b12      	ldr	r3, [pc, #72]	; (8007af8 <prvCheckForValidListAndQueue+0x70>)
 8007aae:	4a10      	ldr	r2, [pc, #64]	; (8007af0 <prvCheckForValidListAndQueue+0x68>)
 8007ab0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	4b11      	ldr	r3, [pc, #68]	; (8007afc <prvCheckForValidListAndQueue+0x74>)
 8007ab8:	4a11      	ldr	r2, [pc, #68]	; (8007b00 <prvCheckForValidListAndQueue+0x78>)
 8007aba:	2110      	movs	r1, #16
 8007abc:	200a      	movs	r0, #10
 8007abe:	f7fe f929 	bl	8005d14 <xQueueGenericCreateStatic>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4a08      	ldr	r2, [pc, #32]	; (8007ae8 <prvCheckForValidListAndQueue+0x60>)
 8007ac6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ac8:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <prvCheckForValidListAndQueue+0x60>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ad0:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <prvCheckForValidListAndQueue+0x60>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	490b      	ldr	r1, [pc, #44]	; (8007b04 <prvCheckForValidListAndQueue+0x7c>)
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe fd42 	bl	8006560 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007adc:	f000 f972 	bl	8007dc4 <vPortExitCritical>
}
 8007ae0:	bf00      	nop
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000f8c 	.word	0x20000f8c
 8007aec:	20000f5c 	.word	0x20000f5c
 8007af0:	20000f70 	.word	0x20000f70
 8007af4:	20000f84 	.word	0x20000f84
 8007af8:	20000f88 	.word	0x20000f88
 8007afc:	20001038 	.word	0x20001038
 8007b00:	20000f98 	.word	0x20000f98
 8007b04:	080085b8 	.word	0x080085b8

08007b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3b04      	subs	r3, #4
 8007b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3b04      	subs	r3, #4
 8007b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f023 0201 	bic.w	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3b04      	subs	r3, #4
 8007b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b38:	4a0c      	ldr	r2, [pc, #48]	; (8007b6c <pxPortInitialiseStack+0x64>)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3b14      	subs	r3, #20
 8007b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3b04      	subs	r3, #4
 8007b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f06f 0202 	mvn.w	r2, #2
 8007b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3b20      	subs	r3, #32
 8007b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	08007b71 	.word	0x08007b71

08007b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b7a:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <prvTaskExitError+0x54>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b82:	d00a      	beq.n	8007b9a <prvTaskExitError+0x2a>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	60fb      	str	r3, [r7, #12]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <prvTaskExitError+0x28>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	60bb      	str	r3, [r7, #8]
}
 8007bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bae:	bf00      	nop
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0fc      	beq.n	8007bb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	20000010 	.word	0x20000010
	...

08007bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bd0:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <pxCurrentTCBConst2>)
 8007bd2:	6819      	ldr	r1, [r3, #0]
 8007bd4:	6808      	ldr	r0, [r1, #0]
 8007bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bda:	f380 8809 	msr	PSP, r0
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f04f 0000 	mov.w	r0, #0
 8007be6:	f380 8811 	msr	BASEPRI, r0
 8007bea:	4770      	bx	lr
 8007bec:	f3af 8000 	nop.w

08007bf0 <pxCurrentTCBConst2>:
 8007bf0:	20000a5c 	.word	0x20000a5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop

08007bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bf8:	4808      	ldr	r0, [pc, #32]	; (8007c1c <prvPortStartFirstTask+0x24>)
 8007bfa:	6800      	ldr	r0, [r0, #0]
 8007bfc:	6800      	ldr	r0, [r0, #0]
 8007bfe:	f380 8808 	msr	MSP, r0
 8007c02:	f04f 0000 	mov.w	r0, #0
 8007c06:	f380 8814 	msr	CONTROL, r0
 8007c0a:	b662      	cpsie	i
 8007c0c:	b661      	cpsie	f
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	df00      	svc	0
 8007c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c1a:	bf00      	nop
 8007c1c:	e000ed08 	.word	0xe000ed08

08007c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c26:	4b46      	ldr	r3, [pc, #280]	; (8007d40 <xPortStartScheduler+0x120>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a46      	ldr	r2, [pc, #280]	; (8007d44 <xPortStartScheduler+0x124>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d10a      	bne.n	8007c46 <xPortStartScheduler+0x26>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	613b      	str	r3, [r7, #16]
}
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c46:	4b3e      	ldr	r3, [pc, #248]	; (8007d40 <xPortStartScheduler+0x120>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a3f      	ldr	r2, [pc, #252]	; (8007d48 <xPortStartScheduler+0x128>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d10a      	bne.n	8007c66 <xPortStartScheduler+0x46>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	60fb      	str	r3, [r7, #12]
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c66:	4b39      	ldr	r3, [pc, #228]	; (8007d4c <xPortStartScheduler+0x12c>)
 8007c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	22ff      	movs	r2, #255	; 0xff
 8007c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	4b31      	ldr	r3, [pc, #196]	; (8007d50 <xPortStartScheduler+0x130>)
 8007c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c8e:	4b31      	ldr	r3, [pc, #196]	; (8007d54 <xPortStartScheduler+0x134>)
 8007c90:	2207      	movs	r2, #7
 8007c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c94:	e009      	b.n	8007caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c96:	4b2f      	ldr	r3, [pc, #188]	; (8007d54 <xPortStartScheduler+0x134>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	4a2d      	ldr	r2, [pc, #180]	; (8007d54 <xPortStartScheduler+0x134>)
 8007c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007caa:	78fb      	ldrb	r3, [r7, #3]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb2:	2b80      	cmp	r3, #128	; 0x80
 8007cb4:	d0ef      	beq.n	8007c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cb6:	4b27      	ldr	r3, [pc, #156]	; (8007d54 <xPortStartScheduler+0x134>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f1c3 0307 	rsb	r3, r3, #7
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	d00a      	beq.n	8007cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	60bb      	str	r3, [r7, #8]
}
 8007cd4:	bf00      	nop
 8007cd6:	e7fe      	b.n	8007cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cd8:	4b1e      	ldr	r3, [pc, #120]	; (8007d54 <xPortStartScheduler+0x134>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <xPortStartScheduler+0x134>)
 8007ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ce2:	4b1c      	ldr	r3, [pc, #112]	; (8007d54 <xPortStartScheduler+0x134>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cea:	4a1a      	ldr	r2, [pc, #104]	; (8007d54 <xPortStartScheduler+0x134>)
 8007cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cf6:	4b18      	ldr	r3, [pc, #96]	; (8007d58 <xPortStartScheduler+0x138>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a17      	ldr	r2, [pc, #92]	; (8007d58 <xPortStartScheduler+0x138>)
 8007cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d02:	4b15      	ldr	r3, [pc, #84]	; (8007d58 <xPortStartScheduler+0x138>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a14      	ldr	r2, [pc, #80]	; (8007d58 <xPortStartScheduler+0x138>)
 8007d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d0e:	f000 f8dd 	bl	8007ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d12:	4b12      	ldr	r3, [pc, #72]	; (8007d5c <xPortStartScheduler+0x13c>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d18:	f000 f8fc 	bl	8007f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d1c:	4b10      	ldr	r3, [pc, #64]	; (8007d60 <xPortStartScheduler+0x140>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a0f      	ldr	r2, [pc, #60]	; (8007d60 <xPortStartScheduler+0x140>)
 8007d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d28:	f7ff ff66 	bl	8007bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d2c:	f7ff f848 	bl	8006dc0 <vTaskSwitchContext>
	prvTaskExitError();
 8007d30:	f7ff ff1e 	bl	8007b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	e000ed00 	.word	0xe000ed00
 8007d44:	410fc271 	.word	0x410fc271
 8007d48:	410fc270 	.word	0x410fc270
 8007d4c:	e000e400 	.word	0xe000e400
 8007d50:	20001088 	.word	0x20001088
 8007d54:	2000108c 	.word	0x2000108c
 8007d58:	e000ed20 	.word	0xe000ed20
 8007d5c:	20000010 	.word	0x20000010
 8007d60:	e000ef34 	.word	0xe000ef34

08007d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	607b      	str	r3, [r7, #4]
}
 8007d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d7e:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <vPortEnterCritical+0x58>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3301      	adds	r3, #1
 8007d84:	4a0d      	ldr	r2, [pc, #52]	; (8007dbc <vPortEnterCritical+0x58>)
 8007d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d88:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <vPortEnterCritical+0x58>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d10f      	bne.n	8007db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d90:	4b0b      	ldr	r3, [pc, #44]	; (8007dc0 <vPortEnterCritical+0x5c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	603b      	str	r3, [r7, #0]
}
 8007dac:	bf00      	nop
 8007dae:	e7fe      	b.n	8007dae <vPortEnterCritical+0x4a>
	}
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	20000010 	.word	0x20000010
 8007dc0:	e000ed04 	.word	0xe000ed04

08007dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dca:	4b12      	ldr	r3, [pc, #72]	; (8007e14 <vPortExitCritical+0x50>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <vPortExitCritical+0x24>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	607b      	str	r3, [r7, #4]
}
 8007de4:	bf00      	nop
 8007de6:	e7fe      	b.n	8007de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007de8:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <vPortExitCritical+0x50>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	4a09      	ldr	r2, [pc, #36]	; (8007e14 <vPortExitCritical+0x50>)
 8007df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007df2:	4b08      	ldr	r3, [pc, #32]	; (8007e14 <vPortExitCritical+0x50>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d105      	bne.n	8007e06 <vPortExitCritical+0x42>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	f383 8811 	msr	BASEPRI, r3
}
 8007e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20000010 	.word	0x20000010
	...

08007e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e20:	f3ef 8009 	mrs	r0, PSP
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	4b15      	ldr	r3, [pc, #84]	; (8007e80 <pxCurrentTCBConst>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	f01e 0f10 	tst.w	lr, #16
 8007e30:	bf08      	it	eq
 8007e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	6010      	str	r0, [r2, #0]
 8007e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e44:	f380 8811 	msr	BASEPRI, r0
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f7fe ffb6 	bl	8006dc0 <vTaskSwitchContext>
 8007e54:	f04f 0000 	mov.w	r0, #0
 8007e58:	f380 8811 	msr	BASEPRI, r0
 8007e5c:	bc09      	pop	{r0, r3}
 8007e5e:	6819      	ldr	r1, [r3, #0]
 8007e60:	6808      	ldr	r0, [r1, #0]
 8007e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e66:	f01e 0f10 	tst.w	lr, #16
 8007e6a:	bf08      	it	eq
 8007e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e70:	f380 8809 	msr	PSP, r0
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	f3af 8000 	nop.w

08007e80 <pxCurrentTCBConst>:
 8007e80:	20000a5c 	.word	0x20000a5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop

08007e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	607b      	str	r3, [r7, #4]
}
 8007ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ea2:	f7fe fed3 	bl	8006c4c <xTaskIncrementTick>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007eac:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <xPortSysTickHandler+0x40>)
 8007eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	f383 8811 	msr	BASEPRI, r3
}
 8007ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <vPortSetupTimerInterrupt+0x34>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ed6:	4b0b      	ldr	r3, [pc, #44]	; (8007f04 <vPortSetupTimerInterrupt+0x38>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007edc:	4b0a      	ldr	r3, [pc, #40]	; (8007f08 <vPortSetupTimerInterrupt+0x3c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <vPortSetupTimerInterrupt+0x40>)
 8007ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee6:	099b      	lsrs	r3, r3, #6
 8007ee8:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <vPortSetupTimerInterrupt+0x44>)
 8007eea:	3b01      	subs	r3, #1
 8007eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007eee:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <vPortSetupTimerInterrupt+0x34>)
 8007ef0:	2207      	movs	r2, #7
 8007ef2:	601a      	str	r2, [r3, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	e000e010 	.word	0xe000e010
 8007f04:	e000e018 	.word	0xe000e018
 8007f08:	20000004 	.word	0x20000004
 8007f0c:	10624dd3 	.word	0x10624dd3
 8007f10:	e000e014 	.word	0xe000e014

08007f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f24 <vPortEnableVFP+0x10>
 8007f18:	6801      	ldr	r1, [r0, #0]
 8007f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f1e:	6001      	str	r1, [r0, #0]
 8007f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f22:	bf00      	nop
 8007f24:	e000ed88 	.word	0xe000ed88

08007f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f2e:	f3ef 8305 	mrs	r3, IPSR
 8007f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b0f      	cmp	r3, #15
 8007f38:	d914      	bls.n	8007f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f3a:	4a17      	ldr	r2, [pc, #92]	; (8007f98 <vPortValidateInterruptPriority+0x70>)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f44:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <vPortValidateInterruptPriority+0x74>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	7afa      	ldrb	r2, [r7, #11]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d20a      	bcs.n	8007f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	607b      	str	r3, [r7, #4]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f64:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <vPortValidateInterruptPriority+0x78>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <vPortValidateInterruptPriority+0x7c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d90a      	bls.n	8007f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	603b      	str	r3, [r7, #0]
}
 8007f86:	bf00      	nop
 8007f88:	e7fe      	b.n	8007f88 <vPortValidateInterruptPriority+0x60>
	}
 8007f8a:	bf00      	nop
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	e000e3f0 	.word	0xe000e3f0
 8007f9c:	20001088 	.word	0x20001088
 8007fa0:	e000ed0c 	.word	0xe000ed0c
 8007fa4:	2000108c 	.word	0x2000108c

08007fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08a      	sub	sp, #40	; 0x28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fb4:	f7fe fd8e 	bl	8006ad4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fb8:	4b5b      	ldr	r3, [pc, #364]	; (8008128 <pvPortMalloc+0x180>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fc0:	f000 f920 	bl	8008204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fc4:	4b59      	ldr	r3, [pc, #356]	; (800812c <pvPortMalloc+0x184>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f040 8093 	bne.w	80080f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01d      	beq.n	8008014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007fd8:	2208      	movs	r2, #8
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d014      	beq.n	8008014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f023 0307 	bic.w	r3, r3, #7
 8007ff0:	3308      	adds	r3, #8
 8007ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00a      	beq.n	8008014 <pvPortMalloc+0x6c>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	617b      	str	r3, [r7, #20]
}
 8008010:	bf00      	nop
 8008012:	e7fe      	b.n	8008012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d06e      	beq.n	80080f8 <pvPortMalloc+0x150>
 800801a:	4b45      	ldr	r3, [pc, #276]	; (8008130 <pvPortMalloc+0x188>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	429a      	cmp	r2, r3
 8008022:	d869      	bhi.n	80080f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008024:	4b43      	ldr	r3, [pc, #268]	; (8008134 <pvPortMalloc+0x18c>)
 8008026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008028:	4b42      	ldr	r3, [pc, #264]	; (8008134 <pvPortMalloc+0x18c>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800802e:	e004      	b.n	800803a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	429a      	cmp	r2, r3
 8008042:	d903      	bls.n	800804c <pvPortMalloc+0xa4>
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1f1      	bne.n	8008030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800804c:	4b36      	ldr	r3, [pc, #216]	; (8008128 <pvPortMalloc+0x180>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008052:	429a      	cmp	r2, r3
 8008054:	d050      	beq.n	80080f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2208      	movs	r2, #8
 800805c:	4413      	add	r3, r2
 800805e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	2308      	movs	r3, #8
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	429a      	cmp	r2, r3
 8008076:	d91f      	bls.n	80080b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4413      	add	r3, r2
 800807e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <pvPortMalloc+0xf8>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	613b      	str	r3, [r7, #16]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	1ad2      	subs	r2, r2, r3
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080b2:	69b8      	ldr	r0, [r7, #24]
 80080b4:	f000 f908 	bl	80082c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080b8:	4b1d      	ldr	r3, [pc, #116]	; (8008130 <pvPortMalloc+0x188>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	4a1b      	ldr	r2, [pc, #108]	; (8008130 <pvPortMalloc+0x188>)
 80080c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080c6:	4b1a      	ldr	r3, [pc, #104]	; (8008130 <pvPortMalloc+0x188>)
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	4b1b      	ldr	r3, [pc, #108]	; (8008138 <pvPortMalloc+0x190>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d203      	bcs.n	80080da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080d2:	4b17      	ldr	r3, [pc, #92]	; (8008130 <pvPortMalloc+0x188>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a18      	ldr	r2, [pc, #96]	; (8008138 <pvPortMalloc+0x190>)
 80080d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	4b13      	ldr	r3, [pc, #76]	; (800812c <pvPortMalloc+0x184>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	431a      	orrs	r2, r3
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080ee:	4b13      	ldr	r3, [pc, #76]	; (800813c <pvPortMalloc+0x194>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	4a11      	ldr	r2, [pc, #68]	; (800813c <pvPortMalloc+0x194>)
 80080f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080f8:	f7fe fcfa 	bl	8006af0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <pvPortMalloc+0x174>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	60fb      	str	r3, [r7, #12]
}
 8008118:	bf00      	nop
 800811a:	e7fe      	b.n	800811a <pvPortMalloc+0x172>
	return pvReturn;
 800811c:	69fb      	ldr	r3, [r7, #28]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3728      	adds	r7, #40	; 0x28
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20004c98 	.word	0x20004c98
 800812c:	20004cac 	.word	0x20004cac
 8008130:	20004c9c 	.word	0x20004c9c
 8008134:	20004c90 	.word	0x20004c90
 8008138:	20004ca0 	.word	0x20004ca0
 800813c:	20004ca4 	.word	0x20004ca4

08008140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d04d      	beq.n	80081ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008152:	2308      	movs	r3, #8
 8008154:	425b      	negs	r3, r3
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	4413      	add	r3, r2
 800815a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	4b24      	ldr	r3, [pc, #144]	; (80081f8 <vPortFree+0xb8>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4013      	ands	r3, r2
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10a      	bne.n	8008184 <vPortFree+0x44>
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	60fb      	str	r3, [r7, #12]
}
 8008180:	bf00      	nop
 8008182:	e7fe      	b.n	8008182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00a      	beq.n	80081a2 <vPortFree+0x62>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	60bb      	str	r3, [r7, #8]
}
 800819e:	bf00      	nop
 80081a0:	e7fe      	b.n	80081a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	4b14      	ldr	r3, [pc, #80]	; (80081f8 <vPortFree+0xb8>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4013      	ands	r3, r2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01e      	beq.n	80081ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d11a      	bne.n	80081ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	4b0e      	ldr	r3, [pc, #56]	; (80081f8 <vPortFree+0xb8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	43db      	mvns	r3, r3
 80081c2:	401a      	ands	r2, r3
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081c8:	f7fe fc84 	bl	8006ad4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <vPortFree+0xbc>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4413      	add	r3, r2
 80081d6:	4a09      	ldr	r2, [pc, #36]	; (80081fc <vPortFree+0xbc>)
 80081d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081da:	6938      	ldr	r0, [r7, #16]
 80081dc:	f000 f874 	bl	80082c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081e0:	4b07      	ldr	r3, [pc, #28]	; (8008200 <vPortFree+0xc0>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3301      	adds	r3, #1
 80081e6:	4a06      	ldr	r2, [pc, #24]	; (8008200 <vPortFree+0xc0>)
 80081e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081ea:	f7fe fc81 	bl	8006af0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081ee:	bf00      	nop
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20004cac 	.word	0x20004cac
 80081fc:	20004c9c 	.word	0x20004c9c
 8008200:	20004ca8 	.word	0x20004ca8

08008204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800820a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800820e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008210:	4b27      	ldr	r3, [pc, #156]	; (80082b0 <prvHeapInit+0xac>)
 8008212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00c      	beq.n	8008238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3307      	adds	r3, #7
 8008222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 0307 	bic.w	r3, r3, #7
 800822a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	4a1f      	ldr	r2, [pc, #124]	; (80082b0 <prvHeapInit+0xac>)
 8008234:	4413      	add	r3, r2
 8008236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800823c:	4a1d      	ldr	r2, [pc, #116]	; (80082b4 <prvHeapInit+0xb0>)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008242:	4b1c      	ldr	r3, [pc, #112]	; (80082b4 <prvHeapInit+0xb0>)
 8008244:	2200      	movs	r2, #0
 8008246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	4413      	add	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008250:	2208      	movs	r2, #8
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	1a9b      	subs	r3, r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 0307 	bic.w	r3, r3, #7
 800825e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4a15      	ldr	r2, [pc, #84]	; (80082b8 <prvHeapInit+0xb4>)
 8008264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008266:	4b14      	ldr	r3, [pc, #80]	; (80082b8 <prvHeapInit+0xb4>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2200      	movs	r2, #0
 800826c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800826e:	4b12      	ldr	r3, [pc, #72]	; (80082b8 <prvHeapInit+0xb4>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008284:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <prvHeapInit+0xb4>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	4a0a      	ldr	r2, [pc, #40]	; (80082bc <prvHeapInit+0xb8>)
 8008292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	4a09      	ldr	r2, [pc, #36]	; (80082c0 <prvHeapInit+0xbc>)
 800829a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800829c:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <prvHeapInit+0xc0>)
 800829e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082a2:	601a      	str	r2, [r3, #0]
}
 80082a4:	bf00      	nop
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	20001090 	.word	0x20001090
 80082b4:	20004c90 	.word	0x20004c90
 80082b8:	20004c98 	.word	0x20004c98
 80082bc:	20004ca0 	.word	0x20004ca0
 80082c0:	20004c9c 	.word	0x20004c9c
 80082c4:	20004cac 	.word	0x20004cac

080082c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082d0:	4b28      	ldr	r3, [pc, #160]	; (8008374 <prvInsertBlockIntoFreeList+0xac>)
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	e002      	b.n	80082dc <prvInsertBlockIntoFreeList+0x14>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d8f7      	bhi.n	80082d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	4413      	add	r3, r2
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d108      	bne.n	800830a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	441a      	add	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	441a      	add	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d118      	bne.n	8008350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	4b15      	ldr	r3, [pc, #84]	; (8008378 <prvInsertBlockIntoFreeList+0xb0>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	429a      	cmp	r2, r3
 8008328:	d00d      	beq.n	8008346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	441a      	add	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	e008      	b.n	8008358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008346:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <prvInsertBlockIntoFreeList+0xb0>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	e003      	b.n	8008358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	429a      	cmp	r2, r3
 800835e:	d002      	beq.n	8008366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20004c90 	.word	0x20004c90
 8008378:	20004c98 	.word	0x20004c98

0800837c <__libc_init_array>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	4d0d      	ldr	r5, [pc, #52]	; (80083b4 <__libc_init_array+0x38>)
 8008380:	4c0d      	ldr	r4, [pc, #52]	; (80083b8 <__libc_init_array+0x3c>)
 8008382:	1b64      	subs	r4, r4, r5
 8008384:	10a4      	asrs	r4, r4, #2
 8008386:	2600      	movs	r6, #0
 8008388:	42a6      	cmp	r6, r4
 800838a:	d109      	bne.n	80083a0 <__libc_init_array+0x24>
 800838c:	4d0b      	ldr	r5, [pc, #44]	; (80083bc <__libc_init_array+0x40>)
 800838e:	4c0c      	ldr	r4, [pc, #48]	; (80083c0 <__libc_init_array+0x44>)
 8008390:	f000 f8f2 	bl	8008578 <_init>
 8008394:	1b64      	subs	r4, r4, r5
 8008396:	10a4      	asrs	r4, r4, #2
 8008398:	2600      	movs	r6, #0
 800839a:	42a6      	cmp	r6, r4
 800839c:	d105      	bne.n	80083aa <__libc_init_array+0x2e>
 800839e:	bd70      	pop	{r4, r5, r6, pc}
 80083a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a4:	4798      	blx	r3
 80083a6:	3601      	adds	r6, #1
 80083a8:	e7ee      	b.n	8008388 <__libc_init_array+0xc>
 80083aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ae:	4798      	blx	r3
 80083b0:	3601      	adds	r6, #1
 80083b2:	e7f2      	b.n	800839a <__libc_init_array+0x1e>
 80083b4:	08008690 	.word	0x08008690
 80083b8:	08008690 	.word	0x08008690
 80083bc:	08008690 	.word	0x08008690
 80083c0:	08008694 	.word	0x08008694

080083c4 <__retarget_lock_acquire_recursive>:
 80083c4:	4770      	bx	lr

080083c6 <__retarget_lock_release_recursive>:
 80083c6:	4770      	bx	lr

080083c8 <memcpy>:
 80083c8:	440a      	add	r2, r1
 80083ca:	4291      	cmp	r1, r2
 80083cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80083d0:	d100      	bne.n	80083d4 <memcpy+0xc>
 80083d2:	4770      	bx	lr
 80083d4:	b510      	push	{r4, lr}
 80083d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083de:	4291      	cmp	r1, r2
 80083e0:	d1f9      	bne.n	80083d6 <memcpy+0xe>
 80083e2:	bd10      	pop	{r4, pc}

080083e4 <memset>:
 80083e4:	4402      	add	r2, r0
 80083e6:	4603      	mov	r3, r0
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d100      	bne.n	80083ee <memset+0xa>
 80083ec:	4770      	bx	lr
 80083ee:	f803 1b01 	strb.w	r1, [r3], #1
 80083f2:	e7f9      	b.n	80083e8 <memset+0x4>

080083f4 <cleanup_glue>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	460c      	mov	r4, r1
 80083f8:	6809      	ldr	r1, [r1, #0]
 80083fa:	4605      	mov	r5, r0
 80083fc:	b109      	cbz	r1, 8008402 <cleanup_glue+0xe>
 80083fe:	f7ff fff9 	bl	80083f4 <cleanup_glue>
 8008402:	4621      	mov	r1, r4
 8008404:	4628      	mov	r0, r5
 8008406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800840a:	f000 b869 	b.w	80084e0 <_free_r>
	...

08008410 <_reclaim_reent>:
 8008410:	4b2c      	ldr	r3, [pc, #176]	; (80084c4 <_reclaim_reent+0xb4>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4283      	cmp	r3, r0
 8008416:	b570      	push	{r4, r5, r6, lr}
 8008418:	4604      	mov	r4, r0
 800841a:	d051      	beq.n	80084c0 <_reclaim_reent+0xb0>
 800841c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800841e:	b143      	cbz	r3, 8008432 <_reclaim_reent+0x22>
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d14a      	bne.n	80084bc <_reclaim_reent+0xac>
 8008426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008428:	6819      	ldr	r1, [r3, #0]
 800842a:	b111      	cbz	r1, 8008432 <_reclaim_reent+0x22>
 800842c:	4620      	mov	r0, r4
 800842e:	f000 f857 	bl	80084e0 <_free_r>
 8008432:	6961      	ldr	r1, [r4, #20]
 8008434:	b111      	cbz	r1, 800843c <_reclaim_reent+0x2c>
 8008436:	4620      	mov	r0, r4
 8008438:	f000 f852 	bl	80084e0 <_free_r>
 800843c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800843e:	b111      	cbz	r1, 8008446 <_reclaim_reent+0x36>
 8008440:	4620      	mov	r0, r4
 8008442:	f000 f84d 	bl	80084e0 <_free_r>
 8008446:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008448:	b111      	cbz	r1, 8008450 <_reclaim_reent+0x40>
 800844a:	4620      	mov	r0, r4
 800844c:	f000 f848 	bl	80084e0 <_free_r>
 8008450:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008452:	b111      	cbz	r1, 800845a <_reclaim_reent+0x4a>
 8008454:	4620      	mov	r0, r4
 8008456:	f000 f843 	bl	80084e0 <_free_r>
 800845a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800845c:	b111      	cbz	r1, 8008464 <_reclaim_reent+0x54>
 800845e:	4620      	mov	r0, r4
 8008460:	f000 f83e 	bl	80084e0 <_free_r>
 8008464:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008466:	b111      	cbz	r1, 800846e <_reclaim_reent+0x5e>
 8008468:	4620      	mov	r0, r4
 800846a:	f000 f839 	bl	80084e0 <_free_r>
 800846e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008470:	b111      	cbz	r1, 8008478 <_reclaim_reent+0x68>
 8008472:	4620      	mov	r0, r4
 8008474:	f000 f834 	bl	80084e0 <_free_r>
 8008478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800847a:	b111      	cbz	r1, 8008482 <_reclaim_reent+0x72>
 800847c:	4620      	mov	r0, r4
 800847e:	f000 f82f 	bl	80084e0 <_free_r>
 8008482:	69a3      	ldr	r3, [r4, #24]
 8008484:	b1e3      	cbz	r3, 80084c0 <_reclaim_reent+0xb0>
 8008486:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008488:	4620      	mov	r0, r4
 800848a:	4798      	blx	r3
 800848c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800848e:	b1b9      	cbz	r1, 80084c0 <_reclaim_reent+0xb0>
 8008490:	4620      	mov	r0, r4
 8008492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008496:	f7ff bfad 	b.w	80083f4 <cleanup_glue>
 800849a:	5949      	ldr	r1, [r1, r5]
 800849c:	b941      	cbnz	r1, 80084b0 <_reclaim_reent+0xa0>
 800849e:	3504      	adds	r5, #4
 80084a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084a2:	2d80      	cmp	r5, #128	; 0x80
 80084a4:	68d9      	ldr	r1, [r3, #12]
 80084a6:	d1f8      	bne.n	800849a <_reclaim_reent+0x8a>
 80084a8:	4620      	mov	r0, r4
 80084aa:	f000 f819 	bl	80084e0 <_free_r>
 80084ae:	e7ba      	b.n	8008426 <_reclaim_reent+0x16>
 80084b0:	680e      	ldr	r6, [r1, #0]
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 f814 	bl	80084e0 <_free_r>
 80084b8:	4631      	mov	r1, r6
 80084ba:	e7ef      	b.n	800849c <_reclaim_reent+0x8c>
 80084bc:	2500      	movs	r5, #0
 80084be:	e7ef      	b.n	80084a0 <_reclaim_reent+0x90>
 80084c0:	bd70      	pop	{r4, r5, r6, pc}
 80084c2:	bf00      	nop
 80084c4:	20000014 	.word	0x20000014

080084c8 <__malloc_lock>:
 80084c8:	4801      	ldr	r0, [pc, #4]	; (80084d0 <__malloc_lock+0x8>)
 80084ca:	f7ff bf7b 	b.w	80083c4 <__retarget_lock_acquire_recursive>
 80084ce:	bf00      	nop
 80084d0:	20004cb0 	.word	0x20004cb0

080084d4 <__malloc_unlock>:
 80084d4:	4801      	ldr	r0, [pc, #4]	; (80084dc <__malloc_unlock+0x8>)
 80084d6:	f7ff bf76 	b.w	80083c6 <__retarget_lock_release_recursive>
 80084da:	bf00      	nop
 80084dc:	20004cb0 	.word	0x20004cb0

080084e0 <_free_r>:
 80084e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084e2:	2900      	cmp	r1, #0
 80084e4:	d044      	beq.n	8008570 <_free_r+0x90>
 80084e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ea:	9001      	str	r0, [sp, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f1a1 0404 	sub.w	r4, r1, #4
 80084f2:	bfb8      	it	lt
 80084f4:	18e4      	addlt	r4, r4, r3
 80084f6:	f7ff ffe7 	bl	80084c8 <__malloc_lock>
 80084fa:	4a1e      	ldr	r2, [pc, #120]	; (8008574 <_free_r+0x94>)
 80084fc:	9801      	ldr	r0, [sp, #4]
 80084fe:	6813      	ldr	r3, [r2, #0]
 8008500:	b933      	cbnz	r3, 8008510 <_free_r+0x30>
 8008502:	6063      	str	r3, [r4, #4]
 8008504:	6014      	str	r4, [r2, #0]
 8008506:	b003      	add	sp, #12
 8008508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800850c:	f7ff bfe2 	b.w	80084d4 <__malloc_unlock>
 8008510:	42a3      	cmp	r3, r4
 8008512:	d908      	bls.n	8008526 <_free_r+0x46>
 8008514:	6825      	ldr	r5, [r4, #0]
 8008516:	1961      	adds	r1, r4, r5
 8008518:	428b      	cmp	r3, r1
 800851a:	bf01      	itttt	eq
 800851c:	6819      	ldreq	r1, [r3, #0]
 800851e:	685b      	ldreq	r3, [r3, #4]
 8008520:	1949      	addeq	r1, r1, r5
 8008522:	6021      	streq	r1, [r4, #0]
 8008524:	e7ed      	b.n	8008502 <_free_r+0x22>
 8008526:	461a      	mov	r2, r3
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	b10b      	cbz	r3, 8008530 <_free_r+0x50>
 800852c:	42a3      	cmp	r3, r4
 800852e:	d9fa      	bls.n	8008526 <_free_r+0x46>
 8008530:	6811      	ldr	r1, [r2, #0]
 8008532:	1855      	adds	r5, r2, r1
 8008534:	42a5      	cmp	r5, r4
 8008536:	d10b      	bne.n	8008550 <_free_r+0x70>
 8008538:	6824      	ldr	r4, [r4, #0]
 800853a:	4421      	add	r1, r4
 800853c:	1854      	adds	r4, r2, r1
 800853e:	42a3      	cmp	r3, r4
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	d1e0      	bne.n	8008506 <_free_r+0x26>
 8008544:	681c      	ldr	r4, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	6053      	str	r3, [r2, #4]
 800854a:	4421      	add	r1, r4
 800854c:	6011      	str	r1, [r2, #0]
 800854e:	e7da      	b.n	8008506 <_free_r+0x26>
 8008550:	d902      	bls.n	8008558 <_free_r+0x78>
 8008552:	230c      	movs	r3, #12
 8008554:	6003      	str	r3, [r0, #0]
 8008556:	e7d6      	b.n	8008506 <_free_r+0x26>
 8008558:	6825      	ldr	r5, [r4, #0]
 800855a:	1961      	adds	r1, r4, r5
 800855c:	428b      	cmp	r3, r1
 800855e:	bf04      	itt	eq
 8008560:	6819      	ldreq	r1, [r3, #0]
 8008562:	685b      	ldreq	r3, [r3, #4]
 8008564:	6063      	str	r3, [r4, #4]
 8008566:	bf04      	itt	eq
 8008568:	1949      	addeq	r1, r1, r5
 800856a:	6021      	streq	r1, [r4, #0]
 800856c:	6054      	str	r4, [r2, #4]
 800856e:	e7ca      	b.n	8008506 <_free_r+0x26>
 8008570:	b003      	add	sp, #12
 8008572:	bd30      	pop	{r4, r5, pc}
 8008574:	20004cb4 	.word	0x20004cb4

08008578 <_init>:
 8008578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857a:	bf00      	nop
 800857c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800857e:	bc08      	pop	{r3}
 8008580:	469e      	mov	lr, r3
 8008582:	4770      	bx	lr

08008584 <_fini>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	bf00      	nop
 8008588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858a:	bc08      	pop	{r3}
 800858c:	469e      	mov	lr, r3
 800858e:	4770      	bx	lr
